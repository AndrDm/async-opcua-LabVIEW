//! Contains data types and enumerations for OPC UA.
//!
//! 1. All of the built-in data types described in OPC Part 6 Chapter 5 that are encodable
//! 2. All of the standard data types described in OPC Part 3 Chapter 8 (if not covered by 1.)
//! 3. Autogenerated data types and request / responses as described in OPC Part 4

#[macro_use]
extern crate log;
#[macro_use]
extern crate lazy_static;
extern crate byteorder;
extern crate chrono;
extern crate regex;
extern crate rand;
extern crate url;

use std::io::{Read, Write};

///Contains constants recognized by OPC UA clients and servers to describe various protocols and
/// profiles used during communication and encryption.
pub mod profiles {
    pub const TRANSPORT_BINARY: &'static str = "http://opcfoundation.org/UA-Profile/Transport/uatcp-uasc-uabinary";

    pub const SECURITY_POLICY_NONE: &'static str = "http://opcfoundation.org/UA/SecurityPolicy#None";
    pub const SECURITY_POLICY_BASIC_128_RSA_15: &'static str = "http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15";
    pub const SECURITY_POLICY_BASIC_256: &'static str = "http://opcfoundation.org/UA/SecurityPolicy#Basic256";
    pub const SECURITY_POLICY_BASIC_256_SHA_256: &'static str = "http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256";

    pub const SECURITY_USER_TOKEN_POLICY_ANONYMOUS: &'static str = "http://opcfoundation.org/UA-Profile/Security/UserToken/Anonymous";
    pub const SECURITY_USER_TOKEN_POLICY_USERPASS: &'static str = "http://opcfoundation.org/UA-Profile/ Security/UserToken-Server/UserNamePassword";
}

pub mod constants {
    /// Maximum number of elements in an array
    pub const MAX_ARRAY_LENGTH: u32 = 1000;
    /// Maximum size of a string in chars
    pub const MAX_STRING_LENGTH: u32 = 65536;
    /// Maximum size of a byte string in bytes
    pub const MAX_BYTE_STRING_LENGTH: u32 = 65536;
    /// Maximum size of a certificate to send
    pub const MAX_CERTIFICATE_LENGTH: u32 = 32768;

    pub const SECURITY_POLICY_NONE: &'static str = "None";
    pub const SECURITY_POLICY_BASIC_128_RSA_15: &'static str = "Basic128Rsa15";
    pub const SECURITY_POLICY_BASIC_256: &'static str = "Basic256";
    pub const SECURITY_POLICY_BASIC_256_SHA_256: &'static str = "Basic256Sha256";

    pub const SECURITY_MODE_NONE: &'static str = "None";
    pub const SECURITY_MODE_SIGN: &'static str = "Sign";
    pub const SECURITY_MODE_SIGN_AND_ENCRYPT: &'static str = "SignAndEncrypt";
}

pub type EncodingResult<T> = std::result::Result<T, StatusCode>;

/// OPC UA Binary Encoding interface. Anything that encodes to binary must implement this. It provides
/// functions to calculate the size in bytes of the struct (for allocating memory), encoding to a stream
/// and decoding from a stream.
pub trait BinaryEncoder<T> {
    /// Returns the byte length of the structure. This calculation should be exact and as efficient
    /// as possible.
    fn byte_len(&self) -> usize;
    /// Encodes the instance to the write stream.
    fn encode<S: Write>(&self, _: &mut S) -> EncodingResult<usize>;
    /// Decodes an instance from the read stream.
    fn decode<S: Read>(_: &mut S) -> EncodingResult<T>;
}

mod helpers;
mod basic_types;
mod data_value;
mod date_time;
mod node_id;
mod variant;
mod data_types;
mod notification_message;
mod generated;
mod attribute;
mod service_types;

pub use self::helpers::*;
pub use self::basic_types::*;
pub use self::data_value::*;
pub use self::date_time::*;
pub use self::node_id::*;
pub use self::variant::*;
pub use self::data_types::*;
pub use self::generated::*;
pub use self::attribute::*;
pub use self::service_types::*;

#[cfg(test)]
mod tests;
