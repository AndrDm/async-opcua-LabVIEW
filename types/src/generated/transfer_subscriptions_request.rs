// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use super::super::*;

#[derive(Debug, Clone, PartialEq)]
pub struct TransferSubscriptionsRequest {
    pub request_header: RequestHeader,
    pub subscription_ids: Option<Vec<UInt32>>,
    pub send_initial_values: Boolean,
}

impl MessageInfo for TransferSubscriptionsRequest {
    fn object_id(&self) -> ObjectId {
        ObjectId::TransferSubscriptionsRequest_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<TransferSubscriptionsRequest> for TransferSubscriptionsRequest {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.request_header.byte_len();
        size += byte_len_array(&self.subscription_ids);
        size += self.send_initial_values.byte_len();
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.request_header.encode(stream)?;
        size += write_array(stream, &self.subscription_ids)?;
        size += self.send_initial_values.encode(stream)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let request_header = RequestHeader::decode(stream)?;
        let subscription_ids: Option<Vec<UInt32>> = read_array(stream)?;
        let send_initial_values = Boolean::decode(stream)?;
        Ok(TransferSubscriptionsRequest {
            request_header,
            subscription_ids,
            send_initial_values,
        })
    }
}
