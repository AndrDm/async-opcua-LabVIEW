// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use encoding::*;
#[allow(unused_imports)]
use basic_types::*;
#[allow(unused_imports)]
use string::*;
#[allow(unused_imports)]
use data_types::*;
#[allow(unused_imports)]
use data_value::*;
#[allow(unused_imports)]
use attribute::*;
#[allow(unused_imports)]
use date_time::*;
#[allow(unused_imports)]
use node_id::*;
#[allow(unused_imports)]
use service_types::*;
#[allow(unused_imports)]
use variant::*;
#[allow(unused_imports)]
use generated::node_ids::ObjectId;
#[allow(unused_imports)]
use generated::status_codes::StatusCode;

#[derive(Debug, Clone, PartialEq)]
pub struct Annotation {
    pub message: UAString,
    pub user_name: UAString,
    pub annotation_time: DateTime,
}

impl MessageInfo for Annotation {
    fn object_id(&self) -> ObjectId {
        ObjectId::Annotation_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<Annotation> for Annotation {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.message.byte_len();
        size += self.user_name.byte_len();
        size += self.annotation_time.byte_len();
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.message.encode(stream)?;
        size += self.user_name.encode(stream)?;
        size += self.annotation_time.encode(stream)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let message = UAString::decode(stream)?;
        let user_name = UAString::decode(stream)?;
        let annotation_time = DateTime::decode(stream)?;
        Ok(Annotation {
            message,
            user_name,
            annotation_time,
        })
    }
}
