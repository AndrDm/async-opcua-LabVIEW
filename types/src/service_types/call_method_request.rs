// This file was autogenerated from Opc.Ua.Types.bsd.xml by tools/schema/gen_types.js
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

use encoding::*;
#[allow(unused_imports)]
use basic_types::*;
use service_types::impls::MessageInfo;
use node_ids::ObjectId;
use node_id::NodeId;
use variant::Variant;

#[derive(Debug, Clone, PartialEq)]
pub struct CallMethodRequest {
    pub object_id: NodeId,
    pub method_id: NodeId,
    pub input_arguments: Option<Vec<Variant>>,
}

impl MessageInfo for CallMethodRequest {
    fn object_id(&self) -> ObjectId {
        ObjectId::CallMethodRequest_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<CallMethodRequest> for CallMethodRequest {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.object_id.byte_len();
        size += self.method_id.byte_len();
        size += byte_len_array(&self.input_arguments);
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.object_id.encode(stream)?;
        size += self.method_id.encode(stream)?;
        size += write_array(stream, &self.input_arguments)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let object_id = NodeId::decode(stream)?;
        let method_id = NodeId::decode(stream)?;
        let input_arguments: Option<Vec<Variant>> = read_array(stream)?;
        Ok(CallMethodRequest {
            object_id,
            method_id,
            input_arguments,
        })
    }
}
