// This file was autogenerated from Opc.Ua.Types.bsd.xml by tools/schema/gen_types.js
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

use encoding::*;
#[allow(unused_imports)]
use basic_types::*;
use service_types::impls::MessageInfo;
use node_ids::ObjectId;

#[derive(Debug, Clone, PartialEq)]
pub struct XVType {
    pub x: Double,
    pub value: Float,
}

impl MessageInfo for XVType {
    fn object_id(&self) -> ObjectId {
        ObjectId::XVType_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<XVType> for XVType {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.x.byte_len();
        size += self.value.byte_len();
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.x.encode(stream)?;
        size += self.value.encode(stream)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S, decoding_limits: &DecodingLimits) -> EncodingResult<Self> {
        let x = Double::decode(stream, decoding_limits)?;
        let value = Float::decode(stream, decoding_limits)?;
        Ok(XVType {
            x,
            value,
        })
    }
}
