// This file was autogenerated from Opc.Ua.Types.bsd.xml by tools/schema/gen_types.js
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

use crate::encoding::*;
#[allow(unused_imports)]
use crate::basic_types::*;
use crate::service_types::impls::MessageInfo;
use crate::node_ids::ObjectId;
use crate::node_id::NodeId;

#[derive(Debug, Clone, PartialEq)]
pub struct ModelChangeStructureDataType {
    pub affected: NodeId,
    pub affected_type: NodeId,
    pub verb: u8,
}

impl MessageInfo for ModelChangeStructureDataType {
    fn object_id(&self) -> ObjectId {
        ObjectId::ModelChangeStructureDataType_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<ModelChangeStructureDataType> for ModelChangeStructureDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.affected.byte_len();
        size += self.affected_type.byte_len();
        size += self.verb.byte_len();
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.affected.encode(stream)?;
        size += self.affected_type.encode(stream)?;
        size += self.verb.encode(stream)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S, decoding_limits: &DecodingLimits) -> EncodingResult<Self> {
        let affected = NodeId::decode(stream, decoding_limits)?;
        let affected_type = NodeId::decode(stream, decoding_limits)?;
        let verb = u8::decode(stream, decoding_limits)?;
        Ok(ModelChangeStructureDataType {
            affected,
            affected_type,
            verb,
        })
    }
}
