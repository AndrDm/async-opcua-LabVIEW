var _ = require("lodash");
var csv = require("csv-parser");
var fs = require("fs");

var settings = require("./settings");

var status_code_csv = `${settings.schema_dir}/NodeIds.csv`;

var rs_out = fs.createWriteStream(`${settings.rs_node_ids_dir}/node_ids.rs`);

rs_out.write(`// This file was autogenerated from NodeIds.csv by tools/schema/gen_node_ids.js
// DO NOT EDIT THIS FILE

use basic_types::*;
use node_id::{NodeId, ExpandedNodeId};
use string::UAString;
`);

var node_ids = {};

function interested_in_node(node) {
    return (!node.name.endsWith("_DefaultXml") && !node.name.startsWith("OpcUa_XmlSchema_"));
}

fs.createReadStream(status_code_csv)
    .pipe(csv(['name', 'id', 'type']))
    .on('data', function (data) {
        var node = {
            name: data.name,
            id: data.id
        };
        if (_.has(node_ids, data.type)) {
            node_ids[data.type].push(node);
        }
        else {
            node_ids[data.type] = [node];
        }
    })
    .on('end', function () {
        _.each(node_ids, function (value, key) {
            rs_out.write(
                `
#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq, Copy, Clone)]
pub enum ${key}Id {
`);
            _.each(value, function (node) {
                // Skip Xml junk
                if (interested_in_node(node)) {
                    rs_out.write(`    ${node.name} = ${node.id},\n`);
                }
            });
            rs_out.write(`}\n`);

            rs_out.write(`
impl Into<NodeId> for ${key}Id {
    fn into(self) -> NodeId {
        NodeId::new(0, self as UInt32)
    }
}

impl Into<ExpandedNodeId> for ${key}Id {
    fn into(self) -> ExpandedNodeId {
        ExpandedNodeId {
            node_id: NodeId::new(0, self as UInt32),
            namespace_uri: UAString::null(),
            server_index: 0,
        }
    }
}

impl ${key}Id {
    pub fn from_u32(value: u32) -> Result<${key}Id, ()> {
        match value {
`);
            _.each(value, function (node) {
                if (interested_in_node(node)) {
                    rs_out.write(`            ${node.id} => Ok(${key}Id::${node.name}),\n`);
                }
            });

            rs_out.write(
                `            _ => Err(())
        }
    }
}
`);

        });
    });

