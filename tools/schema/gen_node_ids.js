var _ = require("lodash");
var csv = require("csv-parser");
var fs = require("fs");

var settings = require("./settings");

var status_code_csv = `${settings.schema_dir}/NodeIds.csv`;

var rs_out = fs.createWriteStream(`${settings.rs_dir}/types/generated/node_ids.rs`);

rs_out.write(`// This file was autogenerated from NodeIds.csv
// DO NOT EDIT THIS FILE

use types::*;
`);

var node_ids = { };

var csv_data = fs.createReadStream(status_code_csv)
    .pipe(csv(['name', 'id', 'type']))
    .on('data', function (data) {
        var node = {
            name: data.name,
            id: data.id
        };
        if (_.has(node_ids, data.type)) {
            node_ids[data.type].push(node);
        }
        else {
            node_ids[data.type] = [ node ];
        }
    })
    .on('end', function () {
        _.each(node_ids, function(value, key) {
             rs_out.write(
`
#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq, Copy, Clone)]
pub enum ${key}Id {
`);
            _.each(value, function (node) {
                rs_out.write(`    ${node.name} = ${node.id},\n`);
            });
            rs_out.write(`}\n`);

            rs_out.write(`
impl ${key}Id {
    pub fn as_node_id(&self) -> NodeId {
        NodeId::new_numeric(0, *self as UInt64)
    }

    pub fn from_u64(value: u64) -> Result<${key}Id, ()> {
        match value {
`);
            _.each(value, function (node) {
                rs_out.write(`            ${node.id} => Ok(${key}Id::${node.name}),\n`);
            });

            rs_out.write(
`            _ => Err(())
        }
    }
}
`);

        });
    });

