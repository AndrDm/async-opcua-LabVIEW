var _ = require("lodash");
var fs = require("fs");
var xml2js = require("xml2js");

var settings = require("./settings");

var types_xml = `${settings.schema_dir}/Opc.Ua.Types.bsd.xml`;

var rs_out = fs.createWriteStream(`${settings.rs_dir}/types/generated/types.rs`);

/// This code parses the OPC UA Binary types definitions and creates a generated types.rs file
/// Fields are converted to snake case as they are written. Code for serializing the struct is also generated

/// Any handwritten types are stripped from the output

var ignored_types =
  [
    "ExtensionObject", "DataValue", "LocalizedText", "QualifiedName", "DiagnosticInfo", "Variant", "ExpandedNodeId", "NodeId", "ByteStringNodeId",
    "GuidNodeId", "StringNodeId", "NumericNodeId", "FourByteNodeId", "TwoByteNodeId", "XmlElement", "Union"
  ];


rs_out.write(`// This file was autogenerated from Opc.Ua.Types.bsd.xml

use types::*;
use super::types::*;

`);

var parser = new xml2js.Parser();
fs.readFile(types_xml, function (err, data) {
  parser.parseString(data, function (err, result) {
    var structured_types = result["opc:TypeDictionary"]["opc:StructuredType"];
    _.each(structured_types, function (structured_type) {

      var name = structured_type["$"]["Name"];
      // if name in ignored_types, do nothing
      if (_.includes(ignored_types, name)) {
        var base_type = structured_type["$"]["BaseType"];

        // TODO documentation
        if (_.has(structured_type, "opc:Documentation")) {
          rs_out.write(`/// ${structured_type["opc:Documentation"]}\n`);
        }

        rs_out.write(`pub struct ${name} {\n`);

        _.each(structured_type["opc:Field"], function (field) {
          // Convert field name to snake case
          var field_name = _.snakeCase(field["$"]["Name"]);

          // Strip namespace off the type
          var type = field["$"]["TypeName"].split(":")[1];

          // Replace String with UAString
          if (type === "String") {
            type = "UAString";
          }

          rs_out.write(`    pub ${field_name}: ${type},\n`);
        })

        rs_out.write(`}\n\n`);
      }
    });
  });
});

