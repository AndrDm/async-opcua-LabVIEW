// This file was autogenerated from Opc.Ua.NodeSet2.Part5.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

#[allow(unused_imports)]
use opcua_types::{
    node_id::NodeId,
    data_value::DataValue,
    variant::Variant, 
    extension_object::ExtensionObject, 
    string::UAString,
    basic_types::LocalizedText,
    service_types::{
        Argument
    },
    node_ids::*
};
#[allow(unused_imports)]
use crate::address_space::types::*;

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_variable_1(address_space);
    add_variable_2(address_space);
    add_variable_3(address_space);
    add_variable_4(address_space);
    add_variable_5(address_space);
    add_variable_6(address_space);
    add_variable_7(address_space);
    add_variable_8(address_space);
    add_variable_9(address_space);
    add_variable_10(address_space);
    add_variable_11(address_space);
    add_variable_12(address_space);
    add_variable_13(address_space);
    add_variable_14(address_space);
    add_variable_15(address_space);
    add_variable_16(address_space);
    add_variable_17(address_space);
    add_variable_18(address_space);
    add_variable_19(address_space);
    add_variable_20(address_space);
    add_variable_21(address_space);
    add_variable_22(address_space);
    add_variable_23(address_space);
    add_variable_24(address_space);
    add_variable_25(address_space);
    add_variable_26(address_space);
    add_variable_27(address_space);
    add_variable_28(address_space);
    add_variable_29(address_space);
    add_variable_30(address_space);
    add_variable_31(address_space);
    add_variable_32(address_space);
    add_variable_33(address_space);
    add_variable_34(address_space);
    add_variable_35(address_space);
    add_variable_36(address_space);
    add_variable_37(address_space);
    add_variable_38(address_space);
    add_variable_39(address_space);
    add_variable_40(address_space);
    add_variable_41(address_space);
    add_variable_42(address_space);
    add_variable_43(address_space);
    add_variable_44(address_space);
    add_variable_45(address_space);
    add_variable_46(address_space);
    add_variable_47(address_space);
    add_variable_48(address_space);
    add_variable_49(address_space);
    add_variable_50(address_space);
    add_variable_51(address_space);
    add_variable_52(address_space);
    add_variable_53(address_space);
    add_variable_54(address_space);
    add_variable_55(address_space);
    add_variable_56(address_space);
    add_variable_57(address_space);
    add_variable_58(address_space);
    add_variable_59(address_space);
    add_variable_60(address_space);
    add_variable_61(address_space);
    add_variable_62(address_space);
    add_variable_63(address_space);
    add_variable_64(address_space);
    add_variable_65(address_space);
    add_variable_66(address_space);
    add_variable_67(address_space);
    add_variable_68(address_space);
    add_variable_69(address_space);
    add_variable_70(address_space);
    add_variable_71(address_space);
    add_variable_72(address_space);
    add_variable_73(address_space);
    add_variable_74(address_space);
    add_variable_75(address_space);
    add_variable_76(address_space);
    add_variable_77(address_space);
    add_variable_78(address_space);
    add_variable_79(address_space);
    add_variable_80(address_space);
    add_variable_81(address_space);
    add_variable_82(address_space);
    add_variable_83(address_space);
    add_variable_84(address_space);
    add_variable_85(address_space);
    add_variable_86(address_space);
    add_variable_87(address_space);
    add_variable_88(address_space);
    add_variable_89(address_space);
    add_variable_90(address_space);
    add_variable_91(address_space);
    add_variable_92(address_space);
    add_variable_93(address_space);
    add_variable_94(address_space);
    add_variable_95(address_space);
    add_variable_96(address_space);
    add_variable_97(address_space);
    add_variable_98(address_space);
    add_variable_99(address_space);
    add_variable_100(address_space);
}

fn add_variable_1(address_space: &mut AddressSpace) {
    // Variable
    let name = "ClientUserIdHistory";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12863);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_2(address_space: &mut AddressSpace) {
    // Variable
    let name = "AuthenticationMechanism";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12864);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_3(address_space: &mut AddressSpace) {
    // Variable
    let name = "Encoding";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12865);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_4(address_space: &mut AddressSpace) {
    // Variable
    let name = "TransportProtocol";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12866);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_5(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecurityMode";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12867);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(302u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_6(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecurityPolicyUri";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12868);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_7(address_space: &mut AddressSpace) {
    // Variable
    let name = "ClientCertificate";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12869);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_8(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionId";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2245);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_9(address_space: &mut AddressSpace) {
    // Variable
    let name = "ClientUserIdOfSession";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2246);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_10(address_space: &mut AddressSpace) {
    // Variable
    let name = "ClientUserIdHistory";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2247);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_11(address_space: &mut AddressSpace) {
    // Variable
    let name = "AuthenticationMechanism";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2248);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_12(address_space: &mut AddressSpace) {
    // Variable
    let name = "Encoding";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2249);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_13(address_space: &mut AddressSpace) {
    // Variable
    let name = "TransportProtocol";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2250);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_14(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecurityMode";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2251);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(302u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_15(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecurityPolicyUri";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2252);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_16(address_space: &mut AddressSpace) {
    // Variable
    let name = "ClientCertificate";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3058);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_17(address_space: &mut AddressSpace) {
    // Variable
    let name = "OptionSetValues";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11488);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11487), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11487), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_18(address_space: &mut AddressSpace) {
    // Variable
    let name = "BitMask";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11701);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11487), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11487), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_19(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServerArray";
    let description = "The list of server URIs used by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2254);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_20(address_space: &mut AddressSpace) {
    // Variable
    let name = "NamespaceArray";
    let description = "The list of namespace URIs used by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2255);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_21(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServerStatus";
    let description = "The current status of the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2256);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(862u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2257), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2258), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2259), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2992), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2993), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_22(address_space: &mut AddressSpace) {
    // Variable
    let name = "StartTime";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2257);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_23(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentTime";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2258);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_24(address_space: &mut AddressSpace) {
    // Variable
    let name = "State";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2259);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(852u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_25(address_space: &mut AddressSpace) {
    // Variable
    let name = "BuildInfo";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2260);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(338u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2262), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2263), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2261), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2264), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2265), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2266), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_26(address_space: &mut AddressSpace) {
    // Variable
    let name = "ProductUri";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2262);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_27(address_space: &mut AddressSpace) {
    // Variable
    let name = "ManufacturerName";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2263);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_28(address_space: &mut AddressSpace) {
    // Variable
    let name = "ProductName";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2261);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_29(address_space: &mut AddressSpace) {
    // Variable
    let name = "SoftwareVersion";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2264);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_30(address_space: &mut AddressSpace) {
    // Variable
    let name = "BuildNumber";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2265);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_31(address_space: &mut AddressSpace) {
    // Variable
    let name = "BuildDate";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2266);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_32(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecondsTillShutdown";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2992);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_33(address_space: &mut AddressSpace) {
    // Variable
    let name = "ShutdownReason";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2993);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_34(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServiceLevel";
    let description = "A value indicating the level of service the server can provide. 255 indicates the best.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2267);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_35(address_space: &mut AddressSpace) {
    // Variable
    let name = "Auditing";
    let description = "A flag indicating whether the server is currently generating audit events.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2994);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_36(address_space: &mut AddressSpace) {
    // Variable
    let name = "EstimatedReturnTime";
    let description = "Indicates the time at which the Server is expected to be available in the state RUNNING.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12885);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::DateTime, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_37(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServerProfileArray";
    let description = "A list of profiles supported by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2269);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_38(address_space: &mut AddressSpace) {
    // Variable
    let name = "LocaleIdArray";
    let description = "A list of locales supported by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2271);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(295u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_39(address_space: &mut AddressSpace) {
    // Variable
    let name = "MinSupportedSampleRate";
    let description = "The minimum sampling interval supported by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2272);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_40(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxBrowseContinuationPoints";
    let description = "The maximum number of continuation points for Browse operations per session.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2735);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_41(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxQueryContinuationPoints";
    let description = "The maximum number of continuation points for Query operations per session.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2736);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_42(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxHistoryContinuationPoints";
    let description = "The maximum number of continuation points for ReadHistory operations per session.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2737);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_43(address_space: &mut AddressSpace) {
    // Variable
    let name = "SoftwareCertificates";
    let description = "The software certificates owned by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3704);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(344u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_44(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxArrayLength";
    let description = "The maximum length for an array value supported by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11702);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_45(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxStringLength";
    let description = "The maximum length for a string value supported by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11703);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_46(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxByteStringLength";
    let description = "The maximum length for a byte string value supported by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12911);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_47(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerRead";
    let description = "The maximum number of operations in a single Read request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11705);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_48(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerHistoryReadData";
    let description = "The maximum number of operations in a single data HistoryRead request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12165);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_49(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerHistoryReadEvents";
    let description = "The maximum number of operations in a single event HistoryRead request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12166);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_50(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerWrite";
    let description = "The maximum number of operations in a single Write request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11707);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_51(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerHistoryUpdateData";
    let description = "The maximum number of operations in a single data HistoryUpdate request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12167);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_52(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerHistoryUpdateEvents";
    let description = "The maximum number of operations in a single event HistoryUpdate request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12168);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_53(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerMethodCall";
    let description = "The maximum number of operations in a single Call request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11709);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_54(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerBrowse";
    let description = "The maximum number of operations in a single Browse request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11710);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_55(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerRegisterNodes";
    let description = "The maximum number of operations in a single RegisterNodes request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11711);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_56(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
    let description = "The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11712);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_57(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNodesPerNodeManagement";
    let description = "The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11713);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_58(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxMonitoredItemsPerCall";
    let description = "The maximum number of operations in a single MonitoredItem related request.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11714);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_59(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServerDiagnosticsSummary";
    let description = "A summary of server level diagnostics.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2275);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(859u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2276), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2277), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2278), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2279), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3705), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2281), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2282), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2284), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2285), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2286), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2287), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2288), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_60(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServerViewCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2276);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_61(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentSessionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2277);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_62(address_space: &mut AddressSpace) {
    // Variable
    let name = "CumulatedSessionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2278);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_63(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecurityRejectedSessionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2279);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_64(address_space: &mut AddressSpace) {
    // Variable
    let name = "RejectedSessionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3705);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_65(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionTimeoutCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2281);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_66(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionAbortCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2282);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_67(address_space: &mut AddressSpace) {
    // Variable
    let name = "PublishingIntervalCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2284);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_68(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentSubscriptionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2285);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_69(address_space: &mut AddressSpace) {
    // Variable
    let name = "CumulatedSubscriptionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2286);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_70(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecurityRejectedRequestsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2287);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_71(address_space: &mut AddressSpace) {
    // Variable
    let name = "RejectedRequestsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2288);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_72(address_space: &mut AddressSpace) {
    // Variable
    let name = "SamplingIntervalDiagnosticsArray";
    let description = "A list of diagnostics for each sampling interval supported by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2289);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(856u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2164), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_73(address_space: &mut AddressSpace) {
    // Variable
    let name = "SubscriptionDiagnosticsArray";
    let description = "A list of diagnostics for each active subscription.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2290);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(874u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_74(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionDiagnosticsArray";
    let description = "A list of diagnostics for each active session.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3707);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(865u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3706), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 3706), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_75(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionSecurityDiagnosticsArray";
    let description = "A list of security related diagnostics for each active session.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3708);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(868u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3706), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 3706), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_76(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnabledFlag";
    let description = "If TRUE the diagnostics collection is enabled.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2294);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_77(address_space: &mut AddressSpace) {
    // Variable
    let name = "RedundancySupport";
    let description = "Indicates what style of redundancy is supported by the server.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3709);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(851u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_78(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentServerId";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11312);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_79(address_space: &mut AddressSpace) {
    // Variable
    let name = "RedundantServerArray";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11313);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(853u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_80(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServerUriArray";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11314);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_81(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServerNetworkGroups";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 14415);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(11944u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_82(address_space: &mut AddressSpace) {
    // Variable
    let name = "NamespaceUri";
    let description = "The URI of the namespace.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 15183);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_83(address_space: &mut AddressSpace) {
    // Variable
    let name = "NamespaceVersion";
    let description = "The human readable string representing version of the namespace.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 15184);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_84(address_space: &mut AddressSpace) {
    // Variable
    let name = "NamespacePublicationDate";
    let description = "The publication date for the namespace.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 15185);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::DateTime, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_85(address_space: &mut AddressSpace) {
    // Variable
    let name = "IsNamespaceSubset";
    let description = "If TRUE then the server only supports a subset of the namespace.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 15186);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_86(address_space: &mut AddressSpace) {
    // Variable
    let name = "StaticNodeIdTypes";
    let description = "A list of IdTypes for nodes which are the same in every server that exposes them.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 15187);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(256u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_87(address_space: &mut AddressSpace) {
    // Variable
    let name = "StaticNumericNodeIdRange";
    let description = "A list of ranges for numeric node ids which are the same in every server that exposes them.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 15188);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(291u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_88(address_space: &mut AddressSpace) {
    // Variable
    let name = "StaticStringNodeIdPattern";
    let description = "A regular expression which matches string node ids are the same in every server that exposes them.";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 15189);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_89(address_space: &mut AddressSpace) {
    // Variable
    let name = "InputArguments";
    let description = "";
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let node_id = NodeId::new(0, 11493);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11492), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11492), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_90(address_space: &mut AddressSpace) {
    // Variable
    let name = "OutputArguments";
    let description = "";
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ServerHandles"),
                data_type: NodeId::new(0, 7),
                value_rank: 1,
                array_dimensions: Some(vec![0]),
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ClientHandles"),
                data_type: NodeId::new(0, 7),
                value_rank: 1,
                array_dimensions: Some(vec![0]),
                description: LocalizedText::new("", ""),
            })),
    ]);
    let node_id = NodeId::new(0, 11494);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11492), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11492), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_91(address_space: &mut AddressSpace) {
    // Variable
    let name = "InputArguments";
    let description = "";
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let node_id = NodeId::new(0, 12874);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12873), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 12873), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_92(address_space: &mut AddressSpace) {
    // Variable
    let name = "InputArguments";
    let description = "";
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("LifetimeInHours"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let node_id = NodeId::new(0, 12750);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12749), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 12749), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_93(address_space: &mut AddressSpace) {
    // Variable
    let name = "OutputArguments";
    let description = "";
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("RevisedLifetimeInHours"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let node_id = NodeId::new(0, 12751);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12749), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 12749), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_94(address_space: &mut AddressSpace) {
    // Variable
    let name = "InputArguments";
    let description = "";
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("State"),
                data_type: NodeId::new(0, 852),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("EstimatedReturnTime"),
                data_type: NodeId::new(0, 13),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SecondsTillShutdown"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Reason"),
                data_type: NodeId::new(0, 21),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Restart"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let node_id = NodeId::new(0, 12887);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12886), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 12886), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_95(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentState";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2769);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2299), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3720), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2299), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_96(address_space: &mut AddressSpace) {
    // Variable
    let name = "Id";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3720);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2769), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2769), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_97(address_space: &mut AddressSpace) {
    // Variable
    let name = "LastTransition";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2770);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2299), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3724), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2299), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_98(address_space: &mut AddressSpace) {
    // Variable
    let name = "Id";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3724);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2770), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2770), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_99(address_space: &mut AddressSpace) {
    // Variable
    let name = "Id";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2756);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2755), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_100(address_space: &mut AddressSpace) {
    // Variable
    let name = "Name";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2757);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::QualifiedName, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2755), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

