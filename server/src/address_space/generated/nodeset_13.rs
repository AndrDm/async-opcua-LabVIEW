// This file was autogenerated from Opc.Ua.NodeSet2.Part13.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

#[allow(unused_imports)]
use opcua_types::{
    node_id::NodeId,
    data_value::DataValue,
    variant::Variant, 
    extension_object::ExtensionObject, 
    string::UAString,
    basic_types::LocalizedText,
    service_types::{
        Argument
    },
    node_ids::*
};
#[allow(unused_imports)]
use crate::address_space::types::*;

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_object_1(address_space);
    add_object_2(address_space);
    add_object_3(address_space);
    add_object_4(address_space);
    add_object_5(address_space);
    add_object_6(address_space);
    add_object_7(address_space);
    add_object_8(address_space);
    add_object_9(address_space);
    add_object_10(address_space);
    add_object_11(address_space);
    add_object_12(address_space);
    add_object_13(address_space);
    add_object_14(address_space);
    add_object_15(address_space);
    add_object_16(address_space);
    add_object_17(address_space);
    add_object_18(address_space);
    add_object_19(address_space);
    add_object_20(address_space);
    add_object_21(address_space);
    add_object_22(address_space);
    add_object_23(address_space);
    add_object_24(address_space);
    add_object_25(address_space);
    add_object_26(address_space);
    add_object_27(address_space);
    add_object_28(address_space);
    add_object_29(address_space);
    add_object_30(address_space);
    add_object_31(address_space);
    add_object_32(address_space);
    add_object_33(address_space);
    add_object_34(address_space);
    add_object_35(address_space);
    add_object_36(address_space);
    add_object_37(address_space);
    add_objecttype_38(address_space);
    add_variable_39(address_space);
    add_variable_40(address_space);
    add_variable_41(address_space);
    add_variable_42(address_space);
}

fn add_object_1(address_space: &mut AddressSpace) {
    // Object
    let name = "Interpolative";
    let description = "At the beginning of each interval, retrieve the calculated value from the data points on either side of the requested timestamp.";
    let node_id = NodeId::new(0, 2341);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_2(address_space: &mut AddressSpace) {
    // Object
    let name = "Average";
    let description = "Retrieve the average value of the data over the interval.";
    let node_id = NodeId::new(0, 2342);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_3(address_space: &mut AddressSpace) {
    // Object
    let name = "TimeAverage";
    let description = "Retrieve the time weighted average data over the interval using Interpolated Bounding Values.";
    let node_id = NodeId::new(0, 2343);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_4(address_space: &mut AddressSpace) {
    // Object
    let name = "TimeAverage2";
    let description = "Retrieve the time weighted average data over the interval using Simple Bounding Values.";
    let node_id = NodeId::new(0, 11285);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_5(address_space: &mut AddressSpace) {
    // Object
    let name = "Total";
    let description = "Retrieve the total (time integral) of the data over the interval using Interpolated Bounding Values.";
    let node_id = NodeId::new(0, 2344);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_6(address_space: &mut AddressSpace) {
    // Object
    let name = "Total2";
    let description = "Retrieve the total (time integral) of the data over the interval using Simple Bounding Values.";
    let node_id = NodeId::new(0, 11304);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_7(address_space: &mut AddressSpace) {
    // Object
    let name = "Minimum";
    let description = "Retrieve the minimum raw value in the interval with the timestamp of the start of the interval.";
    let node_id = NodeId::new(0, 2346);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_8(address_space: &mut AddressSpace) {
    // Object
    let name = "Maximum";
    let description = "Retrieve the maximum raw value in the interval with the timestamp of the start of the interval.";
    let node_id = NodeId::new(0, 2347);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_9(address_space: &mut AddressSpace) {
    // Object
    let name = "MinimumActualTime";
    let description = "Retrieve the minimum value in the interval and the Timestamp of the minimum value.";
    let node_id = NodeId::new(0, 2348);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_10(address_space: &mut AddressSpace) {
    // Object
    let name = "MaximumActualTime";
    let description = "Retrieve the maximum value in the interval and the Timestamp of the maximum value.";
    let node_id = NodeId::new(0, 2349);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_11(address_space: &mut AddressSpace) {
    // Object
    let name = "Range";
    let description = "Retrieve the difference between the minimum and maximum Value over the interval.";
    let node_id = NodeId::new(0, 2350);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_12(address_space: &mut AddressSpace) {
    // Object
    let name = "Minimum2";
    let description = "Retrieve the minimum value in the interval including the Simple Bounding Values.";
    let node_id = NodeId::new(0, 11286);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_13(address_space: &mut AddressSpace) {
    // Object
    let name = "Maximum2";
    let description = "Retrieve the maximum value in the interval including the Simple Bounding Values.";
    let node_id = NodeId::new(0, 11287);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_14(address_space: &mut AddressSpace) {
    // Object
    let name = "MinimumActualTime2";
    let description = "Retrieve the minimum value with the actual timestamp including the Simple Bounding Values.";
    let node_id = NodeId::new(0, 11305);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_15(address_space: &mut AddressSpace) {
    // Object
    let name = "MaximumActualTime2";
    let description = "Retrieve the maximum value with the actual timestamp including the Simple Bounding Values.";
    let node_id = NodeId::new(0, 11306);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_16(address_space: &mut AddressSpace) {
    // Object
    let name = "Range2";
    let description = "Retrieve the difference between the Minimum2 and Maximum2 value over the interval.";
    let node_id = NodeId::new(0, 11288);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_17(address_space: &mut AddressSpace) {
    // Object
    let name = "AnnotationCount";
    let description = "Retrieve the number of Annotations in the interval.";
    let node_id = NodeId::new(0, 2351);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_18(address_space: &mut AddressSpace) {
    // Object
    let name = "Count";
    let description = "Retrieve the number of raw values over the interval.";
    let node_id = NodeId::new(0, 2352);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_19(address_space: &mut AddressSpace) {
    // Object
    let name = "DurationInStateZero";
    let description = "Retrieve the time a Boolean or numeric was in a zero state using Simple Bounding Values.";
    let node_id = NodeId::new(0, 11307);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_20(address_space: &mut AddressSpace) {
    // Object
    let name = "DurationInStateNonZero";
    let description = "Retrieve the time a Boolean or numeric was in a non-zero state using Simple Bounding Values.";
    let node_id = NodeId::new(0, 11308);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_21(address_space: &mut AddressSpace) {
    // Object
    let name = "NumberOfTransitions";
    let description = "Retrieve the number of changes between zero and non-zero that a Boolean or Numeric value experienced in the interval.";
    let node_id = NodeId::new(0, 2355);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_22(address_space: &mut AddressSpace) {
    // Object
    let name = "Start";
    let description = "Retrieve the value at the beginning of the interval using Interpolated Bounding Values.";
    let node_id = NodeId::new(0, 2357);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_23(address_space: &mut AddressSpace) {
    // Object
    let name = "End";
    let description = "Retrieve the value at the end of the interval using Interpolated Bounding Values.";
    let node_id = NodeId::new(0, 2358);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_24(address_space: &mut AddressSpace) {
    // Object
    let name = "Delta";
    let description = "Retrieve the difference between the Start and End value in the interval.";
    let node_id = NodeId::new(0, 2359);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_25(address_space: &mut AddressSpace) {
    // Object
    let name = "StartBound";
    let description = "Retrieve the value at the beginning of the interval using Simple Bounding Values.";
    let node_id = NodeId::new(0, 11505);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_26(address_space: &mut AddressSpace) {
    // Object
    let name = "EndBound";
    let description = "Retrieve the value at the end of the interval using Simple Bounding Values.";
    let node_id = NodeId::new(0, 11506);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_27(address_space: &mut AddressSpace) {
    // Object
    let name = "DeltaBounds";
    let description = "Retrieve the difference between the StartBound and EndBound value in the interval.";
    let node_id = NodeId::new(0, 11507);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_28(address_space: &mut AddressSpace) {
    // Object
    let name = "DurationGood";
    let description = "Retrieve the total duration of time in the interval during which the data is good.";
    let node_id = NodeId::new(0, 2360);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_29(address_space: &mut AddressSpace) {
    // Object
    let name = "DurationBad";
    let description = "Retrieve the total duration of time in the interval during which the data is bad.";
    let node_id = NodeId::new(0, 2361);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_30(address_space: &mut AddressSpace) {
    // Object
    let name = "PercentGood";
    let description = "Retrieve the percent of data (0 to 100) in the interval which has a good StatusCode.";
    let node_id = NodeId::new(0, 2362);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_31(address_space: &mut AddressSpace) {
    // Object
    let name = "PercentBad";
    let description = "Retrieve the percent of data (0 to 100) in the interval which has a bad StatusCode.";
    let node_id = NodeId::new(0, 2363);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_32(address_space: &mut AddressSpace) {
    // Object
    let name = "WorstQuality";
    let description = "Retrieve the worst StatusCode of data in the interval.";
    let node_id = NodeId::new(0, 2364);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_33(address_space: &mut AddressSpace) {
    // Object
    let name = "WorstQuality2";
    let description = "Retrieve the worst StatusCode of data in the interval including the Simple Bounding Values.";
    let node_id = NodeId::new(0, 11292);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_34(address_space: &mut AddressSpace) {
    // Object
    let name = "StandardDeviationSample";
    let description = "Retrieve the standard deviation for the interval for a sample of the population (n-1).";
    let node_id = NodeId::new(0, 11426);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_35(address_space: &mut AddressSpace) {
    // Object
    let name = "StandardDeviationPopulation";
    let description = "Retrieve the standard deviation for the interval for a complete population (n) which includes Simple Bounding Values.";
    let node_id = NodeId::new(0, 11427);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_36(address_space: &mut AddressSpace) {
    // Object
    let name = "VarianceSample";
    let description = "Retrieve the variance for the interval as calculated by the StandardDeviationSample.";
    let node_id = NodeId::new(0, 11428);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_37(address_space: &mut AddressSpace) {
    // Object
    let name = "VariancePopulation";
    let description = "Retrieve the variance for the interval as calculated by the StandardDeviationPopulation which includes Simple Bounding Values.";
    let node_id = NodeId::new(0, 11429);
    let node = Object::new(&node_id, name, name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2340), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_objecttype_38(address_space: &mut AddressSpace) {
    // ObjectType
    let name = "AggregateConfigurationType";
    let description = "";
    let node_id = NodeId::new(0, 11187);
    let node = ObjectType::new(&node_id, name, name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11188), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11189), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11190), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11191), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_39(address_space: &mut AddressSpace) {
    // Variable
    let name = "TreatUncertainAsBad";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11188);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11187), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11187), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_40(address_space: &mut AddressSpace) {
    // Variable
    let name = "PercentDataBad";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11189);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11187), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11187), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_41(address_space: &mut AddressSpace) {
    // Variable
    let name = "PercentDataGood";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11190);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11187), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11187), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_42(address_space: &mut AddressSpace) {
    // Variable
    let name = "UseSlopedExtrapolation";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11191);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11187), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11187), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

