// This file was autogenerated from Opc.Ua.NodeSet2.Part5.xml
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

#[allow(unused_imports)]
use opcua_types::*;
#[allow(unused_imports)]
use address_space::types::*;

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    {
        // Object
        let browse_name = "Mandatory";
        let display_name = "Mandatory";
        let description = "Specifies that an instance with the attributes and references of the instance declaration must appear when a type is instantiated.";
        let node_id = NodeId::new(0, 78);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 112), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Optional";
        let display_name = "Optional";
        let description = "Specifies that an instance with the attributes and references of the instance declaration may appear when a type is instantiated.";
        let node_id = NodeId::new(0, 80);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 113), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "ExposesItsArray";
        let display_name = "ExposesItsArray";
        let description = "Specifies that an instance appears for each element of the containing array variable.";
        let node_id = NodeId::new(0, 83);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 114), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "MandatoryShared";
        let display_name = "MandatoryShared";
        let description = "Specifies that a reference to a shared instance must appear in when a type is instantiated.";
        let node_id = NodeId::new(0, 79);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 116), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "OptionalPlaceholder";
        let display_name = "OptionalPlaceholder";
        let description = "Specifies that zero or more instances with the attributes and references of the instance declaration may appear when a type is instantiated.";
        let node_id = NodeId::new(0, 11508);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11509), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "MandatoryPlaceholder";
        let display_name = "MandatoryPlaceholder";
        let description = "Specifies that one or more instances with the attributes and references of the instance declaration must appear when a type is instantiated.";
        let node_id = NodeId::new(0, 11510);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11511), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Root";
        let display_name = "Root";
        let description = "The root of the server address space.";
        let node_id = NodeId::new(0, 84);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Objects";
        let display_name = "Objects";
        let description = "The browse entry point when looking for objects in the server address space.";
        let node_id = NodeId::new(0, 85);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 84), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Types";
        let display_name = "Types";
        let description = "The browse entry point when looking for types in the server address space.";
        let node_id = NodeId::new(0, 86);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 84), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Views";
        let display_name = "Views";
        let description = "The browse entry point when looking for views in the server address space.";
        let node_id = NodeId::new(0, 87);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 84), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "ObjectTypes";
        let display_name = "ObjectTypes";
        let description = "The browse entry point when looking for object types in the server address space.";
        let node_id = NodeId::new(0, 88);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 86), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 58), ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "VariableTypes";
        let display_name = "VariableTypes";
        let description = "The browse entry point when looking for variable types in the server address space.";
        let node_id = NodeId::new(0, 89);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 86), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 62), ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "DataTypes";
        let display_name = "DataTypes";
        let description = "The browse entry point when looking for data types in the server address space.";
        let node_id = NodeId::new(0, 90);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 86), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 24), ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "ReferenceTypes";
        let display_name = "ReferenceTypes";
        let description = "The browse entry point when looking for reference types in the server address space.";
        let node_id = NodeId::new(0, 91);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 86), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 31), ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "XML Schema";
        let display_name = "XML Schema";
        let description = "A type system which uses XML schema to describe the encoding of data types.";
        let node_id = NodeId::new(0, 92);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 90), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 75), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "OPC Binary";
        let display_name = "OPC Binary";
        let description = "A type system which uses OPC binary schema to describe the encoding of data types.";
        let node_id = NodeId::new(0, 93);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 90), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 75), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "ServerCapabilities";
        let display_name = "ServerCapabilities";
        let description = "Describes capabilities supported by the server.";
        let node_id = NodeId::new(0, 2009);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3086), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3087), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3088), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3089), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3090), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3091), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3092), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3093), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3094), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2013), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Object
        let browse_name = "ModellingRules";
        let display_name = "ModellingRules";
        let description = "A folder for the modelling rules supported by the server.";
        let node_id = NodeId::new(0, 3093);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Object
        let browse_name = "AggregateFunctions";
        let display_name = "AggregateFunctions";
        let description = "A folder for the real time aggregates supported by the server.";
        let node_id = NodeId::new(0, 3094);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Object
        let browse_name = "ServerDiagnostics";
        let display_name = "ServerDiagnostics";
        let description = "Reports diagnostics about the server.";
        let node_id = NodeId::new(0, 2010);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3095), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3110), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3111), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3114), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2020), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Object
        let browse_name = "SessionsDiagnosticsSummary";
        let display_name = "SessionsDiagnosticsSummary";
        let description = "A summary of session level diagnostics.";
        let node_id = NodeId::new(0, 3111);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3112), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3113), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2026), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2010), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2010), &node_id);
    }
    {
        // Object
        let browse_name = "VendorServerInfo";
        let display_name = "VendorServerInfo";
        let description = "Server information provided by the vendor.";
        let node_id = NodeId::new(0, 2011);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2033), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Object
        let browse_name = "ServerRedundancy";
        let display_name = "ServerRedundancy";
        let description = "Describes the redundancy capabilities of the server.";
        let node_id = NodeId::new(0, 2012);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3115), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2034), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Object
        let browse_name = "Namespaces";
        let display_name = "Namespaces";
        let description = "Describes the namespaces supported by the server.";
        let node_id = NodeId::new(0, 11527);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11645), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Object
        let browse_name = "OperationLimits";
        let display_name = "OperationLimits";
        let description = "Defines the limits supported by the server for different operations.";
        let node_id = NodeId::new(0, 11551);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11564), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Object
        let browse_name = "ModellingRules";
        let display_name = "ModellingRules";
        let description = "A folder for the modelling rules supported by the server.";
        let node_id = NodeId::new(0, 2019);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Object
        let browse_name = "AggregateFunctions";
        let display_name = "AggregateFunctions";
        let description = "A folder for the real time aggregates supported by the server.";
        let node_id = NodeId::new(0, 2754);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Object
        let browse_name = "SessionsDiagnosticsSummary";
        let display_name = "SessionsDiagnosticsSummary";
        let description = "A summary of session level diagnostics.";
        let node_id = NodeId::new(0, 2744);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3129), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3130), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2026), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2020), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2020), &node_id);
    }
    {
        // Object
        let browse_name = "<ClientName>";
        let display_name = "<ClientName>";
        let description = "";
        let node_id = NodeId::new(0, 12097);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12098), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12142), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12152), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2029), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2026), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2026), &node_id);
    }
    {
        // Object
        let browse_name = "<FileDirectoryName>";
        let display_name = "<FileDirectoryName>";
        let description = "";
        let node_id = NodeId::new(0, 13354);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13355), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13358), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13361), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13363), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13353), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13353), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13353), &node_id);
    }
    {
        // Object
        let browse_name = "<FileName>";
        let display_name = "<FileName>";
        let description = "";
        let node_id = NodeId::new(0, 13366);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13367), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13368), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13369), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13370), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13372), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13375), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13377), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13380), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13382), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13385), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11575), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13353), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13353), &node_id);
    }
    {
        // Object
        let browse_name = "NamespaceFile";
        let display_name = "NamespaceFile";
        let description = "A file containing the nodes of the namespace.";
        let node_id = NodeId::new(0, 11624);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11625), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12690), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12691), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11628), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11629), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11632), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11634), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11637), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11639), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11642), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11595), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11616), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11616), &node_id);
    }
    {
        // Object
        let browse_name = "<NamespaceIdentifier>";
        let display_name = "<NamespaceIdentifier>";
        let description = "";
        let node_id = NodeId::new(0, 11646);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11647), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11648), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11649), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11650), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11651), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11652), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11653), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11616), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11645), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11645), &node_id);
    }
    {
        // Object
        let browse_name = "AddressSpaceFile";
        let display_name = "AddressSpaceFile";
        let description = "A file containing the nodes of the namespace.";
        let node_id = NodeId::new(0, 11675);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11676), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12694), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12695), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11679), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11680), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11683), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11685), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11688), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11690), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11693), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11595), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11645), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11645), &node_id);
    }
    {
        // Object
        let browse_name = "EventTypes";
        let display_name = "EventTypes";
        let description = "";
        let node_id = NodeId::new(0, 3048);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 86), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2041), ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Server";
        let display_name = "Server";
        let description = "";
        let node_id = NodeId::new(0, 2253);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2254), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2255), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2256), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2267), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2994), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12885), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2268), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2274), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2295), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2296), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11715), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11492), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12873), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12749), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12886), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 85), &node_id, ReferenceTypeId::Organizes);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2004), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "ServerCapabilities";
        let display_name = "ServerCapabilities";
        let description = "Describes capabilities supported by the server.";
        let node_id = NodeId::new(0, 2268);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2269), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2271), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2272), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2735), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2736), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2737), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3704), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11702), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11703), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12911), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11704), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2996), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2997), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2013), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Object
        let browse_name = "OperationLimits";
        let display_name = "OperationLimits";
        let description = "Defines the limits supported by the server for different operations.";
        let node_id = NodeId::new(0, 11704);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11705), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12165), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12166), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11707), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12167), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12168), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11709), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11710), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11711), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11712), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11713), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11714), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11564), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Object
        let browse_name = "ModellingRules";
        let display_name = "ModellingRules";
        let description = "A folder for the modelling rules supported by the server.";
        let node_id = NodeId::new(0, 2996);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Object
        let browse_name = "AggregateFunctions";
        let display_name = "AggregateFunctions";
        let description = "A folder for the real time aggregates supported by the server.";
        let node_id = NodeId::new(0, 2997);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Object
        let browse_name = "ServerDiagnostics";
        let display_name = "ServerDiagnostics";
        let description = "Reports diagnostics about the server.";
        let node_id = NodeId::new(0, 2274);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2275), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2289), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2290), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3706), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2294), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2020), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Object
        let browse_name = "SessionsDiagnosticsSummary";
        let display_name = "SessionsDiagnosticsSummary";
        let description = "A summary of session level diagnostics.";
        let node_id = NodeId::new(0, 3706);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3707), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3708), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2026), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2274), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2274), &node_id);
    }
    {
        // Object
        let browse_name = "VendorServerInfo";
        let display_name = "VendorServerInfo";
        let description = "Server information provided by the vendor.";
        let node_id = NodeId::new(0, 2295);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2033), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Object
        let browse_name = "ServerRedundancy";
        let display_name = "ServerRedundancy";
        let description = "Describes the redundancy capabilities of the server.";
        let node_id = NodeId::new(0, 2296);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3709), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11312), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11313), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11314), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 14415), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2034), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Object
        let browse_name = "Namespaces";
        let display_name = "Namespaces";
        let description = "Describes the namespaces supported by the server.";
        let node_id = NodeId::new(0, 11715);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 15182), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11645), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Object
        let browse_name = "0:http://opcfoundation.org/UA/";
        let display_name = "http://opcfoundation.org/UA/";
        let description = "";
        let node_id = NodeId::new(0, 15182);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 15183), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 15184), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 15185), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 15186), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 15187), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 15188), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 15189), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11616), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11715), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11715), &node_id);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 339);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 338), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8327), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 854);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 853), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8843), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 11949);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 11943), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11951), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 11950);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 11944), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11954), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 857);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 856), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8846), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 860);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 859), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8849), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 863);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 862), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8852), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 866);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 865), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8855), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 869);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 868), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8858), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 872);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 871), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8861), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 300);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 299), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8294), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 875);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 874), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8864), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 878);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 877), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8867), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let description = "";
        let node_id = NodeId::new(0, 898);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 897), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8870), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 340);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 338), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7692), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 855);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 853), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8208), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 11957);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 11943), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11959), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 11958);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 11944), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11962), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 858);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 856), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8211), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 861);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 859), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8214), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 864);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 862), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8217), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 867);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 865), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8220), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 870);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 868), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8223), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 873);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 871), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8226), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 301);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 299), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7659), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 876);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 874), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8229), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 879);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 877), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8232), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let description = "";
        let node_id = NodeId::new(0, 899);
        let node = Object::new(&node_id, browse_name, display_name, description);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 897), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8235), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // ObjectType
        let browse_name = "BaseObjectType";
        let display_name = "BaseObjectType";
        let description = "The base type for all object nodes.";
        let node_id = NodeId::new(0, 58);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
    }
    {
        // ObjectType
        let browse_name = "FolderType";
        let display_name = "FolderType";
        let description = "The type for objects that organize other nodes.";
        let node_id = NodeId::new(0, 61);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "DataTypeSystemType";
        let display_name = "DataTypeSystemType";
        let description = "";
        let node_id = NodeId::new(0, 75);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "DataTypeEncodingType";
        let display_name = "DataTypeEncodingType";
        let description = "";
        let node_id = NodeId::new(0, 76);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "ModellingRuleType";
        let display_name = "ModellingRuleType";
        let description = "The type for an object that describes how an instance declaration is used when a type is instantiated.";
        let node_id = NodeId::new(0, 77);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 111), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "ServerType";
        let display_name = "ServerType";
        let description = "Specifies the current status and capabilities of the server.";
        let node_id = NodeId::new(0, 2004);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2005), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2006), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2007), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2008), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2742), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12882), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2009), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2010), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2011), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2012), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11527), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11489), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12871), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12746), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12883), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "ServerCapabilitiesType";
        let display_name = "ServerCapabilitiesType";
        let description = "Describes the capabilities supported by the server.";
        let node_id = NodeId::new(0, 2013);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2014), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2016), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2017), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2732), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2733), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2734), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3049), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11549), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11550), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12910), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11551), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2019), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2754), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11562), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "ServerDiagnosticsType";
        let display_name = "ServerDiagnosticsType";
        let description = "The diagnostics information for a server.";
        let node_id = NodeId::new(0, 2020);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2021), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2022), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2023), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2744), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2025), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "SessionsDiagnosticsSummaryType";
        let display_name = "SessionsDiagnosticsSummaryType";
        let description = "Provides a summary of session level diagnostics.";
        let node_id = NodeId::new(0, 2026);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2027), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2028), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12097), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "SessionDiagnosticsObjectType";
        let display_name = "SessionDiagnosticsObjectType";
        let description = "A container for session level diagnostics information.";
        let node_id = NodeId::new(0, 2029);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2030), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2031), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2032), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "VendorServerInfoType";
        let display_name = "VendorServerInfoType";
        let description = "A base type for vendor specific server information.";
        let node_id = NodeId::new(0, 2033);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "ServerRedundancyType";
        let display_name = "ServerRedundancyType";
        let description = "A base type for an object that describe how a server supports redundancy.";
        let node_id = NodeId::new(0, 2034);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2035), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "TransparentRedundancyType";
        let display_name = "TransparentRedundancyType";
        let description = "Identifies the capabilties of server that supports transparent redundancy.";
        let node_id = NodeId::new(0, 2036);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2037), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2038), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2034), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "NonTransparentRedundancyType";
        let display_name = "NonTransparentRedundancyType";
        let description = "Identifies the capabilties of server that supports non-transparent redundancy.";
        let node_id = NodeId::new(0, 2039);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2040), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2034), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "NonTransparentNetworkRedundancyType";
        let display_name = "NonTransparentNetworkRedundancyType";
        let description = "";
        let node_id = NodeId::new(0, 11945);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11948), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2039), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "OperationLimitsType";
        let display_name = "OperationLimitsType";
        let description = "Identifies the operation limits imposed by the server.";
        let node_id = NodeId::new(0, 11564);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11565), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12161), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12162), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11567), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12163), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12164), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11569), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11570), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11571), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11572), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11573), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11574), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 61), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "FileType";
        let display_name = "FileType";
        let description = "An object that represents a file that can be accessed via the server.";
        let node_id = NodeId::new(0, 11575);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11576), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12686), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12687), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11579), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13341), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11580), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11583), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11585), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11588), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11590), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11593), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "FileDirectoryType";
        let display_name = "FileDirectoryType";
        let description = "";
        let node_id = NodeId::new(0, 13353);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13354), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13366), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13387), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13390), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13393), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13395), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 61), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AddressSpaceFileType";
        let display_name = "AddressSpaceFileType";
        let description = "A file used to store a namespace exported from the server.";
        let node_id = NodeId::new(0, 11595);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11615), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "NamespaceMetadataType";
        let display_name = "NamespaceMetadataType";
        let description = "Provides the metadata for a namespace used by the server.";
        let node_id = NodeId::new(0, 11616);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11617), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11618), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11619), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11620), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11621), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11622), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11623), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11624), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "NamespacesType";
        let display_name = "NamespacesType";
        let description = "A container for the namespace metadata provided by the server.";
        let node_id = NodeId::new(0, 11645);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11646), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11675), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "BaseEventType";
        let display_name = "BaseEventType";
        let description = "The base type for all events.";
        let node_id = NodeId::new(0, 2041);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2042), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2043), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2044), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2045), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2046), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2047), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3190), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2050), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2051), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditEventType";
        let display_name = "AuditEventType";
        let description = "A base type for events used to track client initiated changes to the server state.";
        let node_id = NodeId::new(0, 2052);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2053), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2054), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2055), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2056), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2057), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditSecurityEventType";
        let display_name = "AuditSecurityEventType";
        let description = "A base type for events used to track security related changes.";
        let node_id = NodeId::new(0, 2058);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditChannelEventType";
        let display_name = "AuditChannelEventType";
        let description = "A base type for events used to track related changes to a secure channel.";
        let node_id = NodeId::new(0, 2059);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2745), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2058), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditOpenSecureChannelEventType";
        let display_name = "AuditOpenSecureChannelEventType";
        let description = "An event that is raised when a secure channel is opened.";
        let node_id = NodeId::new(0, 2060);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2061), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2746), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2062), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2063), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2065), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2066), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2059), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditSessionEventType";
        let display_name = "AuditSessionEventType";
        let description = "A base type for events used to track related changes to a session.";
        let node_id = NodeId::new(0, 2069);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2070), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2058), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCreateSessionEventType";
        let display_name = "AuditCreateSessionEventType";
        let description = "An event that is raised when a session is created.";
        let node_id = NodeId::new(0, 2071);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2072), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2073), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2747), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2074), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2069), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditUrlMismatchEventType";
        let display_name = "AuditUrlMismatchEventType";
        let description = "";
        let node_id = NodeId::new(0, 2748);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2749), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2071), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditActivateSessionEventType";
        let display_name = "AuditActivateSessionEventType";
        let description = "";
        let node_id = NodeId::new(0, 2075);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2076), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2077), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11485), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2069), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCancelEventType";
        let display_name = "AuditCancelEventType";
        let description = "";
        let node_id = NodeId::new(0, 2078);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2079), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2069), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCertificateEventType";
        let display_name = "AuditCertificateEventType";
        let description = "";
        let node_id = NodeId::new(0, 2080);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2081), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2058), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCertificateDataMismatchEventType";
        let display_name = "AuditCertificateDataMismatchEventType";
        let description = "";
        let node_id = NodeId::new(0, 2082);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2083), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2084), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2080), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCertificateExpiredEventType";
        let display_name = "AuditCertificateExpiredEventType";
        let description = "";
        let node_id = NodeId::new(0, 2085);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2080), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCertificateInvalidEventType";
        let display_name = "AuditCertificateInvalidEventType";
        let description = "";
        let node_id = NodeId::new(0, 2086);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2080), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCertificateUntrustedEventType";
        let display_name = "AuditCertificateUntrustedEventType";
        let description = "";
        let node_id = NodeId::new(0, 2087);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2080), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCertificateRevokedEventType";
        let display_name = "AuditCertificateRevokedEventType";
        let description = "";
        let node_id = NodeId::new(0, 2088);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2080), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditCertificateMismatchEventType";
        let display_name = "AuditCertificateMismatchEventType";
        let description = "";
        let node_id = NodeId::new(0, 2089);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2080), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditNodeManagementEventType";
        let display_name = "AuditNodeManagementEventType";
        let description = "";
        let node_id = NodeId::new(0, 2090);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditAddNodesEventType";
        let display_name = "AuditAddNodesEventType";
        let description = "";
        let node_id = NodeId::new(0, 2091);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2092), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2090), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditDeleteNodesEventType";
        let display_name = "AuditDeleteNodesEventType";
        let description = "";
        let node_id = NodeId::new(0, 2093);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2094), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2090), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditAddReferencesEventType";
        let display_name = "AuditAddReferencesEventType";
        let description = "";
        let node_id = NodeId::new(0, 2095);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2096), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2090), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditDeleteReferencesEventType";
        let display_name = "AuditDeleteReferencesEventType";
        let description = "";
        let node_id = NodeId::new(0, 2097);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2098), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2090), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditUpdateEventType";
        let display_name = "AuditUpdateEventType";
        let description = "";
        let node_id = NodeId::new(0, 2099);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditWriteUpdateEventType";
        let display_name = "AuditWriteUpdateEventType";
        let description = "";
        let node_id = NodeId::new(0, 2100);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2750), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2101), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2102), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2103), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2099), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditHistoryUpdateEventType";
        let display_name = "AuditHistoryUpdateEventType";
        let description = "";
        let node_id = NodeId::new(0, 2104);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2751), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2099), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditUpdateMethodEventType";
        let display_name = "AuditUpdateMethodEventType";
        let description = "";
        let node_id = NodeId::new(0, 2127);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2128), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2129), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "SystemEventType";
        let display_name = "SystemEventType";
        let description = "";
        let node_id = NodeId::new(0, 2130);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "DeviceFailureEventType";
        let display_name = "DeviceFailureEventType";
        let description = "";
        let node_id = NodeId::new(0, 2131);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2130), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "SystemStatusChangeEventType";
        let display_name = "SystemStatusChangeEventType";
        let description = "";
        let node_id = NodeId::new(0, 11446);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11696), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2130), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "BaseModelChangeEventType";
        let display_name = "BaseModelChangeEventType";
        let description = "";
        let node_id = NodeId::new(0, 2132);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "GeneralModelChangeEventType";
        let display_name = "GeneralModelChangeEventType";
        let description = "";
        let node_id = NodeId::new(0, 2133);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2134), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2132), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "SemanticChangeEventType";
        let display_name = "SemanticChangeEventType";
        let description = "";
        let node_id = NodeId::new(0, 2738);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2739), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2132), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "EventQueueOverflowEventType";
        let display_name = "EventQueueOverflowEventType";
        let description = "";
        let node_id = NodeId::new(0, 3035);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "ProgressEventType";
        let display_name = "ProgressEventType";
        let description = "";
        let node_id = NodeId::new(0, 11436);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12502), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12503), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AggregateFunctionType";
        let display_name = "AggregateFunctionType";
        let description = "";
        let node_id = NodeId::new(0, 2340);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "StateMachineType";
        let display_name = "StateMachineType";
        let description = "";
        let node_id = NodeId::new(0, 2299);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2769), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2770), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "FiniteStateMachineType";
        let display_name = "FiniteStateMachineType";
        let description = "";
        let node_id = NodeId::new(0, 2771);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2772), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2773), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 2299), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "StateType";
        let display_name = "StateType";
        let description = "";
        let node_id = NodeId::new(0, 2307);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2308), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "InitialStateType";
        let display_name = "InitialStateType";
        let description = "";
        let node_id = NodeId::new(0, 2309);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 2307), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "TransitionType";
        let display_name = "TransitionType";
        let description = "";
        let node_id = NodeId::new(0, 2310);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2312), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 58), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "TransitionEventType";
        let display_name = "TransitionEventType";
        let description = "";
        let node_id = NodeId::new(0, 2311);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2774), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2775), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2776), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // ObjectType
        let browse_name = "AuditUpdateStateEventType";
        let display_name = "AuditUpdateStateEventType";
        let description = "";
        let node_id = NodeId::new(0, 2315);
        let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2777), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2778), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2127), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "BitFieldMaskDataType";
        let display_name = "BitFieldMaskDataType";
        let description = "A mask of 32 bits that can be updated individually by using the top 32 bits as a mask.";
        let node_id = NodeId::new(0, 11737);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 9), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "BuildInfo";
        let display_name = "BuildInfo";
        let description = "";
        let node_id = NodeId::new(0, 338);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "RedundancySupport";
        let display_name = "RedundancySupport";
        let description = "";
        let node_id = NodeId::new(0, 851);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7611), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 29), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "ServerState";
        let display_name = "ServerState";
        let description = "";
        let node_id = NodeId::new(0, 852);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7612), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 29), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "RedundantServerDataType";
        let display_name = "RedundantServerDataType";
        let description = "";
        let node_id = NodeId::new(0, 853);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "EndpointUrlListDataType";
        let display_name = "EndpointUrlListDataType";
        let description = "";
        let node_id = NodeId::new(0, 11943);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "NetworkGroupDataType";
        let display_name = "NetworkGroupDataType";
        let description = "";
        let node_id = NodeId::new(0, 11944);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "SamplingIntervalDiagnosticsDataType";
        let display_name = "SamplingIntervalDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 856);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "ServerDiagnosticsSummaryDataType";
        let display_name = "ServerDiagnosticsSummaryDataType";
        let description = "";
        let node_id = NodeId::new(0, 859);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "ServerStatusDataType";
        let display_name = "ServerStatusDataType";
        let description = "";
        let node_id = NodeId::new(0, 862);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "SessionDiagnosticsDataType";
        let display_name = "SessionDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 865);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "SessionSecurityDiagnosticsDataType";
        let display_name = "SessionSecurityDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 868);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "ServiceCounterDataType";
        let display_name = "ServiceCounterDataType";
        let description = "";
        let node_id = NodeId::new(0, 871);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "StatusResult";
        let display_name = "StatusResult";
        let description = "";
        let node_id = NodeId::new(0, 299);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "SubscriptionDiagnosticsDataType";
        let display_name = "SubscriptionDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 874);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "ModelChangeStructureDataType";
        let display_name = "ModelChangeStructureDataType";
        let description = "";
        let node_id = NodeId::new(0, 877);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "SemanticChangeStructureDataType";
        let display_name = "SemanticChangeStructureDataType";
        let description = "";
        let node_id = NodeId::new(0, 897);
        let node = DataType::new(&node_id, browse_name, display_name, description, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "FromState";
        let display_name = "FromState";
        let description = "The type for a reference to the state before a transition.";
        let node_id = NodeId::new(0, 51);
        let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "ToTransition")), false, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "ToState";
        let display_name = "ToState";
        let description = "The type for a reference to the state after a transition.";
        let node_id = NodeId::new(0, 52);
        let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "FromTransition")), false, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "HasCause";
        let display_name = "HasCause";
        let description = "The type for a reference to a method that can cause a transition to occur.";
        let node_id = NodeId::new(0, 53);
        let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "MayBeCausedBy")), false, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "HasEffect";
        let display_name = "HasEffect";
        let description = "The type for a reference to an event that may be raised when a transition occurs.";
        let node_id = NodeId::new(0, 54);
        let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "MayBeEffectedBy")), false, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "HasSubStateMachine";
        let display_name = "HasSubStateMachine";
        let description = "The type for a reference to a substate for a state.";
        let node_id = NodeId::new(0, 117);
        let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "SubStateMachineOf")), false, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // Variable
        let browse_name = "DataTypeVersion";
        let display_name = "DataTypeVersion";
        let description = "The version number for the data type description.";
        let node_id = NodeId::new(0, 104);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 69), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 69), &node_id);
    }
    {
        // Variable
        let browse_name = "DictionaryFragment";
        let display_name = "DictionaryFragment";
        let description = "A fragment of a data type dictionary that defines the data type.";
        let node_id = NodeId::new(0, 105);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 69), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 69), &node_id);
    }
    {
        // Variable
        let browse_name = "DataTypeVersion";
        let display_name = "DataTypeVersion";
        let description = "The version number for the data type dictionary.";
        let node_id = NodeId::new(0, 106);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 72), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 72), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceUri";
        let display_name = "NamespaceUri";
        let description = "A URI that uniquely identifies the dictionary.";
        let node_id = NodeId::new(0, 107);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 72), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 72), &node_id);
    }
    {
        // Variable
        let browse_name = "NamingRule";
        let display_name = "NamingRule";
        let description = "Specified the significances of the BrowseName when a type is instantiated.";
        let node_id = NodeId::new(0, 111);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 77), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 77), &node_id);
    }
    {
        // Variable
        let browse_name = "NamingRule";
        let display_name = "NamingRule";
        let description = "Specified the significances of the BrowseName when a type is instantiated.";
        let node_id = NodeId::new(0, 112);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 78), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 78), &node_id);
    }
    {
        // Variable
        let browse_name = "NamingRule";
        let display_name = "NamingRule";
        let description = "Specified the significances of the BrowseName when a type is instantiated.";
        let node_id = NodeId::new(0, 113);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 80), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 80), &node_id);
    }
    {
        // Variable
        let browse_name = "NamingRule";
        let display_name = "NamingRule";
        let description = "Specified the significances of the BrowseName when a type is instantiated.";
        let node_id = NodeId::new(0, 114);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 83), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 83), &node_id);
    }
    {
        // Variable
        let browse_name = "NamingRule";
        let display_name = "NamingRule";
        let description = "Specified the significances of the BrowseName when a type is instantiated.";
        let node_id = NodeId::new(0, 116);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 79), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 79), &node_id);
    }
    {
        // Variable
        let browse_name = "NamingRule";
        let display_name = "NamingRule";
        let description = "Specified the significances of the BrowseName when a type is instantiated.";
        let node_id = NodeId::new(0, 11509);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11508), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11508), &node_id);
    }
    {
        // Variable
        let browse_name = "NamingRule";
        let display_name = "NamingRule";
        let description = "Specified the significances of the BrowseName when a type is instantiated.";
        let node_id = NodeId::new(0, 11511);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11510), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11510), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerArray";
        let display_name = "ServerArray";
        let description = "The list of server URIs used by the server.";
        let node_id = NodeId::new(0, 2005);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceArray";
        let display_name = "NamespaceArray";
        let description = "The list of namespace URIs used by the server.";
        let node_id = NodeId::new(0, 2006);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerStatus";
        let display_name = "ServerStatus";
        let description = "The current status of the server.";
        let node_id = NodeId::new(0, 2007);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(862u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3074), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3075), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3076), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3077), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3084), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3085), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2138), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Variable
        let browse_name = "StartTime";
        let display_name = "StartTime";
        let description = "";
        let node_id = NodeId::new(0, 3074);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2007), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2007), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentTime";
        let display_name = "CurrentTime";
        let description = "";
        let node_id = NodeId::new(0, 3075);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2007), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2007), &node_id);
    }
    {
        // Variable
        let browse_name = "State";
        let display_name = "State";
        let description = "";
        let node_id = NodeId::new(0, 3076);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(852u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2007), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2007), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildInfo";
        let display_name = "BuildInfo";
        let description = "";
        let node_id = NodeId::new(0, 3077);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(338u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3078), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3079), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3080), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3081), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3082), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3083), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3051), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2007), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2007), &node_id);
    }
    {
        // Variable
        let browse_name = "ProductUri";
        let display_name = "ProductUri";
        let description = "";
        let node_id = NodeId::new(0, 3078);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3077), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3077), &node_id);
    }
    {
        // Variable
        let browse_name = "ManufacturerName";
        let display_name = "ManufacturerName";
        let description = "";
        let node_id = NodeId::new(0, 3079);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3077), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3077), &node_id);
    }
    {
        // Variable
        let browse_name = "ProductName";
        let display_name = "ProductName";
        let description = "";
        let node_id = NodeId::new(0, 3080);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3077), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3077), &node_id);
    }
    {
        // Variable
        let browse_name = "SoftwareVersion";
        let display_name = "SoftwareVersion";
        let description = "";
        let node_id = NodeId::new(0, 3081);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3077), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3077), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildNumber";
        let display_name = "BuildNumber";
        let description = "";
        let node_id = NodeId::new(0, 3082);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3077), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3077), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildDate";
        let display_name = "BuildDate";
        let description = "";
        let node_id = NodeId::new(0, 3083);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3077), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3077), &node_id);
    }
    {
        // Variable
        let browse_name = "SecondsTillShutdown";
        let display_name = "SecondsTillShutdown";
        let description = "";
        let node_id = NodeId::new(0, 3084);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2007), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2007), &node_id);
    }
    {
        // Variable
        let browse_name = "ShutdownReason";
        let display_name = "ShutdownReason";
        let description = "";
        let node_id = NodeId::new(0, 3085);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2007), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2007), &node_id);
    }
    {
        // Variable
        let browse_name = "ServiceLevel";
        let display_name = "ServiceLevel";
        let description = "A value indicating the level of service the server can provide. 255 indicates the best.";
        let node_id = NodeId::new(0, 2008);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Byte, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Variable
        let browse_name = "Auditing";
        let display_name = "Auditing";
        let description = "A flag indicating whether the server is currently generating audit events.";
        let node_id = NodeId::new(0, 2742);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Variable
        let browse_name = "EstimatedReturnTime";
        let display_name = "EstimatedReturnTime";
        let description = "Indicates the time at which the Server is expected to be available in the state RUNNING.";
        let node_id = NodeId::new(0, 12882);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerProfileArray";
        let display_name = "ServerProfileArray";
        let description = "A list of profiles supported by the server.";
        let node_id = NodeId::new(0, 3086);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Variable
        let browse_name = "LocaleIdArray";
        let display_name = "LocaleIdArray";
        let description = "A list of locales supported by the server.";
        let node_id = NodeId::new(0, 3087);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Variable
        let browse_name = "MinSupportedSampleRate";
        let display_name = "MinSupportedSampleRate";
        let description = "The minimum sampling interval supported by the server.";
        let node_id = NodeId::new(0, 3088);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxBrowseContinuationPoints";
        let display_name = "MaxBrowseContinuationPoints";
        let description = "The maximum number of continuation points for Browse operations per session.";
        let node_id = NodeId::new(0, 3089);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxQueryContinuationPoints";
        let display_name = "MaxQueryContinuationPoints";
        let description = "The maximum number of continuation points for Query operations per session.";
        let node_id = NodeId::new(0, 3090);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxHistoryContinuationPoints";
        let display_name = "MaxHistoryContinuationPoints";
        let description = "The maximum number of continuation points for ReadHistory operations per session.";
        let node_id = NodeId::new(0, 3091);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Variable
        let browse_name = "SoftwareCertificates";
        let display_name = "SoftwareCertificates";
        let description = "The software certificates owned by the server.";
        let node_id = NodeId::new(0, 3092);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(344u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2009), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2009), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerDiagnosticsSummary";
        let display_name = "ServerDiagnosticsSummary";
        let description = "A summary of server level diagnostics.";
        let node_id = NodeId::new(0, 3095);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(859u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3096), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3097), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3098), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3099), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3100), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3101), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3102), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3104), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3105), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3106), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3107), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3108), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2150), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2010), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2010), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerViewCount";
        let display_name = "ServerViewCount";
        let description = "";
        let node_id = NodeId::new(0, 3096);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSessionCount";
        let display_name = "CurrentSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3097);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "CumulatedSessionCount";
        let display_name = "CumulatedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3098);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityRejectedSessionCount";
        let display_name = "SecurityRejectedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3099);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "RejectedSessionCount";
        let display_name = "RejectedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3100);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionTimeoutCount";
        let display_name = "SessionTimeoutCount";
        let description = "";
        let node_id = NodeId::new(0, 3101);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionAbortCount";
        let display_name = "SessionAbortCount";
        let description = "";
        let node_id = NodeId::new(0, 3102);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishingIntervalCount";
        let display_name = "PublishingIntervalCount";
        let description = "";
        let node_id = NodeId::new(0, 3104);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSubscriptionCount";
        let display_name = "CurrentSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 3105);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "CumulatedSubscriptionCount";
        let display_name = "CumulatedSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 3106);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityRejectedRequestsCount";
        let display_name = "SecurityRejectedRequestsCount";
        let description = "";
        let node_id = NodeId::new(0, 3107);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "RejectedRequestsCount";
        let display_name = "RejectedRequestsCount";
        let description = "";
        let node_id = NodeId::new(0, 3108);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3095), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3095), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionDiagnosticsArray";
        let display_name = "SubscriptionDiagnosticsArray";
        let description = "A list of diagnostics for each active subscription.";
        let node_id = NodeId::new(0, 3110);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2010), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2010), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnosticsArray";
        let display_name = "SessionDiagnosticsArray";
        let description = "A list of diagnostics for each active session.";
        let node_id = NodeId::new(0, 3112);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3111), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3111), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnosticsArray";
        let display_name = "SessionSecurityDiagnosticsArray";
        let description = "A list of security related diagnostics for each active session.";
        let node_id = NodeId::new(0, 3113);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3111), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3111), &node_id);
    }
    {
        // Variable
        let browse_name = "EnabledFlag";
        let display_name = "EnabledFlag";
        let description = "If TRUE the diagnostics collection is enabled.";
        let node_id = NodeId::new(0, 3114);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2010), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2010), &node_id);
    }
    {
        // Variable
        let browse_name = "RedundancySupport";
        let display_name = "RedundancySupport";
        let description = "Indicates what style of redundancy is supported by the server.";
        let node_id = NodeId::new(0, 3115);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(851u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2012), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2012), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11490);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11489), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11489), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11491);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11489), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11489), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 12872);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12871), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 12871), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 12747);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12746), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 12746), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 12748);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12746), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 12746), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 12884);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12883), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 12883), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerProfileArray";
        let display_name = "ServerProfileArray";
        let description = "A list of profiles supported by the server.";
        let node_id = NodeId::new(0, 2014);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "LocaleIdArray";
        let display_name = "LocaleIdArray";
        let description = "A list of locales supported by the server.";
        let node_id = NodeId::new(0, 2016);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "MinSupportedSampleRate";
        let display_name = "MinSupportedSampleRate";
        let description = "The minimum sampling interval supported by the server.";
        let node_id = NodeId::new(0, 2017);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxBrowseContinuationPoints";
        let display_name = "MaxBrowseContinuationPoints";
        let description = "The maximum number of continuation points for Browse operations per session.";
        let node_id = NodeId::new(0, 2732);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxQueryContinuationPoints";
        let display_name = "MaxQueryContinuationPoints";
        let description = "The maximum number of continuation points for Query operations per session.";
        let node_id = NodeId::new(0, 2733);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxHistoryContinuationPoints";
        let display_name = "MaxHistoryContinuationPoints";
        let description = "The maximum number of continuation points for ReadHistory operations per session.";
        let node_id = NodeId::new(0, 2734);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "SoftwareCertificates";
        let display_name = "SoftwareCertificates";
        let description = "The software certificates owned by the server.";
        let node_id = NodeId::new(0, 3049);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(344u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxArrayLength";
        let display_name = "MaxArrayLength";
        let description = "The maximum length for an array value supported by the server.";
        let node_id = NodeId::new(0, 11549);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxStringLength";
        let display_name = "MaxStringLength";
        let description = "The maximum length for a string value supported by the server.";
        let node_id = NodeId::new(0, 11550);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxByteStringLength";
        let display_name = "MaxByteStringLength";
        let description = "The maximum length for a byte string value supported by the server.";
        let node_id = NodeId::new(0, 12910);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "<VendorCapability>";
        let display_name = "<VendorCapability>";
        let description = "";
        let node_id = NodeId::new(0, 11562);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2137), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2013), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2013), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerDiagnosticsSummary";
        let display_name = "ServerDiagnosticsSummary";
        let description = "A summary of server level diagnostics.";
        let node_id = NodeId::new(0, 2021);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(859u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3116), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3117), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3118), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3119), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3120), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3121), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3122), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3124), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3125), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3126), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3127), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3128), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2150), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2020), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2020), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerViewCount";
        let display_name = "ServerViewCount";
        let description = "";
        let node_id = NodeId::new(0, 3116);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSessionCount";
        let display_name = "CurrentSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3117);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "CumulatedSessionCount";
        let display_name = "CumulatedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3118);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityRejectedSessionCount";
        let display_name = "SecurityRejectedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3119);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "RejectedSessionCount";
        let display_name = "RejectedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3120);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionTimeoutCount";
        let display_name = "SessionTimeoutCount";
        let description = "";
        let node_id = NodeId::new(0, 3121);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionAbortCount";
        let display_name = "SessionAbortCount";
        let description = "";
        let node_id = NodeId::new(0, 3122);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishingIntervalCount";
        let display_name = "PublishingIntervalCount";
        let description = "";
        let node_id = NodeId::new(0, 3124);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSubscriptionCount";
        let display_name = "CurrentSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 3125);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "CumulatedSubscriptionCount";
        let display_name = "CumulatedSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 3126);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityRejectedRequestsCount";
        let display_name = "SecurityRejectedRequestsCount";
        let description = "";
        let node_id = NodeId::new(0, 3127);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "RejectedRequestsCount";
        let display_name = "RejectedRequestsCount";
        let description = "";
        let node_id = NodeId::new(0, 3128);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2021), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2021), &node_id);
    }
    {
        // Variable
        let browse_name = "SamplingIntervalDiagnosticsArray";
        let display_name = "SamplingIntervalDiagnosticsArray";
        let description = "A list of diagnostics for each sampling interval supported by the server.";
        let node_id = NodeId::new(0, 2022);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(856u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2164), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2020), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2020), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionDiagnosticsArray";
        let display_name = "SubscriptionDiagnosticsArray";
        let description = "A list of diagnostics for each active subscription.";
        let node_id = NodeId::new(0, 2023);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2020), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2020), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnosticsArray";
        let display_name = "SessionDiagnosticsArray";
        let description = "A list of diagnostics for each active session.";
        let node_id = NodeId::new(0, 3129);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2744), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2744), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnosticsArray";
        let display_name = "SessionSecurityDiagnosticsArray";
        let description = "A list of security related diagnostics for each active session.";
        let node_id = NodeId::new(0, 3130);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2744), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2744), &node_id);
    }
    {
        // Variable
        let browse_name = "EnabledFlag";
        let display_name = "EnabledFlag";
        let description = "If TRUE the diagnostics collection is enabled.";
        let node_id = NodeId::new(0, 2025);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2020), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2020), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnosticsArray";
        let display_name = "SessionDiagnosticsArray";
        let description = "A list of diagnostics for each active session.";
        let node_id = NodeId::new(0, 2027);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2026), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2026), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnosticsArray";
        let display_name = "SessionSecurityDiagnosticsArray";
        let description = "A list of security related diagnostics for each active session.";
        let node_id = NodeId::new(0, 2028);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2026), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2026), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnostics";
        let display_name = "SessionDiagnostics";
        let description = "Diagnostics information for an active session.";
        let node_id = NodeId::new(0, 12098);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12099), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12100), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12101), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12102), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12103), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12104), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12105), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12106), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12107), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12108), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12109), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12110), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12111), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12112), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12113), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12114), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12115), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12116), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12117), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12118), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12119), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12120), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12121), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12122), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12123), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12124), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12125), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12126), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12127), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12128), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12129), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12130), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12131), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12132), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12133), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12134), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12135), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12136), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12137), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12138), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12139), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12140), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12141), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2197), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12097), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12097), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 12099);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionName";
        let display_name = "SessionName";
        let description = "";
        let node_id = NodeId::new(0, 12100);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientDescription";
        let display_name = "ClientDescription";
        let description = "";
        let node_id = NodeId::new(0, 12101);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(308u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerUri";
        let display_name = "ServerUri";
        let description = "";
        let node_id = NodeId::new(0, 12102);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointUrl";
        let display_name = "EndpointUrl";
        let description = "";
        let node_id = NodeId::new(0, 12103);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "LocaleIds";
        let display_name = "LocaleIds";
        let description = "";
        let node_id = NodeId::new(0, 12104);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "ActualSessionTimeout";
        let display_name = "ActualSessionTimeout";
        let description = "";
        let node_id = NodeId::new(0, 12105);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxResponseMessageSize";
        let display_name = "MaxResponseMessageSize";
        let description = "";
        let node_id = NodeId::new(0, 12106);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientConnectionTime";
        let display_name = "ClientConnectionTime";
        let description = "";
        let node_id = NodeId::new(0, 12107);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientLastContactTime";
        let display_name = "ClientLastContactTime";
        let description = "";
        let node_id = NodeId::new(0, 12108);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSubscriptionsCount";
        let display_name = "CurrentSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 12109);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentMonitoredItemsCount";
        let display_name = "CurrentMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12110);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentPublishRequestsInQueue";
        let display_name = "CurrentPublishRequestsInQueue";
        let description = "";
        let node_id = NodeId::new(0, 12111);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "TotalRequestCount";
        let display_name = "TotalRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12112);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "UnauthorizedRequestCount";
        let display_name = "UnauthorizedRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12113);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "ReadCount";
        let display_name = "ReadCount";
        let description = "";
        let node_id = NodeId::new(0, 12114);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryReadCount";
        let display_name = "HistoryReadCount";
        let description = "";
        let node_id = NodeId::new(0, 12115);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "WriteCount";
        let display_name = "WriteCount";
        let description = "";
        let node_id = NodeId::new(0, 12116);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryUpdateCount";
        let display_name = "HistoryUpdateCount";
        let description = "";
        let node_id = NodeId::new(0, 12117);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "CallCount";
        let display_name = "CallCount";
        let description = "";
        let node_id = NodeId::new(0, 12118);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "CreateMonitoredItemsCount";
        let display_name = "CreateMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12119);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifyMonitoredItemsCount";
        let display_name = "ModifyMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12120);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "SetMonitoringModeCount";
        let display_name = "SetMonitoringModeCount";
        let description = "";
        let node_id = NodeId::new(0, 12121);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "SetTriggeringCount";
        let display_name = "SetTriggeringCount";
        let description = "";
        let node_id = NodeId::new(0, 12122);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteMonitoredItemsCount";
        let display_name = "DeleteMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12123);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "CreateSubscriptionCount";
        let display_name = "CreateSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 12124);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifySubscriptionCount";
        let display_name = "ModifySubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 12125);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "SetPublishingModeCount";
        let display_name = "SetPublishingModeCount";
        let description = "";
        let node_id = NodeId::new(0, 12126);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishCount";
        let display_name = "PublishCount";
        let description = "";
        let node_id = NodeId::new(0, 12127);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishCount";
        let display_name = "RepublishCount";
        let description = "";
        let node_id = NodeId::new(0, 12128);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferSubscriptionsCount";
        let display_name = "TransferSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 12129);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteSubscriptionsCount";
        let display_name = "DeleteSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 12130);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "AddNodesCount";
        let display_name = "AddNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 12131);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "AddReferencesCount";
        let display_name = "AddReferencesCount";
        let description = "";
        let node_id = NodeId::new(0, 12132);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteNodesCount";
        let display_name = "DeleteNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 12133);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteReferencesCount";
        let display_name = "DeleteReferencesCount";
        let description = "";
        let node_id = NodeId::new(0, 12134);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "BrowseCount";
        let display_name = "BrowseCount";
        let description = "";
        let node_id = NodeId::new(0, 12135);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "BrowseNextCount";
        let display_name = "BrowseNextCount";
        let description = "";
        let node_id = NodeId::new(0, 12136);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "TranslateBrowsePathsToNodeIdsCount";
        let display_name = "TranslateBrowsePathsToNodeIdsCount";
        let description = "";
        let node_id = NodeId::new(0, 12137);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "QueryFirstCount";
        let display_name = "QueryFirstCount";
        let description = "";
        let node_id = NodeId::new(0, 12138);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "QueryNextCount";
        let display_name = "QueryNextCount";
        let description = "";
        let node_id = NodeId::new(0, 12139);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "RegisterNodesCount";
        let display_name = "RegisterNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 12140);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "UnregisterNodesCount";
        let display_name = "UnregisterNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 12141);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12098), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12098), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnostics";
        let display_name = "SessionSecurityDiagnostics";
        let description = "Security related diagnostics information for an active session.";
        let node_id = NodeId::new(0, 12142);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12143), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12144), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12145), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12146), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12147), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12148), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12149), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12150), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12151), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2244), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12097), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12097), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 12143);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserIdOfSession";
        let display_name = "ClientUserIdOfSession";
        let description = "";
        let node_id = NodeId::new(0, 12144);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserIdHistory";
        let display_name = "ClientUserIdHistory";
        let description = "";
        let node_id = NodeId::new(0, 12145);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "AuthenticationMechanism";
        let display_name = "AuthenticationMechanism";
        let description = "";
        let node_id = NodeId::new(0, 12146);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "Encoding";
        let display_name = "Encoding";
        let description = "";
        let node_id = NodeId::new(0, 12147);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "TransportProtocol";
        let display_name = "TransportProtocol";
        let description = "";
        let node_id = NodeId::new(0, 12148);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityMode";
        let display_name = "SecurityMode";
        let description = "";
        let node_id = NodeId::new(0, 12149);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityPolicyUri";
        let display_name = "SecurityPolicyUri";
        let description = "";
        let node_id = NodeId::new(0, 12150);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientCertificate";
        let display_name = "ClientCertificate";
        let description = "";
        let node_id = NodeId::new(0, 12151);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12142), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionDiagnosticsArray";
        let display_name = "SubscriptionDiagnosticsArray";
        let description = "A list of diagnostics for each subscription owned by the session.";
        let node_id = NodeId::new(0, 12152);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12097), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12097), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnostics";
        let display_name = "SessionDiagnostics";
        let description = "Diagnostics information for an active session.";
        let node_id = NodeId::new(0, 2030);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3131), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3132), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3133), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3134), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3135), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3136), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3137), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3138), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3139), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3140), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3141), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3142), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3143), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8898), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11891), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3151), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3152), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3153), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3154), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3155), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3156), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3157), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3158), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3159), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3160), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3161), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3162), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3163), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3164), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3165), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3166), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3167), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3168), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3169), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3170), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3171), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3172), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3173), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3174), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3175), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3176), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3177), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3178), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2197), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2029), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2029), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 3131);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionName";
        let display_name = "SessionName";
        let description = "";
        let node_id = NodeId::new(0, 3132);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientDescription";
        let display_name = "ClientDescription";
        let description = "";
        let node_id = NodeId::new(0, 3133);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(308u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerUri";
        let display_name = "ServerUri";
        let description = "";
        let node_id = NodeId::new(0, 3134);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointUrl";
        let display_name = "EndpointUrl";
        let description = "";
        let node_id = NodeId::new(0, 3135);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "LocaleIds";
        let display_name = "LocaleIds";
        let description = "";
        let node_id = NodeId::new(0, 3136);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "ActualSessionTimeout";
        let display_name = "ActualSessionTimeout";
        let description = "";
        let node_id = NodeId::new(0, 3137);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxResponseMessageSize";
        let display_name = "MaxResponseMessageSize";
        let description = "";
        let node_id = NodeId::new(0, 3138);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientConnectionTime";
        let display_name = "ClientConnectionTime";
        let description = "";
        let node_id = NodeId::new(0, 3139);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientLastContactTime";
        let display_name = "ClientLastContactTime";
        let description = "";
        let node_id = NodeId::new(0, 3140);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSubscriptionsCount";
        let display_name = "CurrentSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 3141);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentMonitoredItemsCount";
        let display_name = "CurrentMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 3142);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentPublishRequestsInQueue";
        let display_name = "CurrentPublishRequestsInQueue";
        let description = "";
        let node_id = NodeId::new(0, 3143);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "TotalRequestCount";
        let display_name = "TotalRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 8898);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "UnauthorizedRequestCount";
        let display_name = "UnauthorizedRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 11891);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "ReadCount";
        let display_name = "ReadCount";
        let description = "";
        let node_id = NodeId::new(0, 3151);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryReadCount";
        let display_name = "HistoryReadCount";
        let description = "";
        let node_id = NodeId::new(0, 3152);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "WriteCount";
        let display_name = "WriteCount";
        let description = "";
        let node_id = NodeId::new(0, 3153);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryUpdateCount";
        let display_name = "HistoryUpdateCount";
        let description = "";
        let node_id = NodeId::new(0, 3154);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "CallCount";
        let display_name = "CallCount";
        let description = "";
        let node_id = NodeId::new(0, 3155);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "CreateMonitoredItemsCount";
        let display_name = "CreateMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 3156);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifyMonitoredItemsCount";
        let display_name = "ModifyMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 3157);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "SetMonitoringModeCount";
        let display_name = "SetMonitoringModeCount";
        let description = "";
        let node_id = NodeId::new(0, 3158);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "SetTriggeringCount";
        let display_name = "SetTriggeringCount";
        let description = "";
        let node_id = NodeId::new(0, 3159);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteMonitoredItemsCount";
        let display_name = "DeleteMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 3160);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "CreateSubscriptionCount";
        let display_name = "CreateSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 3161);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifySubscriptionCount";
        let display_name = "ModifySubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 3162);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "SetPublishingModeCount";
        let display_name = "SetPublishingModeCount";
        let description = "";
        let node_id = NodeId::new(0, 3163);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishCount";
        let display_name = "PublishCount";
        let description = "";
        let node_id = NodeId::new(0, 3164);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishCount";
        let display_name = "RepublishCount";
        let description = "";
        let node_id = NodeId::new(0, 3165);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferSubscriptionsCount";
        let display_name = "TransferSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 3166);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteSubscriptionsCount";
        let display_name = "DeleteSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 3167);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "AddNodesCount";
        let display_name = "AddNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 3168);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "AddReferencesCount";
        let display_name = "AddReferencesCount";
        let description = "";
        let node_id = NodeId::new(0, 3169);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteNodesCount";
        let display_name = "DeleteNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 3170);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteReferencesCount";
        let display_name = "DeleteReferencesCount";
        let description = "";
        let node_id = NodeId::new(0, 3171);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "BrowseCount";
        let display_name = "BrowseCount";
        let description = "";
        let node_id = NodeId::new(0, 3172);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "BrowseNextCount";
        let display_name = "BrowseNextCount";
        let description = "";
        let node_id = NodeId::new(0, 3173);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "TranslateBrowsePathsToNodeIdsCount";
        let display_name = "TranslateBrowsePathsToNodeIdsCount";
        let description = "";
        let node_id = NodeId::new(0, 3174);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "QueryFirstCount";
        let display_name = "QueryFirstCount";
        let description = "";
        let node_id = NodeId::new(0, 3175);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "QueryNextCount";
        let display_name = "QueryNextCount";
        let description = "";
        let node_id = NodeId::new(0, 3176);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "RegisterNodesCount";
        let display_name = "RegisterNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 3177);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "UnregisterNodesCount";
        let display_name = "UnregisterNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 3178);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2030), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2030), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnostics";
        let display_name = "SessionSecurityDiagnostics";
        let description = "Security related diagnostics information for an active session.";
        let node_id = NodeId::new(0, 2031);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3179), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3180), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3181), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3182), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3183), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3184), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3185), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3186), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3187), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2244), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2029), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2029), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 3179);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserIdOfSession";
        let display_name = "ClientUserIdOfSession";
        let description = "";
        let node_id = NodeId::new(0, 3180);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserIdHistory";
        let display_name = "ClientUserIdHistory";
        let description = "";
        let node_id = NodeId::new(0, 3181);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "AuthenticationMechanism";
        let display_name = "AuthenticationMechanism";
        let description = "";
        let node_id = NodeId::new(0, 3182);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "Encoding";
        let display_name = "Encoding";
        let description = "";
        let node_id = NodeId::new(0, 3183);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "TransportProtocol";
        let display_name = "TransportProtocol";
        let description = "";
        let node_id = NodeId::new(0, 3184);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityMode";
        let display_name = "SecurityMode";
        let description = "";
        let node_id = NodeId::new(0, 3185);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityPolicyUri";
        let display_name = "SecurityPolicyUri";
        let description = "";
        let node_id = NodeId::new(0, 3186);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientCertificate";
        let display_name = "ClientCertificate";
        let description = "";
        let node_id = NodeId::new(0, 3187);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2031), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2031), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionDiagnosticsArray";
        let display_name = "SubscriptionDiagnosticsArray";
        let description = "A list of diagnostics for each subscription owned by the session.";
        let node_id = NodeId::new(0, 2032);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2029), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2029), &node_id);
    }
    {
        // Variable
        let browse_name = "RedundancySupport";
        let display_name = "RedundancySupport";
        let description = "Indicates what style of redundancy is supported by the server.";
        let node_id = NodeId::new(0, 2035);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(851u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2034), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2034), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentServerId";
        let display_name = "CurrentServerId";
        let description = "The ID of the server that is currently in use.";
        let node_id = NodeId::new(0, 2037);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2036), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2036), &node_id);
    }
    {
        // Variable
        let browse_name = "RedundantServerArray";
        let display_name = "RedundantServerArray";
        let description = "A list of servers in the same redundant set.";
        let node_id = NodeId::new(0, 2038);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(853u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2036), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2036), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerUriArray";
        let display_name = "ServerUriArray";
        let description = "A list of servers in the same redundant set.";
        let node_id = NodeId::new(0, 2040);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2039), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2039), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerNetworkGroups";
        let display_name = "ServerNetworkGroups";
        let description = "";
        let node_id = NodeId::new(0, 11948);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(11944u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11945), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11945), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerRead";
        let display_name = "MaxNodesPerRead";
        let description = "The maximum number of operations in a single Read request.";
        let node_id = NodeId::new(0, 11565);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerHistoryReadData";
        let display_name = "MaxNodesPerHistoryReadData";
        let description = "The maximum number of operations in a single data HistoryRead request.";
        let node_id = NodeId::new(0, 12161);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerHistoryReadEvents";
        let display_name = "MaxNodesPerHistoryReadEvents";
        let description = "The maximum number of operations in a single event HistoryRead request.";
        let node_id = NodeId::new(0, 12162);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerWrite";
        let display_name = "MaxNodesPerWrite";
        let description = "The maximum number of operations in a single Write request.";
        let node_id = NodeId::new(0, 11567);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerHistoryUpdateData";
        let display_name = "MaxNodesPerHistoryUpdateData";
        let description = "The maximum number of operations in a single data HistoryUpdate request.";
        let node_id = NodeId::new(0, 12163);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerHistoryUpdateEvents";
        let display_name = "MaxNodesPerHistoryUpdateEvents";
        let description = "The maximum number of operations in a single event HistoryUpdate request.";
        let node_id = NodeId::new(0, 12164);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerMethodCall";
        let display_name = "MaxNodesPerMethodCall";
        let description = "The maximum number of operations in a single Call request.";
        let node_id = NodeId::new(0, 11569);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerBrowse";
        let display_name = "MaxNodesPerBrowse";
        let description = "The maximum number of operations in a single Browse request.";
        let node_id = NodeId::new(0, 11570);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerRegisterNodes";
        let display_name = "MaxNodesPerRegisterNodes";
        let description = "The maximum number of operations in a single RegisterNodes request.";
        let node_id = NodeId::new(0, 11571);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
        let display_name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
        let description = "The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.";
        let node_id = NodeId::new(0, 11572);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerNodeManagement";
        let display_name = "MaxNodesPerNodeManagement";
        let description = "The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.";
        let node_id = NodeId::new(0, 11573);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxMonitoredItemsPerCall";
        let display_name = "MaxMonitoredItemsPerCall";
        let description = "The maximum number of operations in a single MonitoredItem related request.";
        let node_id = NodeId::new(0, 11574);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11564), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11564), &node_id);
    }
    {
        // Variable
        let browse_name = "Size";
        let display_name = "Size";
        let description = "The size of the file in bytes.";
        let node_id = NodeId::new(0, 11576);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Variable
        let browse_name = "Writable";
        let display_name = "Writable";
        let description = "Whether the file is writable.";
        let node_id = NodeId::new(0, 12686);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Variable
        let browse_name = "UserWritable";
        let display_name = "UserWritable";
        let description = "Whether the file is writable by the current user.";
        let node_id = NodeId::new(0, 12687);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Variable
        let browse_name = "OpenCount";
        let display_name = "OpenCount";
        let description = "The current number of open file handles.";
        let node_id = NodeId::new(0, 11579);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Variable
        let browse_name = "MimeType";
        let display_name = "MimeType";
        let description = "The content of the file.";
        let node_id = NodeId::new(0, 13341);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11581);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11580), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11580), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11582);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11580), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11580), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11584);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11583), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11583), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11586);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11585), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11585), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11587);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11585), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11585), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11589);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11588), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11588), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11591);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11590), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11590), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11592);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11590), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11590), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11594);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11593), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11593), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13356);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13355), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13355), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13357);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13355), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13355), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13359);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13358), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13358), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13360);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13358), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13358), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13362);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13361), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13361), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13364);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13363), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13363), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13365);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13363), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13363), &node_id);
    }
    {
        // Variable
        let browse_name = "Size";
        let display_name = "Size";
        let description = "The size of the file in bytes.";
        let node_id = NodeId::new(0, 13367);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Variable
        let browse_name = "Writable";
        let display_name = "Writable";
        let description = "Whether the file is writable.";
        let node_id = NodeId::new(0, 13368);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Variable
        let browse_name = "UserWritable";
        let display_name = "UserWritable";
        let description = "Whether the file is writable by the current user.";
        let node_id = NodeId::new(0, 13369);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Variable
        let browse_name = "OpenCount";
        let display_name = "OpenCount";
        let description = "The current number of open file handles.";
        let node_id = NodeId::new(0, 13370);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13373);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13372), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13372), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13374);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13372), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13372), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13376);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13375), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13375), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13378);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13377), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13377), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13379);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13377), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13377), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13381);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13380), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13380), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13383);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13382), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13382), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13384);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13382), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13382), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13386);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13385), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13385), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13388);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13387), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13387), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13389);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13387), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13387), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13391);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13390), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13390), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13392);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13390), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13390), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13394);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13393), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13393), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13396);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13395), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13395), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 13397);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13395), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 13395), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceUri";
        let display_name = "NamespaceUri";
        let description = "The URI of the namespace.";
        let node_id = NodeId::new(0, 11617);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11616), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11616), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceVersion";
        let display_name = "NamespaceVersion";
        let description = "The human readable string representing version of the namespace.";
        let node_id = NodeId::new(0, 11618);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11616), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11616), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespacePublicationDate";
        let display_name = "NamespacePublicationDate";
        let description = "The publication date for the namespace.";
        let node_id = NodeId::new(0, 11619);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11616), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11616), &node_id);
    }
    {
        // Variable
        let browse_name = "IsNamespaceSubset";
        let display_name = "IsNamespaceSubset";
        let description = "If TRUE then the server only supports a subset of the namespace.";
        let node_id = NodeId::new(0, 11620);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11616), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11616), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticNodeIdTypes";
        let display_name = "StaticNodeIdTypes";
        let description = "A list of IdTypes for nodes which are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 11621);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(256u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11616), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11616), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticNumericNodeIdRange";
        let display_name = "StaticNumericNodeIdRange";
        let description = "A list of ranges for numeric node ids which are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 11622);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(291u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11616), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11616), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticStringNodeIdPattern";
        let display_name = "StaticStringNodeIdPattern";
        let description = "A regular expression which matches string node ids are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 11623);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11616), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11616), &node_id);
    }
    {
        // Variable
        let browse_name = "Size";
        let display_name = "Size";
        let description = "The size of the file in bytes.";
        let node_id = NodeId::new(0, 11625);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Variable
        let browse_name = "Writable";
        let display_name = "Writable";
        let description = "Whether the file is writable.";
        let node_id = NodeId::new(0, 12690);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Variable
        let browse_name = "UserWritable";
        let display_name = "UserWritable";
        let description = "Whether the file is writable by the current user.";
        let node_id = NodeId::new(0, 12691);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Variable
        let browse_name = "OpenCount";
        let display_name = "OpenCount";
        let description = "The current number of open file handles.";
        let node_id = NodeId::new(0, 11628);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11630);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11629), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11629), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11631);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11629), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11629), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11633);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11632), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11632), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11635);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11634), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11634), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11636);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11634), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11634), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11638);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11637), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11637), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11640);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11639), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11639), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11641);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11639), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11639), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11643);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11642), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11642), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceUri";
        let display_name = "NamespaceUri";
        let description = "The URI of the namespace.";
        let node_id = NodeId::new(0, 11647);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11646), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11646), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceVersion";
        let display_name = "NamespaceVersion";
        let description = "The human readable string representing version of the namespace.";
        let node_id = NodeId::new(0, 11648);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11646), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11646), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespacePublicationDate";
        let display_name = "NamespacePublicationDate";
        let description = "The publication date for the namespace.";
        let node_id = NodeId::new(0, 11649);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11646), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11646), &node_id);
    }
    {
        // Variable
        let browse_name = "IsNamespaceSubset";
        let display_name = "IsNamespaceSubset";
        let description = "If TRUE then the server only supports a subset of the namespace.";
        let node_id = NodeId::new(0, 11650);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11646), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11646), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticNodeIdTypes";
        let display_name = "StaticNodeIdTypes";
        let description = "A list of IdTypes for nodes which are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 11651);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(256u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11646), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11646), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticNumericNodeIdRange";
        let display_name = "StaticNumericNodeIdRange";
        let description = "A list of ranges for numeric node ids which are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 11652);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(291u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11646), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11646), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticStringNodeIdPattern";
        let display_name = "StaticStringNodeIdPattern";
        let description = "A regular expression which matches string node ids are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 11653);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11646), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11646), &node_id);
    }
    {
        // Variable
        let browse_name = "Size";
        let display_name = "Size";
        let description = "The size of the file in bytes.";
        let node_id = NodeId::new(0, 11676);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Variable
        let browse_name = "Writable";
        let display_name = "Writable";
        let description = "Whether the file is writable.";
        let node_id = NodeId::new(0, 12694);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Variable
        let browse_name = "UserWritable";
        let display_name = "UserWritable";
        let description = "Whether the file is writable by the current user.";
        let node_id = NodeId::new(0, 12695);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Variable
        let browse_name = "OpenCount";
        let display_name = "OpenCount";
        let description = "The current number of open file handles.";
        let node_id = NodeId::new(0, 11679);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11681);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11680), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11680), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11682);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11680), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11680), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11684);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11683), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11683), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11686);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11685), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11685), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11687);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11685), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11685), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11689);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11688), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11688), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11691);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11690), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11690), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11692);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11690), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11690), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11694);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11693), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11693), &node_id);
    }
    {
        // Variable
        let browse_name = "EventId";
        let display_name = "EventId";
        let description = "A globally unique identifier for the event.";
        let node_id = NodeId::new(0, 2042);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "EventType";
        let display_name = "EventType";
        let description = "The identifier for the event type.";
        let node_id = NodeId::new(0, 2043);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "SourceNode";
        let display_name = "SourceNode";
        let description = "The source of the event.";
        let node_id = NodeId::new(0, 2044);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "SourceName";
        let display_name = "SourceName";
        let description = "A description of the source of the event.";
        let node_id = NodeId::new(0, 2045);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "Time";
        let display_name = "Time";
        let description = "When the event occurred.";
        let node_id = NodeId::new(0, 2046);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "ReceiveTime";
        let display_name = "ReceiveTime";
        let description = "When the server received the event from the underlying system.";
        let node_id = NodeId::new(0, 2047);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "LocalTime";
        let display_name = "LocalTime";
        let description = "Information about the local time where the event originated.";
        let node_id = NodeId::new(0, 3190);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(8912u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "Message";
        let display_name = "Message";
        let description = "A localized description of the event.";
        let node_id = NodeId::new(0, 2050);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "Severity";
        let display_name = "Severity";
        let description = "Indicates how urgent an event is.";
        let node_id = NodeId::new(0, 2051);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2041), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2041), &node_id);
    }
    {
        // Variable
        let browse_name = "ActionTimeStamp";
        let display_name = "ActionTimeStamp";
        let description = "When the action triggering the event occurred.";
        let node_id = NodeId::new(0, 2053);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2052), &node_id);
    }
    {
        // Variable
        let browse_name = "Status";
        let display_name = "Status";
        let description = "If TRUE the action was performed. If FALSE the action failed and the server state did not change.";
        let node_id = NodeId::new(0, 2054);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2052), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerId";
        let display_name = "ServerId";
        let description = "The unique identifier for the server generating the event.";
        let node_id = NodeId::new(0, 2055);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2052), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientAuditEntryId";
        let display_name = "ClientAuditEntryId";
        let description = "The log entry id provided in the request that initiated the action.";
        let node_id = NodeId::new(0, 2056);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2052), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserId";
        let display_name = "ClientUserId";
        let description = "The user identity associated with the session that initiated the action.";
        let node_id = NodeId::new(0, 2057);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2052), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2052), &node_id);
    }
    {
        // Variable
        let browse_name = "SecureChannelId";
        let display_name = "SecureChannelId";
        let description = "The identifier for the secure channel that was changed.";
        let node_id = NodeId::new(0, 2745);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2059), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2059), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientCertificate";
        let display_name = "ClientCertificate";
        let description = "The certificate provided by the client.";
        let node_id = NodeId::new(0, 2061);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2060), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2060), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientCertificateThumbprint";
        let display_name = "ClientCertificateThumbprint";
        let description = "The thumbprint for certificate provided by the client.";
        let node_id = NodeId::new(0, 2746);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2060), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2060), &node_id);
    }
    {
        // Variable
        let browse_name = "RequestType";
        let display_name = "RequestType";
        let description = "The type of request (NEW or RENEW).";
        let node_id = NodeId::new(0, 2062);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(315u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2060), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2060), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityPolicyUri";
        let display_name = "SecurityPolicyUri";
        let description = "The security policy used by the channel.";
        let node_id = NodeId::new(0, 2063);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2060), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2060), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityMode";
        let display_name = "SecurityMode";
        let description = "The security mode used by the channel.";
        let node_id = NodeId::new(0, 2065);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2060), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2060), &node_id);
    }
    {
        // Variable
        let browse_name = "RequestedLifetime";
        let display_name = "RequestedLifetime";
        let description = "The lifetime of the channel requested by the client.";
        let node_id = NodeId::new(0, 2066);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2060), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2060), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "The unique identifier for the session,.";
        let node_id = NodeId::new(0, 2070);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2069), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2069), &node_id);
    }
    {
        // Variable
        let browse_name = "SecureChannelId";
        let display_name = "SecureChannelId";
        let description = "The secure channel associated with the session.";
        let node_id = NodeId::new(0, 2072);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2071), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2071), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientCertificate";
        let display_name = "ClientCertificate";
        let description = "The certificate provided by the client.";
        let node_id = NodeId::new(0, 2073);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2071), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2071), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientCertificateThumbprint";
        let display_name = "ClientCertificateThumbprint";
        let description = "The thumbprint of the certificate provided by the client.";
        let node_id = NodeId::new(0, 2747);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2071), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2071), &node_id);
    }
    {
        // Variable
        let browse_name = "RevisedSessionTimeout";
        let display_name = "RevisedSessionTimeout";
        let description = "The timeout for the session.";
        let node_id = NodeId::new(0, 2074);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2071), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2071), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointUrl";
        let display_name = "EndpointUrl";
        let description = "";
        let node_id = NodeId::new(0, 2749);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2748), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2748), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientSoftwareCertificates";
        let display_name = "ClientSoftwareCertificates";
        let description = "";
        let node_id = NodeId::new(0, 2076);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(344u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2075), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2075), &node_id);
    }
    {
        // Variable
        let browse_name = "UserIdentityToken";
        let display_name = "UserIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 2077);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(316u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2075), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2075), &node_id);
    }
    {
        // Variable
        let browse_name = "SecureChannelId";
        let display_name = "SecureChannelId";
        let description = "";
        let node_id = NodeId::new(0, 11485);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2075), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2075), &node_id);
    }
    {
        // Variable
        let browse_name = "RequestHandle";
        let display_name = "RequestHandle";
        let description = "";
        let node_id = NodeId::new(0, 2079);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2078), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2078), &node_id);
    }
    {
        // Variable
        let browse_name = "Certificate";
        let display_name = "Certificate";
        let description = "";
        let node_id = NodeId::new(0, 2081);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2080), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2080), &node_id);
    }
    {
        // Variable
        let browse_name = "InvalidHostname";
        let display_name = "InvalidHostname";
        let description = "";
        let node_id = NodeId::new(0, 2083);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2082), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2082), &node_id);
    }
    {
        // Variable
        let browse_name = "InvalidUri";
        let display_name = "InvalidUri";
        let description = "";
        let node_id = NodeId::new(0, 2084);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2082), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2082), &node_id);
    }
    {
        // Variable
        let browse_name = "NodesToAdd";
        let display_name = "NodesToAdd";
        let description = "";
        let node_id = NodeId::new(0, 2092);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(376u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2091), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2091), &node_id);
    }
    {
        // Variable
        let browse_name = "NodesToDelete";
        let display_name = "NodesToDelete";
        let description = "";
        let node_id = NodeId::new(0, 2094);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(382u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2093), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2093), &node_id);
    }
    {
        // Variable
        let browse_name = "ReferencesToAdd";
        let display_name = "ReferencesToAdd";
        let description = "";
        let node_id = NodeId::new(0, 2096);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(379u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2095), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2095), &node_id);
    }
    {
        // Variable
        let browse_name = "ReferencesToDelete";
        let display_name = "ReferencesToDelete";
        let description = "";
        let node_id = NodeId::new(0, 2098);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(385u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2097), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2097), &node_id);
    }
    {
        // Variable
        let browse_name = "AttributeId";
        let display_name = "AttributeId";
        let description = "";
        let node_id = NodeId::new(0, 2750);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2100), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2100), &node_id);
    }
    {
        // Variable
        let browse_name = "IndexRange";
        let display_name = "IndexRange";
        let description = "";
        let node_id = NodeId::new(0, 2101);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(291u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2100), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2100), &node_id);
    }
    {
        // Variable
        let browse_name = "OldValue";
        let display_name = "OldValue";
        let description = "";
        let node_id = NodeId::new(0, 2102);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2100), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2100), &node_id);
    }
    {
        // Variable
        let browse_name = "NewValue";
        let display_name = "NewValue";
        let description = "";
        let node_id = NodeId::new(0, 2103);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2100), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2100), &node_id);
    }
    {
        // Variable
        let browse_name = "ParameterDataTypeId";
        let display_name = "ParameterDataTypeId";
        let description = "";
        let node_id = NodeId::new(0, 2751);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2104), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2104), &node_id);
    }
    {
        // Variable
        let browse_name = "MethodId";
        let display_name = "MethodId";
        let description = "";
        let node_id = NodeId::new(0, 2128);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2127), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2127), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 2129);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2127), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2127), &node_id);
    }
    {
        // Variable
        let browse_name = "SystemState";
        let display_name = "SystemState";
        let description = "";
        let node_id = NodeId::new(0, 11696);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(852u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11446), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11446), &node_id);
    }
    {
        // Variable
        let browse_name = "Changes";
        let display_name = "Changes";
        let description = "";
        let node_id = NodeId::new(0, 2134);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(877u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2133), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2133), &node_id);
    }
    {
        // Variable
        let browse_name = "Changes";
        let display_name = "Changes";
        let description = "";
        let node_id = NodeId::new(0, 2739);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(897u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2738), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2738), &node_id);
    }
    {
        // Variable
        let browse_name = "Context";
        let display_name = "Context";
        let description = "";
        let node_id = NodeId::new(0, 12502);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11436), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11436), &node_id);
    }
    {
        // Variable
        let browse_name = "Progress";
        let display_name = "Progress";
        let description = "";
        let node_id = NodeId::new(0, 12503);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11436), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11436), &node_id);
    }
    {
        // Variable
        let browse_name = "StartTime";
        let display_name = "StartTime";
        let description = "";
        let node_id = NodeId::new(0, 2139);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2138), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2138), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentTime";
        let display_name = "CurrentTime";
        let description = "";
        let node_id = NodeId::new(0, 2140);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2138), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2138), &node_id);
    }
    {
        // Variable
        let browse_name = "State";
        let display_name = "State";
        let description = "";
        let node_id = NodeId::new(0, 2141);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(852u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2138), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2138), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildInfo";
        let display_name = "BuildInfo";
        let description = "";
        let node_id = NodeId::new(0, 2142);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(338u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3698), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3699), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3700), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3701), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3702), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3703), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3051), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2138), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2138), &node_id);
    }
    {
        // Variable
        let browse_name = "ProductUri";
        let display_name = "ProductUri";
        let description = "";
        let node_id = NodeId::new(0, 3698);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2142), &node_id);
    }
    {
        // Variable
        let browse_name = "ManufacturerName";
        let display_name = "ManufacturerName";
        let description = "";
        let node_id = NodeId::new(0, 3699);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2142), &node_id);
    }
    {
        // Variable
        let browse_name = "ProductName";
        let display_name = "ProductName";
        let description = "";
        let node_id = NodeId::new(0, 3700);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2142), &node_id);
    }
    {
        // Variable
        let browse_name = "SoftwareVersion";
        let display_name = "SoftwareVersion";
        let description = "";
        let node_id = NodeId::new(0, 3701);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2142), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildNumber";
        let display_name = "BuildNumber";
        let description = "";
        let node_id = NodeId::new(0, 3702);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2142), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildDate";
        let display_name = "BuildDate";
        let description = "";
        let node_id = NodeId::new(0, 3703);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2142), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2142), &node_id);
    }
    {
        // Variable
        let browse_name = "SecondsTillShutdown";
        let display_name = "SecondsTillShutdown";
        let description = "";
        let node_id = NodeId::new(0, 2752);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2138), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2138), &node_id);
    }
    {
        // Variable
        let browse_name = "ShutdownReason";
        let display_name = "ShutdownReason";
        let description = "";
        let node_id = NodeId::new(0, 2753);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2138), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2138), &node_id);
    }
    {
        // Variable
        let browse_name = "ProductUri";
        let display_name = "ProductUri";
        let description = "";
        let node_id = NodeId::new(0, 3052);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3051), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3051), &node_id);
    }
    {
        // Variable
        let browse_name = "ManufacturerName";
        let display_name = "ManufacturerName";
        let description = "";
        let node_id = NodeId::new(0, 3053);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3051), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3051), &node_id);
    }
    {
        // Variable
        let browse_name = "ProductName";
        let display_name = "ProductName";
        let description = "";
        let node_id = NodeId::new(0, 3054);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3051), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3051), &node_id);
    }
    {
        // Variable
        let browse_name = "SoftwareVersion";
        let display_name = "SoftwareVersion";
        let description = "";
        let node_id = NodeId::new(0, 3055);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3051), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3051), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildNumber";
        let display_name = "BuildNumber";
        let description = "";
        let node_id = NodeId::new(0, 3056);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3051), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3051), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildDate";
        let display_name = "BuildDate";
        let description = "";
        let node_id = NodeId::new(0, 3057);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 3051), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3051), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerViewCount";
        let display_name = "ServerViewCount";
        let description = "";
        let node_id = NodeId::new(0, 2151);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSessionCount";
        let display_name = "CurrentSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 2152);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "CumulatedSessionCount";
        let display_name = "CumulatedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 2153);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityRejectedSessionCount";
        let display_name = "SecurityRejectedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 2154);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "RejectedSessionCount";
        let display_name = "RejectedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 2155);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionTimeoutCount";
        let display_name = "SessionTimeoutCount";
        let description = "";
        let node_id = NodeId::new(0, 2156);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionAbortCount";
        let display_name = "SessionAbortCount";
        let description = "";
        let node_id = NodeId::new(0, 2157);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishingIntervalCount";
        let display_name = "PublishingIntervalCount";
        let description = "";
        let node_id = NodeId::new(0, 2159);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSubscriptionCount";
        let display_name = "CurrentSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 2160);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "CumulatedSubscriptionCount";
        let display_name = "CumulatedSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 2161);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityRejectedRequestsCount";
        let display_name = "SecurityRejectedRequestsCount";
        let description = "";
        let node_id = NodeId::new(0, 2162);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "RejectedRequestsCount";
        let display_name = "RejectedRequestsCount";
        let description = "";
        let node_id = NodeId::new(0, 2163);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2150), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2150), &node_id);
    }
    {
        // Variable
        let browse_name = "SamplingIntervalDiagnostics";
        let display_name = "SamplingIntervalDiagnostics";
        let description = "";
        let node_id = NodeId::new(0, 12779);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(856u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12780), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12781), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12782), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12783), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2165), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 83), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2164), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2164), &node_id);
    }
    {
        // Variable
        let browse_name = "SamplingInterval";
        let display_name = "SamplingInterval";
        let description = "";
        let node_id = NodeId::new(0, 12780);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12779), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12779), &node_id);
    }
    {
        // Variable
        let browse_name = "SampledMonitoredItemsCount";
        let display_name = "SampledMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12781);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12779), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12779), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxSampledMonitoredItemsCount";
        let display_name = "MaxSampledMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12782);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12779), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12779), &node_id);
    }
    {
        // Variable
        let browse_name = "DisabledMonitoredItemsSamplingCount";
        let display_name = "DisabledMonitoredItemsSamplingCount";
        let description = "";
        let node_id = NodeId::new(0, 12783);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12779), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12779), &node_id);
    }
    {
        // Variable
        let browse_name = "SamplingInterval";
        let display_name = "SamplingInterval";
        let description = "";
        let node_id = NodeId::new(0, 2166);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2165), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2165), &node_id);
    }
    {
        // Variable
        let browse_name = "SampledMonitoredItemsCount";
        let display_name = "SampledMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 11697);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2165), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2165), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxSampledMonitoredItemsCount";
        let display_name = "MaxSampledMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 11698);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2165), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2165), &node_id);
    }
    {
        // Variable
        let browse_name = "DisabledMonitoredItemsSamplingCount";
        let display_name = "DisabledMonitoredItemsSamplingCount";
        let description = "";
        let node_id = NodeId::new(0, 11699);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2165), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2165), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionDiagnostics";
        let display_name = "SubscriptionDiagnostics";
        let description = "";
        let node_id = NodeId::new(0, 12784);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12785), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12786), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12787), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12788), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12789), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12790), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12791), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12792), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12793), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12794), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12795), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12796), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12797), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12798), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12799), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12800), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12801), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12802), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12803), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12804), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12805), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12806), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12807), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12808), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12809), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12810), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12811), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12812), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12813), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12814), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12815), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2172), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 83), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2171), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2171), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 12785);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionId";
        let display_name = "SubscriptionId";
        let description = "";
        let node_id = NodeId::new(0, 12786);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "Priority";
        let display_name = "Priority";
        let description = "";
        let node_id = NodeId::new(0, 12787);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Byte, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishingInterval";
        let display_name = "PublishingInterval";
        let description = "";
        let node_id = NodeId::new(0, 12788);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Double, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxKeepAliveCount";
        let display_name = "MaxKeepAliveCount";
        let description = "";
        let node_id = NodeId::new(0, 12789);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxLifetimeCount";
        let display_name = "MaxLifetimeCount";
        let description = "";
        let node_id = NodeId::new(0, 12790);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNotificationsPerPublish";
        let display_name = "MaxNotificationsPerPublish";
        let description = "";
        let node_id = NodeId::new(0, 12791);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishingEnabled";
        let display_name = "PublishingEnabled";
        let description = "";
        let node_id = NodeId::new(0, 12792);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifyCount";
        let display_name = "ModifyCount";
        let description = "";
        let node_id = NodeId::new(0, 12793);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "EnableCount";
        let display_name = "EnableCount";
        let description = "";
        let node_id = NodeId::new(0, 12794);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "DisableCount";
        let display_name = "DisableCount";
        let description = "";
        let node_id = NodeId::new(0, 12795);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishRequestCount";
        let display_name = "RepublishRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12796);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishMessageRequestCount";
        let display_name = "RepublishMessageRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12797);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishMessageCount";
        let display_name = "RepublishMessageCount";
        let description = "";
        let node_id = NodeId::new(0, 12798);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferRequestCount";
        let display_name = "TransferRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12799);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferredToAltClientCount";
        let display_name = "TransferredToAltClientCount";
        let description = "";
        let node_id = NodeId::new(0, 12800);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferredToSameClientCount";
        let display_name = "TransferredToSameClientCount";
        let description = "";
        let node_id = NodeId::new(0, 12801);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishRequestCount";
        let display_name = "PublishRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12802);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "DataChangeNotificationsCount";
        let display_name = "DataChangeNotificationsCount";
        let description = "";
        let node_id = NodeId::new(0, 12803);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "EventNotificationsCount";
        let display_name = "EventNotificationsCount";
        let description = "";
        let node_id = NodeId::new(0, 12804);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "NotificationsCount";
        let display_name = "NotificationsCount";
        let description = "";
        let node_id = NodeId::new(0, 12805);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "LatePublishRequestCount";
        let display_name = "LatePublishRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12806);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentKeepAliveCount";
        let display_name = "CurrentKeepAliveCount";
        let description = "";
        let node_id = NodeId::new(0, 12807);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentLifetimeCount";
        let display_name = "CurrentLifetimeCount";
        let description = "";
        let node_id = NodeId::new(0, 12808);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "UnacknowledgedMessageCount";
        let display_name = "UnacknowledgedMessageCount";
        let description = "";
        let node_id = NodeId::new(0, 12809);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "DiscardedMessageCount";
        let display_name = "DiscardedMessageCount";
        let description = "";
        let node_id = NodeId::new(0, 12810);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "MonitoredItemCount";
        let display_name = "MonitoredItemCount";
        let description = "";
        let node_id = NodeId::new(0, 12811);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "DisabledMonitoredItemCount";
        let display_name = "DisabledMonitoredItemCount";
        let description = "";
        let node_id = NodeId::new(0, 12812);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "MonitoringQueueOverflowCount";
        let display_name = "MonitoringQueueOverflowCount";
        let description = "";
        let node_id = NodeId::new(0, 12813);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "NextSequenceNumber";
        let display_name = "NextSequenceNumber";
        let description = "";
        let node_id = NodeId::new(0, 12814);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "EventQueueOverFlowCount";
        let display_name = "EventQueueOverFlowCount";
        let description = "";
        let node_id = NodeId::new(0, 12815);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12784), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12784), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 2173);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionId";
        let display_name = "SubscriptionId";
        let description = "";
        let node_id = NodeId::new(0, 2174);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "Priority";
        let display_name = "Priority";
        let description = "";
        let node_id = NodeId::new(0, 2175);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Byte, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishingInterval";
        let display_name = "PublishingInterval";
        let description = "";
        let node_id = NodeId::new(0, 2176);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Double, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxKeepAliveCount";
        let display_name = "MaxKeepAliveCount";
        let description = "";
        let node_id = NodeId::new(0, 2177);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxLifetimeCount";
        let display_name = "MaxLifetimeCount";
        let description = "";
        let node_id = NodeId::new(0, 8888);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNotificationsPerPublish";
        let display_name = "MaxNotificationsPerPublish";
        let description = "";
        let node_id = NodeId::new(0, 2179);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishingEnabled";
        let display_name = "PublishingEnabled";
        let description = "";
        let node_id = NodeId::new(0, 2180);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifyCount";
        let display_name = "ModifyCount";
        let description = "";
        let node_id = NodeId::new(0, 2181);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "EnableCount";
        let display_name = "EnableCount";
        let description = "";
        let node_id = NodeId::new(0, 2182);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "DisableCount";
        let display_name = "DisableCount";
        let description = "";
        let node_id = NodeId::new(0, 2183);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishRequestCount";
        let display_name = "RepublishRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 2184);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishMessageRequestCount";
        let display_name = "RepublishMessageRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 2185);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishMessageCount";
        let display_name = "RepublishMessageCount";
        let description = "";
        let node_id = NodeId::new(0, 2186);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferRequestCount";
        let display_name = "TransferRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 2187);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferredToAltClientCount";
        let display_name = "TransferredToAltClientCount";
        let description = "";
        let node_id = NodeId::new(0, 2188);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferredToSameClientCount";
        let display_name = "TransferredToSameClientCount";
        let description = "";
        let node_id = NodeId::new(0, 2189);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishRequestCount";
        let display_name = "PublishRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 2190);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "DataChangeNotificationsCount";
        let display_name = "DataChangeNotificationsCount";
        let description = "";
        let node_id = NodeId::new(0, 2191);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "EventNotificationsCount";
        let display_name = "EventNotificationsCount";
        let description = "";
        let node_id = NodeId::new(0, 2998);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "NotificationsCount";
        let display_name = "NotificationsCount";
        let description = "";
        let node_id = NodeId::new(0, 2193);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "LatePublishRequestCount";
        let display_name = "LatePublishRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 8889);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentKeepAliveCount";
        let display_name = "CurrentKeepAliveCount";
        let description = "";
        let node_id = NodeId::new(0, 8890);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentLifetimeCount";
        let display_name = "CurrentLifetimeCount";
        let description = "";
        let node_id = NodeId::new(0, 8891);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "UnacknowledgedMessageCount";
        let display_name = "UnacknowledgedMessageCount";
        let description = "";
        let node_id = NodeId::new(0, 8892);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "DiscardedMessageCount";
        let display_name = "DiscardedMessageCount";
        let description = "";
        let node_id = NodeId::new(0, 8893);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "MonitoredItemCount";
        let display_name = "MonitoredItemCount";
        let description = "";
        let node_id = NodeId::new(0, 8894);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "DisabledMonitoredItemCount";
        let display_name = "DisabledMonitoredItemCount";
        let description = "";
        let node_id = NodeId::new(0, 8895);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "MonitoringQueueOverflowCount";
        let display_name = "MonitoringQueueOverflowCount";
        let description = "";
        let node_id = NodeId::new(0, 8896);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "NextSequenceNumber";
        let display_name = "NextSequenceNumber";
        let description = "";
        let node_id = NodeId::new(0, 8897);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "EventQueueOverFlowCount";
        let display_name = "EventQueueOverFlowCount";
        let description = "";
        let node_id = NodeId::new(0, 8902);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2172), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2172), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnostics";
        let display_name = "SessionDiagnostics";
        let description = "";
        let node_id = NodeId::new(0, 12816);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12817), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12818), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12819), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12820), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12821), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12822), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12823), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12824), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12825), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12826), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12827), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12828), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12829), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12830), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12831), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12832), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12833), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12834), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12835), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12836), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12837), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12838), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12839), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12840), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12841), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12842), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12843), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12844), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12845), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12846), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12847), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12848), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12849), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12850), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12851), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12852), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12853), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12854), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12855), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12856), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12857), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12858), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12859), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2197), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 83), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2196), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2196), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 12817);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionName";
        let display_name = "SessionName";
        let description = "";
        let node_id = NodeId::new(0, 12818);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientDescription";
        let display_name = "ClientDescription";
        let description = "";
        let node_id = NodeId::new(0, 12819);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(308u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerUri";
        let display_name = "ServerUri";
        let description = "";
        let node_id = NodeId::new(0, 12820);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointUrl";
        let display_name = "EndpointUrl";
        let description = "";
        let node_id = NodeId::new(0, 12821);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "LocaleIds";
        let display_name = "LocaleIds";
        let description = "";
        let node_id = NodeId::new(0, 12822);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "ActualSessionTimeout";
        let display_name = "ActualSessionTimeout";
        let description = "";
        let node_id = NodeId::new(0, 12823);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxResponseMessageSize";
        let display_name = "MaxResponseMessageSize";
        let description = "";
        let node_id = NodeId::new(0, 12824);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientConnectionTime";
        let display_name = "ClientConnectionTime";
        let description = "";
        let node_id = NodeId::new(0, 12825);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientLastContactTime";
        let display_name = "ClientLastContactTime";
        let description = "";
        let node_id = NodeId::new(0, 12826);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSubscriptionsCount";
        let display_name = "CurrentSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 12827);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentMonitoredItemsCount";
        let display_name = "CurrentMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12828);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentPublishRequestsInQueue";
        let display_name = "CurrentPublishRequestsInQueue";
        let description = "";
        let node_id = NodeId::new(0, 12829);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "TotalRequestCount";
        let display_name = "TotalRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12830);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "UnauthorizedRequestCount";
        let display_name = "UnauthorizedRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 12831);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "ReadCount";
        let display_name = "ReadCount";
        let description = "";
        let node_id = NodeId::new(0, 12832);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryReadCount";
        let display_name = "HistoryReadCount";
        let description = "";
        let node_id = NodeId::new(0, 12833);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "WriteCount";
        let display_name = "WriteCount";
        let description = "";
        let node_id = NodeId::new(0, 12834);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryUpdateCount";
        let display_name = "HistoryUpdateCount";
        let description = "";
        let node_id = NodeId::new(0, 12835);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "CallCount";
        let display_name = "CallCount";
        let description = "";
        let node_id = NodeId::new(0, 12836);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "CreateMonitoredItemsCount";
        let display_name = "CreateMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12837);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifyMonitoredItemsCount";
        let display_name = "ModifyMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12838);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "SetMonitoringModeCount";
        let display_name = "SetMonitoringModeCount";
        let description = "";
        let node_id = NodeId::new(0, 12839);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "SetTriggeringCount";
        let display_name = "SetTriggeringCount";
        let description = "";
        let node_id = NodeId::new(0, 12840);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteMonitoredItemsCount";
        let display_name = "DeleteMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 12841);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "CreateSubscriptionCount";
        let display_name = "CreateSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 12842);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifySubscriptionCount";
        let display_name = "ModifySubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 12843);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "SetPublishingModeCount";
        let display_name = "SetPublishingModeCount";
        let description = "";
        let node_id = NodeId::new(0, 12844);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishCount";
        let display_name = "PublishCount";
        let description = "";
        let node_id = NodeId::new(0, 12845);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishCount";
        let display_name = "RepublishCount";
        let description = "";
        let node_id = NodeId::new(0, 12846);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferSubscriptionsCount";
        let display_name = "TransferSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 12847);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteSubscriptionsCount";
        let display_name = "DeleteSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 12848);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "AddNodesCount";
        let display_name = "AddNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 12849);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "AddReferencesCount";
        let display_name = "AddReferencesCount";
        let description = "";
        let node_id = NodeId::new(0, 12850);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteNodesCount";
        let display_name = "DeleteNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 12851);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteReferencesCount";
        let display_name = "DeleteReferencesCount";
        let description = "";
        let node_id = NodeId::new(0, 12852);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "BrowseCount";
        let display_name = "BrowseCount";
        let description = "";
        let node_id = NodeId::new(0, 12853);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "BrowseNextCount";
        let display_name = "BrowseNextCount";
        let description = "";
        let node_id = NodeId::new(0, 12854);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "TranslateBrowsePathsToNodeIdsCount";
        let display_name = "TranslateBrowsePathsToNodeIdsCount";
        let description = "";
        let node_id = NodeId::new(0, 12855);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "QueryFirstCount";
        let display_name = "QueryFirstCount";
        let description = "";
        let node_id = NodeId::new(0, 12856);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "QueryNextCount";
        let display_name = "QueryNextCount";
        let description = "";
        let node_id = NodeId::new(0, 12857);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "RegisterNodesCount";
        let display_name = "RegisterNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 12858);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "UnregisterNodesCount";
        let display_name = "UnregisterNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 12859);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12816), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12816), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 2198);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionName";
        let display_name = "SessionName";
        let description = "";
        let node_id = NodeId::new(0, 2199);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientDescription";
        let display_name = "ClientDescription";
        let description = "";
        let node_id = NodeId::new(0, 2200);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(308u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerUri";
        let display_name = "ServerUri";
        let description = "";
        let node_id = NodeId::new(0, 2201);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointUrl";
        let display_name = "EndpointUrl";
        let description = "";
        let node_id = NodeId::new(0, 2202);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "LocaleIds";
        let display_name = "LocaleIds";
        let description = "";
        let node_id = NodeId::new(0, 2203);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "ActualSessionTimeout";
        let display_name = "ActualSessionTimeout";
        let description = "";
        let node_id = NodeId::new(0, 2204);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxResponseMessageSize";
        let display_name = "MaxResponseMessageSize";
        let description = "";
        let node_id = NodeId::new(0, 3050);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientConnectionTime";
        let display_name = "ClientConnectionTime";
        let description = "";
        let node_id = NodeId::new(0, 2205);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientLastContactTime";
        let display_name = "ClientLastContactTime";
        let description = "";
        let node_id = NodeId::new(0, 2206);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSubscriptionsCount";
        let display_name = "CurrentSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 2207);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentMonitoredItemsCount";
        let display_name = "CurrentMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 2208);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentPublishRequestsInQueue";
        let display_name = "CurrentPublishRequestsInQueue";
        let description = "";
        let node_id = NodeId::new(0, 2209);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "TotalRequestCount";
        let display_name = "TotalRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 8900);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "UnauthorizedRequestCount";
        let display_name = "UnauthorizedRequestCount";
        let description = "";
        let node_id = NodeId::new(0, 11892);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "ReadCount";
        let display_name = "ReadCount";
        let description = "";
        let node_id = NodeId::new(0, 2217);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryReadCount";
        let display_name = "HistoryReadCount";
        let description = "";
        let node_id = NodeId::new(0, 2218);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "WriteCount";
        let display_name = "WriteCount";
        let description = "";
        let node_id = NodeId::new(0, 2219);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryUpdateCount";
        let display_name = "HistoryUpdateCount";
        let description = "";
        let node_id = NodeId::new(0, 2220);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "CallCount";
        let display_name = "CallCount";
        let description = "";
        let node_id = NodeId::new(0, 2221);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "CreateMonitoredItemsCount";
        let display_name = "CreateMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 2222);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifyMonitoredItemsCount";
        let display_name = "ModifyMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 2223);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "SetMonitoringModeCount";
        let display_name = "SetMonitoringModeCount";
        let description = "";
        let node_id = NodeId::new(0, 2224);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "SetTriggeringCount";
        let display_name = "SetTriggeringCount";
        let description = "";
        let node_id = NodeId::new(0, 2225);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteMonitoredItemsCount";
        let display_name = "DeleteMonitoredItemsCount";
        let description = "";
        let node_id = NodeId::new(0, 2226);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "CreateSubscriptionCount";
        let display_name = "CreateSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 2227);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "ModifySubscriptionCount";
        let display_name = "ModifySubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 2228);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "SetPublishingModeCount";
        let display_name = "SetPublishingModeCount";
        let description = "";
        let node_id = NodeId::new(0, 2229);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishCount";
        let display_name = "PublishCount";
        let description = "";
        let node_id = NodeId::new(0, 2230);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "RepublishCount";
        let display_name = "RepublishCount";
        let description = "";
        let node_id = NodeId::new(0, 2231);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "TransferSubscriptionsCount";
        let display_name = "TransferSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 2232);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteSubscriptionsCount";
        let display_name = "DeleteSubscriptionsCount";
        let description = "";
        let node_id = NodeId::new(0, 2233);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "AddNodesCount";
        let display_name = "AddNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 2234);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "AddReferencesCount";
        let display_name = "AddReferencesCount";
        let description = "";
        let node_id = NodeId::new(0, 2235);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteNodesCount";
        let display_name = "DeleteNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 2236);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteReferencesCount";
        let display_name = "DeleteReferencesCount";
        let description = "";
        let node_id = NodeId::new(0, 2237);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "BrowseCount";
        let display_name = "BrowseCount";
        let description = "";
        let node_id = NodeId::new(0, 2238);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "BrowseNextCount";
        let display_name = "BrowseNextCount";
        let description = "";
        let node_id = NodeId::new(0, 2239);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "TranslateBrowsePathsToNodeIdsCount";
        let display_name = "TranslateBrowsePathsToNodeIdsCount";
        let description = "";
        let node_id = NodeId::new(0, 2240);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "QueryFirstCount";
        let display_name = "QueryFirstCount";
        let description = "";
        let node_id = NodeId::new(0, 2241);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "QueryNextCount";
        let display_name = "QueryNextCount";
        let description = "";
        let node_id = NodeId::new(0, 2242);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "RegisterNodesCount";
        let display_name = "RegisterNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 2730);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "UnregisterNodesCount";
        let display_name = "UnregisterNodesCount";
        let description = "";
        let node_id = NodeId::new(0, 2731);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2197), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2197), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnostics";
        let display_name = "SessionSecurityDiagnostics";
        let description = "";
        let node_id = NodeId::new(0, 12860);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12861), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12862), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12863), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12864), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12865), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12866), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12867), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12868), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12869), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2244), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 83), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2243), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2243), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 12861);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserIdOfSession";
        let display_name = "ClientUserIdOfSession";
        let description = "";
        let node_id = NodeId::new(0, 12862);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserIdHistory";
        let display_name = "ClientUserIdHistory";
        let description = "";
        let node_id = NodeId::new(0, 12863);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "AuthenticationMechanism";
        let display_name = "AuthenticationMechanism";
        let description = "";
        let node_id = NodeId::new(0, 12864);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "Encoding";
        let display_name = "Encoding";
        let description = "";
        let node_id = NodeId::new(0, 12865);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "TransportProtocol";
        let display_name = "TransportProtocol";
        let description = "";
        let node_id = NodeId::new(0, 12866);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityMode";
        let display_name = "SecurityMode";
        let description = "";
        let node_id = NodeId::new(0, 12867);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityPolicyUri";
        let display_name = "SecurityPolicyUri";
        let description = "";
        let node_id = NodeId::new(0, 12868);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientCertificate";
        let display_name = "ClientCertificate";
        let description = "";
        let node_id = NodeId::new(0, 12869);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 12860), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 12860), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionId";
        let display_name = "SessionId";
        let description = "";
        let node_id = NodeId::new(0, 2245);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserIdOfSession";
        let display_name = "ClientUserIdOfSession";
        let description = "";
        let node_id = NodeId::new(0, 2246);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientUserIdHistory";
        let display_name = "ClientUserIdHistory";
        let description = "";
        let node_id = NodeId::new(0, 2247);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "AuthenticationMechanism";
        let display_name = "AuthenticationMechanism";
        let description = "";
        let node_id = NodeId::new(0, 2248);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "Encoding";
        let display_name = "Encoding";
        let description = "";
        let node_id = NodeId::new(0, 2249);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "TransportProtocol";
        let display_name = "TransportProtocol";
        let description = "";
        let node_id = NodeId::new(0, 2250);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityMode";
        let display_name = "SecurityMode";
        let description = "";
        let node_id = NodeId::new(0, 2251);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityPolicyUri";
        let display_name = "SecurityPolicyUri";
        let description = "";
        let node_id = NodeId::new(0, 2252);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "ClientCertificate";
        let display_name = "ClientCertificate";
        let description = "";
        let node_id = NodeId::new(0, 3058);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2244), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2244), &node_id);
    }
    {
        // Variable
        let browse_name = "OptionSetValues";
        let display_name = "OptionSetValues";
        let description = "";
        let node_id = NodeId::new(0, 11488);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11487), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11487), &node_id);
    }
    {
        // Variable
        let browse_name = "BitMask";
        let display_name = "BitMask";
        let description = "";
        let node_id = NodeId::new(0, 11701);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11487), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11487), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerArray";
        let display_name = "ServerArray";
        let description = "The list of server URIs used by the server.";
        let node_id = NodeId::new(0, 2254);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceArray";
        let display_name = "NamespaceArray";
        let description = "The list of namespace URIs used by the server.";
        let node_id = NodeId::new(0, 2255);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerStatus";
        let display_name = "ServerStatus";
        let description = "The current status of the server.";
        let node_id = NodeId::new(0, 2256);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(862u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2257), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2258), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2259), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2260), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2992), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2993), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2138), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Variable
        let browse_name = "StartTime";
        let display_name = "StartTime";
        let description = "";
        let node_id = NodeId::new(0, 2257);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2256), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2256), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentTime";
        let display_name = "CurrentTime";
        let description = "";
        let node_id = NodeId::new(0, 2258);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2256), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2256), &node_id);
    }
    {
        // Variable
        let browse_name = "State";
        let display_name = "State";
        let description = "";
        let node_id = NodeId::new(0, 2259);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(852u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2256), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2256), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildInfo";
        let display_name = "BuildInfo";
        let description = "";
        let node_id = NodeId::new(0, 2260);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(338u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2262), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2263), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2261), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2264), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2265), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2266), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3051), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2256), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2256), &node_id);
    }
    {
        // Variable
        let browse_name = "ProductUri";
        let display_name = "ProductUri";
        let description = "";
        let node_id = NodeId::new(0, 2262);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2260), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2260), &node_id);
    }
    {
        // Variable
        let browse_name = "ManufacturerName";
        let display_name = "ManufacturerName";
        let description = "";
        let node_id = NodeId::new(0, 2263);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2260), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2260), &node_id);
    }
    {
        // Variable
        let browse_name = "ProductName";
        let display_name = "ProductName";
        let description = "";
        let node_id = NodeId::new(0, 2261);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2260), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2260), &node_id);
    }
    {
        // Variable
        let browse_name = "SoftwareVersion";
        let display_name = "SoftwareVersion";
        let description = "";
        let node_id = NodeId::new(0, 2264);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2260), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2260), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildNumber";
        let display_name = "BuildNumber";
        let description = "";
        let node_id = NodeId::new(0, 2265);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2260), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2260), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildDate";
        let display_name = "BuildDate";
        let description = "";
        let node_id = NodeId::new(0, 2266);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2260), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2260), &node_id);
    }
    {
        // Variable
        let browse_name = "SecondsTillShutdown";
        let display_name = "SecondsTillShutdown";
        let description = "";
        let node_id = NodeId::new(0, 2992);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2256), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2256), &node_id);
    }
    {
        // Variable
        let browse_name = "ShutdownReason";
        let display_name = "ShutdownReason";
        let description = "";
        let node_id = NodeId::new(0, 2993);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2256), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2256), &node_id);
    }
    {
        // Variable
        let browse_name = "ServiceLevel";
        let display_name = "ServiceLevel";
        let description = "A value indicating the level of service the server can provide. 255 indicates the best.";
        let node_id = NodeId::new(0, 2267);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Byte, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Variable
        let browse_name = "Auditing";
        let display_name = "Auditing";
        let description = "A flag indicating whether the server is currently generating audit events.";
        let node_id = NodeId::new(0, 2994);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Variable
        let browse_name = "EstimatedReturnTime";
        let display_name = "EstimatedReturnTime";
        let description = "Indicates the time at which the Server is expected to be available in the state RUNNING.";
        let node_id = NodeId::new(0, 12885);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerProfileArray";
        let display_name = "ServerProfileArray";
        let description = "A list of profiles supported by the server.";
        let node_id = NodeId::new(0, 2269);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "LocaleIdArray";
        let display_name = "LocaleIdArray";
        let description = "A list of locales supported by the server.";
        let node_id = NodeId::new(0, 2271);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "MinSupportedSampleRate";
        let display_name = "MinSupportedSampleRate";
        let description = "The minimum sampling interval supported by the server.";
        let node_id = NodeId::new(0, 2272);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxBrowseContinuationPoints";
        let display_name = "MaxBrowseContinuationPoints";
        let description = "The maximum number of continuation points for Browse operations per session.";
        let node_id = NodeId::new(0, 2735);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxQueryContinuationPoints";
        let display_name = "MaxQueryContinuationPoints";
        let description = "The maximum number of continuation points for Query operations per session.";
        let node_id = NodeId::new(0, 2736);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxHistoryContinuationPoints";
        let display_name = "MaxHistoryContinuationPoints";
        let description = "The maximum number of continuation points for ReadHistory operations per session.";
        let node_id = NodeId::new(0, 2737);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "SoftwareCertificates";
        let display_name = "SoftwareCertificates";
        let description = "The software certificates owned by the server.";
        let node_id = NodeId::new(0, 3704);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(344u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxArrayLength";
        let display_name = "MaxArrayLength";
        let description = "The maximum length for an array value supported by the server.";
        let node_id = NodeId::new(0, 11702);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxStringLength";
        let display_name = "MaxStringLength";
        let description = "The maximum length for a string value supported by the server.";
        let node_id = NodeId::new(0, 11703);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxByteStringLength";
        let display_name = "MaxByteStringLength";
        let description = "The maximum length for a byte string value supported by the server.";
        let node_id = NodeId::new(0, 12911);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2268), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2268), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerRead";
        let display_name = "MaxNodesPerRead";
        let description = "The maximum number of operations in a single Read request.";
        let node_id = NodeId::new(0, 11705);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerHistoryReadData";
        let display_name = "MaxNodesPerHistoryReadData";
        let description = "The maximum number of operations in a single data HistoryRead request.";
        let node_id = NodeId::new(0, 12165);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerHistoryReadEvents";
        let display_name = "MaxNodesPerHistoryReadEvents";
        let description = "The maximum number of operations in a single event HistoryRead request.";
        let node_id = NodeId::new(0, 12166);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerWrite";
        let display_name = "MaxNodesPerWrite";
        let description = "The maximum number of operations in a single Write request.";
        let node_id = NodeId::new(0, 11707);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerHistoryUpdateData";
        let display_name = "MaxNodesPerHistoryUpdateData";
        let description = "The maximum number of operations in a single data HistoryUpdate request.";
        let node_id = NodeId::new(0, 12167);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerHistoryUpdateEvents";
        let display_name = "MaxNodesPerHistoryUpdateEvents";
        let description = "The maximum number of operations in a single event HistoryUpdate request.";
        let node_id = NodeId::new(0, 12168);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerMethodCall";
        let display_name = "MaxNodesPerMethodCall";
        let description = "The maximum number of operations in a single Call request.";
        let node_id = NodeId::new(0, 11709);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerBrowse";
        let display_name = "MaxNodesPerBrowse";
        let description = "The maximum number of operations in a single Browse request.";
        let node_id = NodeId::new(0, 11710);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerRegisterNodes";
        let display_name = "MaxNodesPerRegisterNodes";
        let description = "The maximum number of operations in a single RegisterNodes request.";
        let node_id = NodeId::new(0, 11711);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
        let display_name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
        let description = "The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.";
        let node_id = NodeId::new(0, 11712);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxNodesPerNodeManagement";
        let display_name = "MaxNodesPerNodeManagement";
        let description = "The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.";
        let node_id = NodeId::new(0, 11713);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "MaxMonitoredItemsPerCall";
        let display_name = "MaxMonitoredItemsPerCall";
        let description = "The maximum number of operations in a single MonitoredItem related request.";
        let node_id = NodeId::new(0, 11714);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11704), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11704), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerDiagnosticsSummary";
        let display_name = "ServerDiagnosticsSummary";
        let description = "A summary of server level diagnostics.";
        let node_id = NodeId::new(0, 2275);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(859u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2276), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2277), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2278), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2279), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3705), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2281), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2282), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2284), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2285), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2286), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2287), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2288), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2150), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2274), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2274), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerViewCount";
        let display_name = "ServerViewCount";
        let description = "";
        let node_id = NodeId::new(0, 2276);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSessionCount";
        let display_name = "CurrentSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 2277);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "CumulatedSessionCount";
        let display_name = "CumulatedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 2278);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityRejectedSessionCount";
        let display_name = "SecurityRejectedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 2279);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "RejectedSessionCount";
        let display_name = "RejectedSessionCount";
        let description = "";
        let node_id = NodeId::new(0, 3705);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionTimeoutCount";
        let display_name = "SessionTimeoutCount";
        let description = "";
        let node_id = NodeId::new(0, 2281);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionAbortCount";
        let display_name = "SessionAbortCount";
        let description = "";
        let node_id = NodeId::new(0, 2282);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "PublishingIntervalCount";
        let display_name = "PublishingIntervalCount";
        let description = "";
        let node_id = NodeId::new(0, 2284);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentSubscriptionCount";
        let display_name = "CurrentSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 2285);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "CumulatedSubscriptionCount";
        let display_name = "CumulatedSubscriptionCount";
        let description = "";
        let node_id = NodeId::new(0, 2286);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "SecurityRejectedRequestsCount";
        let display_name = "SecurityRejectedRequestsCount";
        let description = "";
        let node_id = NodeId::new(0, 2287);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "RejectedRequestsCount";
        let display_name = "RejectedRequestsCount";
        let description = "";
        let node_id = NodeId::new(0, 2288);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2275), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2275), &node_id);
    }
    {
        // Variable
        let browse_name = "SamplingIntervalDiagnosticsArray";
        let display_name = "SamplingIntervalDiagnosticsArray";
        let description = "A list of diagnostics for each sampling interval supported by the server.";
        let node_id = NodeId::new(0, 2289);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(856u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2164), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2274), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2274), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionDiagnosticsArray";
        let display_name = "SubscriptionDiagnosticsArray";
        let description = "A list of diagnostics for each active subscription.";
        let node_id = NodeId::new(0, 2290);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2274), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2274), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnosticsArray";
        let display_name = "SessionDiagnosticsArray";
        let description = "A list of diagnostics for each active session.";
        let node_id = NodeId::new(0, 3707);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 3706), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3706), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnosticsArray";
        let display_name = "SessionSecurityDiagnosticsArray";
        let description = "A list of security related diagnostics for each active session.";
        let node_id = NodeId::new(0, 3708);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 3706), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 3706), &node_id);
    }
    {
        // Variable
        let browse_name = "EnabledFlag";
        let display_name = "EnabledFlag";
        let description = "If TRUE the diagnostics collection is enabled.";
        let node_id = NodeId::new(0, 2294);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2274), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2274), &node_id);
    }
    {
        // Variable
        let browse_name = "RedundancySupport";
        let display_name = "RedundancySupport";
        let description = "Indicates what style of redundancy is supported by the server.";
        let node_id = NodeId::new(0, 3709);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(851u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2296), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2296), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentServerId";
        let display_name = "CurrentServerId";
        let description = "";
        let node_id = NodeId::new(0, 11312);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2296), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2296), &node_id);
    }
    {
        // Variable
        let browse_name = "RedundantServerArray";
        let display_name = "RedundantServerArray";
        let description = "";
        let node_id = NodeId::new(0, 11313);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(853u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2296), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2296), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerUriArray";
        let display_name = "ServerUriArray";
        let description = "";
        let node_id = NodeId::new(0, 11314);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2296), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2296), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerNetworkGroups";
        let display_name = "ServerNetworkGroups";
        let description = "";
        let node_id = NodeId::new(0, 14415);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(11944u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 2296), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2296), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceUri";
        let display_name = "NamespaceUri";
        let description = "The URI of the namespace.";
        let node_id = NodeId::new(0, 15183);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 15182), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 15182), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespaceVersion";
        let display_name = "NamespaceVersion";
        let description = "The human readable string representing version of the namespace.";
        let node_id = NodeId::new(0, 15184);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 15182), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 15182), &node_id);
    }
    {
        // Variable
        let browse_name = "NamespacePublicationDate";
        let display_name = "NamespacePublicationDate";
        let description = "The publication date for the namespace.";
        let node_id = NodeId::new(0, 15185);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 15182), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 15182), &node_id);
    }
    {
        // Variable
        let browse_name = "IsNamespaceSubset";
        let display_name = "IsNamespaceSubset";
        let description = "If TRUE then the server only supports a subset of the namespace.";
        let node_id = NodeId::new(0, 15186);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 15182), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 15182), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticNodeIdTypes";
        let display_name = "StaticNodeIdTypes";
        let description = "A list of IdTypes for nodes which are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 15187);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(256u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 15182), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 15182), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticNumericNodeIdRange";
        let display_name = "StaticNumericNodeIdRange";
        let description = "A list of ranges for numeric node ids which are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 15188);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(291u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 15182), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 15182), &node_id);
    }
    {
        // Variable
        let browse_name = "StaticStringNodeIdPattern";
        let display_name = "StaticStringNodeIdPattern";
        let description = "A regular expression which matches string node ids are the same in every server that exposes them.";
        let node_id = NodeId::new(0, 15189);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 15182), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 15182), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11493);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11492), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11492), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 11494);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 11492), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 11492), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 12874);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 12873), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 12873), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 12750);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 12749), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 12749), &node_id);
    }
    {
        // Variable
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let description = "";
        let node_id = NodeId::new(0, 12751);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 12749), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 12749), &node_id);
    }
    {
        // Variable
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let description = "";
        let node_id = NodeId::new(0, 12887);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 12886), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 12886), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentState";
        let display_name = "CurrentState";
        let description = "";
        let node_id = NodeId::new(0, 2769);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3720), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2755), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2299), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2299), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 3720);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2769), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2769), &node_id);
    }
    {
        // Variable
        let browse_name = "LastTransition";
        let display_name = "LastTransition";
        let description = "";
        let node_id = NodeId::new(0, 2770);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3724), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2762), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2299), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2299), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 3724);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2770), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2770), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 2756);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2755), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2755), &node_id);
    }
    {
        // Variable
        let browse_name = "Name";
        let display_name = "Name";
        let description = "";
        let node_id = NodeId::new(0, 2757);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::QualifiedName, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2755), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2755), &node_id);
    }
    {
        // Variable
        let browse_name = "Number";
        let display_name = "Number";
        let description = "";
        let node_id = NodeId::new(0, 2758);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2755), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2755), &node_id);
    }
    {
        // Variable
        let browse_name = "EffectiveDisplayName";
        let display_name = "EffectiveDisplayName";
        let description = "";
        let node_id = NodeId::new(0, 2759);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2755), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2755), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 2763);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2762), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2762), &node_id);
    }
    {
        // Variable
        let browse_name = "Name";
        let display_name = "Name";
        let description = "";
        let node_id = NodeId::new(0, 2764);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::QualifiedName, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2762), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2762), &node_id);
    }
    {
        // Variable
        let browse_name = "Number";
        let display_name = "Number";
        let description = "";
        let node_id = NodeId::new(0, 2765);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2762), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2762), &node_id);
    }
    {
        // Variable
        let browse_name = "TransitionTime";
        let display_name = "TransitionTime";
        let description = "";
        let node_id = NodeId::new(0, 2766);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2762), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2762), &node_id);
    }
    {
        // Variable
        let browse_name = "EffectiveTransitionTime";
        let display_name = "EffectiveTransitionTime";
        let description = "";
        let node_id = NodeId::new(0, 11456);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2762), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2762), &node_id);
    }
    {
        // Variable
        let browse_name = "CurrentState";
        let display_name = "CurrentState";
        let description = "";
        let node_id = NodeId::new(0, 2772);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3728), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2760), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2771), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2771), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 3728);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2772), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2772), &node_id);
    }
    {
        // Variable
        let browse_name = "LastTransition";
        let display_name = "LastTransition";
        let description = "";
        let node_id = NodeId::new(0, 2773);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3732), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2767), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2771), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2771), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 3732);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2773), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2773), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 2761);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2760), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2760), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 2768);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2767), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2767), &node_id);
    }
    {
        // Variable
        let browse_name = "StateNumber";
        let display_name = "StateNumber";
        let description = "";
        let node_id = NodeId::new(0, 2308);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2307), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2307), &node_id);
    }
    {
        // Variable
        let browse_name = "TransitionNumber";
        let display_name = "TransitionNumber";
        let description = "";
        let node_id = NodeId::new(0, 2312);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2310), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2310), &node_id);
    }
    {
        // Variable
        let browse_name = "Transition";
        let display_name = "Transition";
        let description = "";
        let node_id = NodeId::new(0, 2774);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3754), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2762), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2311), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2311), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 3754);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2774), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2774), &node_id);
    }
    {
        // Variable
        let browse_name = "FromState";
        let display_name = "FromState";
        let description = "";
        let node_id = NodeId::new(0, 2775);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3746), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2755), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2311), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2311), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 3746);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2775), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2775), &node_id);
    }
    {
        // Variable
        let browse_name = "ToState";
        let display_name = "ToState";
        let description = "";
        let node_id = NodeId::new(0, 2776);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3750), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2755), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2311), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2311), &node_id);
    }
    {
        // Variable
        let browse_name = "Id";
        let display_name = "Id";
        let description = "";
        let node_id = NodeId::new(0, 3750);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2776), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2776), &node_id);
    }
    {
        // Variable
        let browse_name = "OldStateId";
        let display_name = "OldStateId";
        let description = "";
        let node_id = NodeId::new(0, 2777);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2315), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2315), &node_id);
    }
    {
        // Variable
        let browse_name = "NewStateId";
        let display_name = "NewStateId";
        let description = "";
        let node_id = NodeId::new(0, 2778);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2315), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 2315), &node_id);
    }
    {
        // Variable
        let browse_name = "EnumStrings";
        let display_name = "EnumStrings";
        let description = "";
        let node_id = NodeId::new(0, 7611);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 851), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 851), &node_id);
    }
    {
        // Variable
        let browse_name = "EnumStrings";
        let display_name = "EnumStrings";
        let description = "";
        let node_id = NodeId::new(0, 7612);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 852), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 852), &node_id);
    }
    {
        // Variable
        let browse_name = "Opc.Ua";
        let display_name = "Opc.Ua";
        let description = "";
        let node_id = NodeId::new(0, 8252);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8254), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12677), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8285), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8291), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12759), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12762), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8918), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8300), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12201), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8297), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8303), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8417), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12894), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12897), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8333), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8306), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8309), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8312), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8315), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8318), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8363), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8366), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8369), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8372), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12712), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12715), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8321), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8564), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8567), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8570), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8573), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8576), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8579), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8582), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8639), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8702), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8708), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8711), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8807), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8327), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8843), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11951), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11954), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8846), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8849), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8852), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8855), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8858), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8861), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8294), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8864), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8867), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8870), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8873), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8876), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12175), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12178), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12083), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12086), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8882), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8879), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 92), &node_id, ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 72), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        let browse_name = "NamespaceUri";
        let display_name = "NamespaceUri";
        let description = "A URI that uniquely identifies the dictionary.";
        let node_id = NodeId::new(0, 8254);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "TrustListDataType";
        let display_name = "TrustListDataType";
        let description = "";
        let node_id = NodeId::new(0, 12677);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "Argument";
        let display_name = "Argument";
        let description = "";
        let node_id = NodeId::new(0, 8285);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "EnumValueType";
        let display_name = "EnumValueType";
        let description = "";
        let node_id = NodeId::new(0, 8291);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "OptionSet";
        let display_name = "OptionSet";
        let description = "";
        let node_id = NodeId::new(0, 12759);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "Union";
        let display_name = "Union";
        let description = "";
        let node_id = NodeId::new(0, 12762);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "TimeZoneDataType";
        let display_name = "TimeZoneDataType";
        let description = "";
        let node_id = NodeId::new(0, 8918);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ApplicationDescription";
        let display_name = "ApplicationDescription";
        let description = "";
        let node_id = NodeId::new(0, 8300);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerOnNetwork";
        let display_name = "ServerOnNetwork";
        let description = "";
        let node_id = NodeId::new(0, 12201);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "UserTokenPolicy";
        let display_name = "UserTokenPolicy";
        let description = "";
        let node_id = NodeId::new(0, 8297);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointDescription";
        let display_name = "EndpointDescription";
        let description = "";
        let node_id = NodeId::new(0, 8303);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "RegisteredServer";
        let display_name = "RegisteredServer";
        let description = "";
        let node_id = NodeId::new(0, 8417);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "DiscoveryConfiguration";
        let display_name = "DiscoveryConfiguration";
        let description = "";
        let node_id = NodeId::new(0, 12894);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "MdnsDiscoveryConfiguration";
        let display_name = "MdnsDiscoveryConfiguration";
        let description = "";
        let node_id = NodeId::new(0, 12897);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "SignedSoftwareCertificate";
        let display_name = "SignedSoftwareCertificate";
        let description = "";
        let node_id = NodeId::new(0, 8333);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "UserIdentityToken";
        let display_name = "UserIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 8306);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "AnonymousIdentityToken";
        let display_name = "AnonymousIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 8309);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "UserNameIdentityToken";
        let display_name = "UserNameIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 8312);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "X509IdentityToken";
        let display_name = "X509IdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 8315);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "IssuedIdentityToken";
        let display_name = "IssuedIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 8318);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "AddNodesItem";
        let display_name = "AddNodesItem";
        let description = "";
        let node_id = NodeId::new(0, 8363);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "AddReferencesItem";
        let display_name = "AddReferencesItem";
        let description = "";
        let node_id = NodeId::new(0, 8366);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteNodesItem";
        let display_name = "DeleteNodesItem";
        let description = "";
        let node_id = NodeId::new(0, 8369);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteReferencesItem";
        let display_name = "DeleteReferencesItem";
        let description = "";
        let node_id = NodeId::new(0, 8372);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "RelativePathElement";
        let display_name = "RelativePathElement";
        let description = "";
        let node_id = NodeId::new(0, 12712);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "RelativePath";
        let display_name = "RelativePath";
        let description = "";
        let node_id = NodeId::new(0, 12715);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointConfiguration";
        let display_name = "EndpointConfiguration";
        let description = "";
        let node_id = NodeId::new(0, 8321);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ContentFilterElement";
        let display_name = "ContentFilterElement";
        let description = "";
        let node_id = NodeId::new(0, 8564);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ContentFilter";
        let display_name = "ContentFilter";
        let description = "";
        let node_id = NodeId::new(0, 8567);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "FilterOperand";
        let display_name = "FilterOperand";
        let description = "";
        let node_id = NodeId::new(0, 8570);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ElementOperand";
        let display_name = "ElementOperand";
        let description = "";
        let node_id = NodeId::new(0, 8573);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "LiteralOperand";
        let display_name = "LiteralOperand";
        let description = "";
        let node_id = NodeId::new(0, 8576);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "AttributeOperand";
        let display_name = "AttributeOperand";
        let description = "";
        let node_id = NodeId::new(0, 8579);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "SimpleAttributeOperand";
        let display_name = "SimpleAttributeOperand";
        let description = "";
        let node_id = NodeId::new(0, 8582);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryEvent";
        let display_name = "HistoryEvent";
        let description = "";
        let node_id = NodeId::new(0, 8639);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "MonitoringFilter";
        let display_name = "MonitoringFilter";
        let description = "";
        let node_id = NodeId::new(0, 8702);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "EventFilter";
        let display_name = "EventFilter";
        let description = "";
        let node_id = NodeId::new(0, 8708);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "AggregateConfiguration";
        let display_name = "AggregateConfiguration";
        let description = "";
        let node_id = NodeId::new(0, 8711);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryEventFieldList";
        let display_name = "HistoryEventFieldList";
        let description = "";
        let node_id = NodeId::new(0, 8807);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildInfo";
        let display_name = "BuildInfo";
        let description = "";
        let node_id = NodeId::new(0, 8327);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "RedundantServerDataType";
        let display_name = "RedundantServerDataType";
        let description = "";
        let node_id = NodeId::new(0, 8843);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointUrlListDataType";
        let display_name = "EndpointUrlListDataType";
        let description = "";
        let node_id = NodeId::new(0, 11951);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "NetworkGroupDataType";
        let display_name = "NetworkGroupDataType";
        let description = "";
        let node_id = NodeId::new(0, 11954);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "SamplingIntervalDiagnosticsDataType";
        let display_name = "SamplingIntervalDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 8846);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerDiagnosticsSummaryDataType";
        let display_name = "ServerDiagnosticsSummaryDataType";
        let description = "";
        let node_id = NodeId::new(0, 8849);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerStatusDataType";
        let display_name = "ServerStatusDataType";
        let description = "";
        let node_id = NodeId::new(0, 8852);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnosticsDataType";
        let display_name = "SessionDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 8855);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnosticsDataType";
        let display_name = "SessionSecurityDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 8858);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ServiceCounterDataType";
        let display_name = "ServiceCounterDataType";
        let description = "";
        let node_id = NodeId::new(0, 8861);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "StatusResult";
        let display_name = "StatusResult";
        let description = "";
        let node_id = NodeId::new(0, 8294);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionDiagnosticsDataType";
        let display_name = "SubscriptionDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 8864);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ModelChangeStructureDataType";
        let display_name = "ModelChangeStructureDataType";
        let description = "";
        let node_id = NodeId::new(0, 8867);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "SemanticChangeStructureDataType";
        let display_name = "SemanticChangeStructureDataType";
        let description = "";
        let node_id = NodeId::new(0, 8870);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "Range";
        let display_name = "Range";
        let description = "";
        let node_id = NodeId::new(0, 8873);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "EUInformation";
        let display_name = "EUInformation";
        let description = "";
        let node_id = NodeId::new(0, 8876);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ComplexNumberType";
        let display_name = "ComplexNumberType";
        let description = "";
        let node_id = NodeId::new(0, 12175);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "DoubleComplexNumberType";
        let display_name = "DoubleComplexNumberType";
        let description = "";
        let node_id = NodeId::new(0, 12178);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "AxisInformation";
        let display_name = "AxisInformation";
        let description = "";
        let node_id = NodeId::new(0, 12083);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "XVType";
        let display_name = "XVType";
        let description = "";
        let node_id = NodeId::new(0, 12086);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "ProgramDiagnosticDataType";
        let display_name = "ProgramDiagnosticDataType";
        let description = "";
        let node_id = NodeId::new(0, 8882);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "Annotation";
        let display_name = "Annotation";
        let description = "";
        let node_id = NodeId::new(0, 8879);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 8252), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 8252), &node_id);
    }
    {
        // Variable
        let browse_name = "Opc.Ua";
        let display_name = "Opc.Ua";
        let description = "";
        let node_id = NodeId::new(0, 7617);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7619), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12681), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7650), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7656), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12767), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12770), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8914), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7665), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12213), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7662), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7668), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7782), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12902), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12905), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7698), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7671), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7674), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7677), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7680), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7683), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7728), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7731), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7734), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7737), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12718), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12721), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7686), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7929), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7932), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7935), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7938), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7941), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7944), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7947), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8004), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8067), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8073), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8076), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8172), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7692), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8208), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11959), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11962), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8211), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8214), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8217), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8220), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8223), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8226), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 7659), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8229), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8232), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8235), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8238), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8241), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12183), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12186), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12091), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12094), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8247), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8244), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 93), &node_id, ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 72), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        let browse_name = "NamespaceUri";
        let display_name = "NamespaceUri";
        let description = "A URI that uniquely identifies the dictionary.";
        let node_id = NodeId::new(0, 7619);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "TrustListDataType";
        let display_name = "TrustListDataType";
        let description = "";
        let node_id = NodeId::new(0, 12681);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "Argument";
        let display_name = "Argument";
        let description = "";
        let node_id = NodeId::new(0, 7650);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "EnumValueType";
        let display_name = "EnumValueType";
        let description = "";
        let node_id = NodeId::new(0, 7656);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "OptionSet";
        let display_name = "OptionSet";
        let description = "";
        let node_id = NodeId::new(0, 12767);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "Union";
        let display_name = "Union";
        let description = "";
        let node_id = NodeId::new(0, 12770);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "TimeZoneDataType";
        let display_name = "TimeZoneDataType";
        let description = "";
        let node_id = NodeId::new(0, 8914);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ApplicationDescription";
        let display_name = "ApplicationDescription";
        let description = "";
        let node_id = NodeId::new(0, 7665);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerOnNetwork";
        let display_name = "ServerOnNetwork";
        let description = "";
        let node_id = NodeId::new(0, 12213);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "UserTokenPolicy";
        let display_name = "UserTokenPolicy";
        let description = "";
        let node_id = NodeId::new(0, 7662);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointDescription";
        let display_name = "EndpointDescription";
        let description = "";
        let node_id = NodeId::new(0, 7668);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "RegisteredServer";
        let display_name = "RegisteredServer";
        let description = "";
        let node_id = NodeId::new(0, 7782);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "DiscoveryConfiguration";
        let display_name = "DiscoveryConfiguration";
        let description = "";
        let node_id = NodeId::new(0, 12902);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "MdnsDiscoveryConfiguration";
        let display_name = "MdnsDiscoveryConfiguration";
        let description = "";
        let node_id = NodeId::new(0, 12905);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "SignedSoftwareCertificate";
        let display_name = "SignedSoftwareCertificate";
        let description = "";
        let node_id = NodeId::new(0, 7698);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "UserIdentityToken";
        let display_name = "UserIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 7671);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "AnonymousIdentityToken";
        let display_name = "AnonymousIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 7674);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "UserNameIdentityToken";
        let display_name = "UserNameIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 7677);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "X509IdentityToken";
        let display_name = "X509IdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 7680);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "IssuedIdentityToken";
        let display_name = "IssuedIdentityToken";
        let description = "";
        let node_id = NodeId::new(0, 7683);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "AddNodesItem";
        let display_name = "AddNodesItem";
        let description = "";
        let node_id = NodeId::new(0, 7728);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "AddReferencesItem";
        let display_name = "AddReferencesItem";
        let description = "";
        let node_id = NodeId::new(0, 7731);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteNodesItem";
        let display_name = "DeleteNodesItem";
        let description = "";
        let node_id = NodeId::new(0, 7734);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "DeleteReferencesItem";
        let display_name = "DeleteReferencesItem";
        let description = "";
        let node_id = NodeId::new(0, 7737);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "RelativePathElement";
        let display_name = "RelativePathElement";
        let description = "";
        let node_id = NodeId::new(0, 12718);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "RelativePath";
        let display_name = "RelativePath";
        let description = "";
        let node_id = NodeId::new(0, 12721);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointConfiguration";
        let display_name = "EndpointConfiguration";
        let description = "";
        let node_id = NodeId::new(0, 7686);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ContentFilterElement";
        let display_name = "ContentFilterElement";
        let description = "";
        let node_id = NodeId::new(0, 7929);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ContentFilter";
        let display_name = "ContentFilter";
        let description = "";
        let node_id = NodeId::new(0, 7932);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "FilterOperand";
        let display_name = "FilterOperand";
        let description = "";
        let node_id = NodeId::new(0, 7935);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ElementOperand";
        let display_name = "ElementOperand";
        let description = "";
        let node_id = NodeId::new(0, 7938);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "LiteralOperand";
        let display_name = "LiteralOperand";
        let description = "";
        let node_id = NodeId::new(0, 7941);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "AttributeOperand";
        let display_name = "AttributeOperand";
        let description = "";
        let node_id = NodeId::new(0, 7944);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "SimpleAttributeOperand";
        let display_name = "SimpleAttributeOperand";
        let description = "";
        let node_id = NodeId::new(0, 7947);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryEvent";
        let display_name = "HistoryEvent";
        let description = "";
        let node_id = NodeId::new(0, 8004);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "MonitoringFilter";
        let display_name = "MonitoringFilter";
        let description = "";
        let node_id = NodeId::new(0, 8067);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "EventFilter";
        let display_name = "EventFilter";
        let description = "";
        let node_id = NodeId::new(0, 8073);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "AggregateConfiguration";
        let display_name = "AggregateConfiguration";
        let description = "";
        let node_id = NodeId::new(0, 8076);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "HistoryEventFieldList";
        let display_name = "HistoryEventFieldList";
        let description = "";
        let node_id = NodeId::new(0, 8172);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "BuildInfo";
        let display_name = "BuildInfo";
        let description = "";
        let node_id = NodeId::new(0, 7692);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "RedundantServerDataType";
        let display_name = "RedundantServerDataType";
        let description = "";
        let node_id = NodeId::new(0, 8208);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "EndpointUrlListDataType";
        let display_name = "EndpointUrlListDataType";
        let description = "";
        let node_id = NodeId::new(0, 11959);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "NetworkGroupDataType";
        let display_name = "NetworkGroupDataType";
        let description = "";
        let node_id = NodeId::new(0, 11962);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "SamplingIntervalDiagnosticsDataType";
        let display_name = "SamplingIntervalDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 8211);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerDiagnosticsSummaryDataType";
        let display_name = "ServerDiagnosticsSummaryDataType";
        let description = "";
        let node_id = NodeId::new(0, 8214);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ServerStatusDataType";
        let display_name = "ServerStatusDataType";
        let description = "";
        let node_id = NodeId::new(0, 8217);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionDiagnosticsDataType";
        let display_name = "SessionDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 8220);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "SessionSecurityDiagnosticsDataType";
        let display_name = "SessionSecurityDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 8223);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ServiceCounterDataType";
        let display_name = "ServiceCounterDataType";
        let description = "";
        let node_id = NodeId::new(0, 8226);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "StatusResult";
        let display_name = "StatusResult";
        let description = "";
        let node_id = NodeId::new(0, 7659);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "SubscriptionDiagnosticsDataType";
        let display_name = "SubscriptionDiagnosticsDataType";
        let description = "";
        let node_id = NodeId::new(0, 8229);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ModelChangeStructureDataType";
        let display_name = "ModelChangeStructureDataType";
        let description = "";
        let node_id = NodeId::new(0, 8232);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "SemanticChangeStructureDataType";
        let display_name = "SemanticChangeStructureDataType";
        let description = "";
        let node_id = NodeId::new(0, 8235);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "Range";
        let display_name = "Range";
        let description = "";
        let node_id = NodeId::new(0, 8238);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "EUInformation";
        let display_name = "EUInformation";
        let description = "";
        let node_id = NodeId::new(0, 8241);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ComplexNumberType";
        let display_name = "ComplexNumberType";
        let description = "";
        let node_id = NodeId::new(0, 12183);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "DoubleComplexNumberType";
        let display_name = "DoubleComplexNumberType";
        let description = "";
        let node_id = NodeId::new(0, 12186);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "AxisInformation";
        let display_name = "AxisInformation";
        let description = "";
        let node_id = NodeId::new(0, 12091);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "XVType";
        let display_name = "XVType";
        let description = "";
        let node_id = NodeId::new(0, 12094);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "ProgramDiagnosticDataType";
        let display_name = "ProgramDiagnosticDataType";
        let description = "";
        let node_id = NodeId::new(0, 8247);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // Variable
        let browse_name = "Annotation";
        let display_name = "Annotation";
        let description = "";
        let node_id = NodeId::new(0, 8244);
        let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&NodeId::new(0, 7617), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 7617), &node_id);
    }
    {
        // VariableType
        let browse_name = "BaseVariableType";
        let display_name = "BaseVariableType";
        let description = "The abstract base type for all variable nodes.";
        let node_id = NodeId::new(0, 62);
        let node = VariableType::new(&node_id, browse_name, display_name, description, true, -2);
        address_space.insert(node);
    }
    {
        // VariableType
        let browse_name = "BaseDataVariableType";
        let display_name = "BaseDataVariableType";
        let description = "The type for variable that represents a process value.";
        let node_id = NodeId::new(0, 63);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -2);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 62), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "PropertyType";
        let display_name = "PropertyType";
        let description = "The type for variable that represents a property of another node.";
        let node_id = NodeId::new(0, 68);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -2);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 62), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "DataTypeDescriptionType";
        let display_name = "DataTypeDescriptionType";
        let description = "The type for variable that represents the description of a data type encoding.";
        let node_id = NodeId::new(0, 69);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 104), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 105), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "DataTypeDictionaryType";
        let display_name = "DataTypeDictionaryType";
        let description = "The type for variable that represents the collection of data type decriptions.";
        let node_id = NodeId::new(0, 72);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 106), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 107), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "ServerVendorCapabilityType";
        let display_name = "ServerVendorCapabilityType";
        let description = "";
        let node_id = NodeId::new(0, 2137);
        let node = VariableType::new(&node_id, browse_name, display_name, description, true, -1);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "ServerStatusType";
        let display_name = "ServerStatusType";
        let description = "";
        let node_id = NodeId::new(0, 2138);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2139), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2140), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2141), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2142), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2752), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2753), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "BuildInfoType";
        let display_name = "BuildInfoType";
        let description = "";
        let node_id = NodeId::new(0, 3051);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3052), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3053), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3054), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3055), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3056), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3057), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "ServerDiagnosticsSummaryType";
        let display_name = "ServerDiagnosticsSummaryType";
        let description = "";
        let node_id = NodeId::new(0, 2150);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2151), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2152), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2153), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2154), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2155), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2156), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2157), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2159), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2160), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2161), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2162), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2163), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "SamplingIntervalDiagnosticsArrayType";
        let display_name = "SamplingIntervalDiagnosticsArrayType";
        let description = "";
        let node_id = NodeId::new(0, 2164);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, 1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12779), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "SamplingIntervalDiagnosticsType";
        let display_name = "SamplingIntervalDiagnosticsType";
        let description = "";
        let node_id = NodeId::new(0, 2165);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2166), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11697), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11698), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11699), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "SubscriptionDiagnosticsArrayType";
        let display_name = "SubscriptionDiagnosticsArrayType";
        let description = "";
        let node_id = NodeId::new(0, 2171);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, 1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12784), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "SubscriptionDiagnosticsType";
        let display_name = "SubscriptionDiagnosticsType";
        let description = "";
        let node_id = NodeId::new(0, 2172);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2173), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2174), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2175), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2176), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2177), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8888), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2179), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2180), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2181), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2182), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2183), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2184), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2185), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2186), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2187), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2188), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2189), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2190), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2191), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2998), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2193), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8889), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8890), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8891), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8892), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8893), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8894), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8895), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8896), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8897), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8902), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "SessionDiagnosticsArrayType";
        let display_name = "SessionDiagnosticsArrayType";
        let description = "";
        let node_id = NodeId::new(0, 2196);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, 1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12816), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "SessionDiagnosticsVariableType";
        let display_name = "SessionDiagnosticsVariableType";
        let description = "";
        let node_id = NodeId::new(0, 2197);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2198), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2199), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2200), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2201), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2202), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2203), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2204), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3050), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2205), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2206), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2207), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2208), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2209), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 8900), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11892), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2217), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2218), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2219), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2220), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2221), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2222), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2223), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2224), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2225), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2226), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2227), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2228), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2229), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2230), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2231), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2232), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2233), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2234), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2235), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2236), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2237), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2238), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2239), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2240), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2241), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2242), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2730), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2731), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "SessionSecurityDiagnosticsArrayType";
        let display_name = "SessionSecurityDiagnosticsArrayType";
        let description = "";
        let node_id = NodeId::new(0, 2243);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, 1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12860), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "SessionSecurityDiagnosticsType";
        let display_name = "SessionSecurityDiagnosticsType";
        let description = "";
        let node_id = NodeId::new(0, 2244);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2245), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2246), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2247), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2248), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2249), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2250), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2251), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2252), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&node_id, &NodeId::new(0, 3058), ReferenceTypeId::HasComponent);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "OptionSetType";
        let display_name = "OptionSetType";
        let description = "";
        let node_id = NodeId::new(0, 11487);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11488), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11701), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "StateVariableType";
        let display_name = "StateVariableType";
        let description = "";
        let node_id = NodeId::new(0, 2755);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2756), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2757), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2758), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2759), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "TransitionVariableType";
        let display_name = "TransitionVariableType";
        let description = "";
        let node_id = NodeId::new(0, 2762);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2763), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2764), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2765), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2766), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11456), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 63), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "FiniteStateVariableType";
        let display_name = "FiniteStateVariableType";
        let description = "";
        let node_id = NodeId::new(0, 2760);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2761), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2755), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // VariableType
        let browse_name = "FiniteTransitionVariableType";
        let display_name = "FiniteTransitionVariableType";
        let description = "";
        let node_id = NodeId::new(0, 2767);
        let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 2768), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2762), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // Method
        let browse_name = "GetMonitoredItems";
        let display_name = "GetMonitoredItems";
        let description = "";
        let node_id = NodeId::new(0, 11489);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11490), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11491), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Method
        let browse_name = "ResendData";
        let display_name = "ResendData";
        let description = "";
        let node_id = NodeId::new(0, 12871);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12872), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Method
        let browse_name = "SetSubscriptionDurable";
        let display_name = "SetSubscriptionDurable";
        let description = "";
        let node_id = NodeId::new(0, 12746);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12747), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12748), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Method
        let browse_name = "RequestServerStateChange";
        let display_name = "RequestServerStateChange";
        let description = "";
        let node_id = NodeId::new(0, 12883);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12884), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 2004), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2004), &node_id);
    }
    {
        // Method
        let browse_name = "Open";
        let display_name = "Open";
        let description = "";
        let node_id = NodeId::new(0, 11580);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11581), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11582), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Method
        let browse_name = "Close";
        let display_name = "Close";
        let description = "";
        let node_id = NodeId::new(0, 11583);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11584), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Method
        let browse_name = "Read";
        let display_name = "Read";
        let description = "";
        let node_id = NodeId::new(0, 11585);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11586), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11587), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Method
        let browse_name = "Write";
        let display_name = "Write";
        let description = "";
        let node_id = NodeId::new(0, 11588);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11589), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Method
        let browse_name = "GetPosition";
        let display_name = "GetPosition";
        let description = "";
        let node_id = NodeId::new(0, 11590);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11591), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11592), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Method
        let browse_name = "SetPosition";
        let display_name = "SetPosition";
        let description = "";
        let node_id = NodeId::new(0, 11593);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11594), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11575), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11575), &node_id);
    }
    {
        // Method
        let browse_name = "CreateDirectory";
        let display_name = "CreateDirectory";
        let description = "";
        let node_id = NodeId::new(0, 13355);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13356), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13357), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13354), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13354), &node_id);
    }
    {
        // Method
        let browse_name = "CreateFile";
        let display_name = "CreateFile";
        let description = "";
        let node_id = NodeId::new(0, 13358);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13359), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13360), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13354), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13354), &node_id);
    }
    {
        // Method
        let browse_name = "Delete";
        let display_name = "Delete";
        let description = "";
        let node_id = NodeId::new(0, 13361);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13362), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13354), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13354), &node_id);
    }
    {
        // Method
        let browse_name = "MoveOrCopy";
        let display_name = "MoveOrCopy";
        let description = "";
        let node_id = NodeId::new(0, 13363);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13364), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13365), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13354), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13354), &node_id);
    }
    {
        // Method
        let browse_name = "Open";
        let display_name = "Open";
        let description = "";
        let node_id = NodeId::new(0, 13372);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13373), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13374), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Method
        let browse_name = "Close";
        let display_name = "Close";
        let description = "";
        let node_id = NodeId::new(0, 13375);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13376), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Method
        let browse_name = "Read";
        let display_name = "Read";
        let description = "";
        let node_id = NodeId::new(0, 13377);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13378), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13379), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Method
        let browse_name = "Write";
        let display_name = "Write";
        let description = "";
        let node_id = NodeId::new(0, 13380);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13381), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Method
        let browse_name = "GetPosition";
        let display_name = "GetPosition";
        let description = "";
        let node_id = NodeId::new(0, 13382);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13383), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13384), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Method
        let browse_name = "SetPosition";
        let display_name = "SetPosition";
        let description = "";
        let node_id = NodeId::new(0, 13385);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13386), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13366), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13366), &node_id);
    }
    {
        // Method
        let browse_name = "CreateDirectory";
        let display_name = "CreateDirectory";
        let description = "";
        let node_id = NodeId::new(0, 13387);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13388), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13389), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13353), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13353), &node_id);
    }
    {
        // Method
        let browse_name = "CreateFile";
        let display_name = "CreateFile";
        let description = "";
        let node_id = NodeId::new(0, 13390);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13391), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13392), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13353), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13353), &node_id);
    }
    {
        // Method
        let browse_name = "Delete";
        let display_name = "Delete";
        let description = "";
        let node_id = NodeId::new(0, 13393);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13394), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13353), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13353), &node_id);
    }
    {
        // Method
        let browse_name = "MoveOrCopy";
        let display_name = "MoveOrCopy";
        let description = "";
        let node_id = NodeId::new(0, 13395);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13396), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 13397), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 13353), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 13353), &node_id);
    }
    {
        // Method
        let browse_name = "ExportNamespace";
        let display_name = "ExportNamespace";
        let description = "Updates the file by exporting the server namespace.";
        let node_id = NodeId::new(0, 11615);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 80), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11595), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11595), &node_id);
    }
    {
        // Method
        let browse_name = "Open";
        let display_name = "Open";
        let description = "";
        let node_id = NodeId::new(0, 11629);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11630), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11631), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Method
        let browse_name = "Close";
        let display_name = "Close";
        let description = "";
        let node_id = NodeId::new(0, 11632);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11633), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Method
        let browse_name = "Read";
        let display_name = "Read";
        let description = "";
        let node_id = NodeId::new(0, 11634);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11635), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11636), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Method
        let browse_name = "Write";
        let display_name = "Write";
        let description = "";
        let node_id = NodeId::new(0, 11637);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11638), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Method
        let browse_name = "GetPosition";
        let display_name = "GetPosition";
        let description = "";
        let node_id = NodeId::new(0, 11639);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11640), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11641), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Method
        let browse_name = "SetPosition";
        let display_name = "SetPosition";
        let description = "";
        let node_id = NodeId::new(0, 11642);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11643), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11624), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11624), &node_id);
    }
    {
        // Method
        let browse_name = "Open";
        let display_name = "Open";
        let description = "";
        let node_id = NodeId::new(0, 11680);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11681), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11682), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Method
        let browse_name = "Close";
        let display_name = "Close";
        let description = "";
        let node_id = NodeId::new(0, 11683);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11684), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Method
        let browse_name = "Read";
        let display_name = "Read";
        let description = "";
        let node_id = NodeId::new(0, 11685);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11686), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11687), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Method
        let browse_name = "Write";
        let display_name = "Write";
        let description = "";
        let node_id = NodeId::new(0, 11688);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11689), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Method
        let browse_name = "GetPosition";
        let display_name = "GetPosition";
        let description = "";
        let node_id = NodeId::new(0, 11690);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11691), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11692), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Method
        let browse_name = "SetPosition";
        let display_name = "SetPosition";
        let description = "";
        let node_id = NodeId::new(0, 11693);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11694), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new(0, 11675), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 11675), &node_id);
    }
    {
        // Method
        let browse_name = "GetMonitoredItems";
        let display_name = "GetMonitoredItems";
        let description = "";
        let node_id = NodeId::new(0, 11492);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11493), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 11494), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Method
        let browse_name = "ResendData";
        let display_name = "ResendData";
        let description = "";
        let node_id = NodeId::new(0, 12873);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12874), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Method
        let browse_name = "SetSubscriptionDurable";
        let display_name = "SetSubscriptionDurable";
        let description = "";
        let node_id = NodeId::new(0, 12749);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12750), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12751), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
    {
        // Method
        let browse_name = "RequestServerStateChange";
        let display_name = "RequestServerStateChange";
        let description = "";
        let node_id = NodeId::new(0, 12886);
        let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new(0, 12887), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new(0, 2253), &node_id, ReferenceTypeId::HasComponent);
        address_space.add_organizes(&NodeId::new(0, 2253), &node_id);
    }
}
