// This file was autogenerated from Opc.Ua.NodeSet2.Part5.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

#[allow(unused_imports)]
use opcua_types::*;
use opcua_types::node_ids::*;
#[allow(unused_imports)]
use crate::address_space::types::*;

fn add_1(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Mandatory";
    let display_name = "Mandatory";
    let description = "Specifies that an instance with the attributes and references of the instance declaration must appear when a type is instantiated.";
    let node_id = NodeId::new(0, 78);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 112), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_2(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Optional";
    let display_name = "Optional";
    let description = "Specifies that an instance with the attributes and references of the instance declaration may appear when a type is instantiated.";
    let node_id = NodeId::new(0, 80);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 113), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_3(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ExposesItsArray";
    let display_name = "ExposesItsArray";
    let description = "Specifies that an instance appears for each element of the containing array variable.";
    let node_id = NodeId::new(0, 83);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 114), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_4(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "MandatoryShared";
    let display_name = "MandatoryShared";
    let description = "Specifies that a reference to a shared instance must appear in when a type is instantiated.";
    let node_id = NodeId::new(0, 79);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 116), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_5(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "OptionalPlaceholder";
    let display_name = "OptionalPlaceholder";
    let description = "Specifies that zero or more instances with the attributes and references of the instance declaration may appear when a type is instantiated.";
    let node_id = NodeId::new(0, 11508);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11509), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_6(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "MandatoryPlaceholder";
    let display_name = "MandatoryPlaceholder";
    let description = "Specifies that one or more instances with the attributes and references of the instance declaration must appear when a type is instantiated.";
    let node_id = NodeId::new(0, 11510);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11511), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 77), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_7(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Root";
    let display_name = "Root";
    let description = "The root of the server address space.";
    let node_id = NodeId::new(0, 84);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_8(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Objects";
    let display_name = "Objects";
    let description = "The browse entry point when looking for objects in the server address space.";
    let node_id = NodeId::new(0, 85);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 84), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_9(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Types";
    let display_name = "Types";
    let description = "The browse entry point when looking for types in the server address space.";
    let node_id = NodeId::new(0, 86);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 84), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_10(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Views";
    let display_name = "Views";
    let description = "The browse entry point when looking for views in the server address space.";
    let node_id = NodeId::new(0, 87);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 84), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_11(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ObjectTypes";
    let display_name = "ObjectTypes";
    let description = "The browse entry point when looking for object types in the server address space.";
    let node_id = NodeId::new(0, 88);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 86), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 58), ReferenceTypeId::Organizes, ReferenceDirection::Forward),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_12(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "VariableTypes";
    let display_name = "VariableTypes";
    let description = "The browse entry point when looking for variable types in the server address space.";
    let node_id = NodeId::new(0, 89);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 86), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 62), ReferenceTypeId::Organizes, ReferenceDirection::Forward),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_13(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "DataTypes";
    let display_name = "DataTypes";
    let description = "The browse entry point when looking for data types in the server address space.";
    let node_id = NodeId::new(0, 90);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 86), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 24), ReferenceTypeId::Organizes, ReferenceDirection::Forward),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_14(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ReferenceTypes";
    let display_name = "ReferenceTypes";
    let description = "The browse entry point when looking for reference types in the server address space.";
    let node_id = NodeId::new(0, 91);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 86), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 31), ReferenceTypeId::Organizes, ReferenceDirection::Forward),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_15(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "XML Schema";
    let display_name = "XML Schema";
    let description = "A type system which uses XML schema to describe the encoding of data types.";
    let node_id = NodeId::new(0, 92);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 90), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 75), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_16(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "OPC Binary";
    let display_name = "OPC Binary";
    let description = "A type system which uses OPC binary schema to describe the encoding of data types.";
    let node_id = NodeId::new(0, 93);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 90), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 75), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_17(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ServerCapabilities";
    let display_name = "ServerCapabilities";
    let description = "Describes capabilities supported by the server.";
    let node_id = NodeId::new(0, 2009);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3086), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3087), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3088), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3089), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3090), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3091), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3092), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3093), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3094), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_18(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ModellingRules";
    let display_name = "ModellingRules";
    let description = "A folder for the modelling rules supported by the server.";
    let node_id = NodeId::new(0, 3093);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_19(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "AggregateFunctions";
    let display_name = "AggregateFunctions";
    let description = "A folder for the real time aggregates supported by the server.";
    let node_id = NodeId::new(0, 3094);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_20(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ServerDiagnostics";
    let display_name = "ServerDiagnostics";
    let description = "Reports diagnostics about the server.";
    let node_id = NodeId::new(0, 2010);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3110), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3111), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3114), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2020), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_21(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "SessionsDiagnosticsSummary";
    let display_name = "SessionsDiagnosticsSummary";
    let description = "A summary of session level diagnostics.";
    let node_id = NodeId::new(0, 3111);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2010), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3112), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3113), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2026), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2010), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_22(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "VendorServerInfo";
    let display_name = "VendorServerInfo";
    let description = "Server information provided by the vendor.";
    let node_id = NodeId::new(0, 2011);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2033), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_23(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ServerRedundancy";
    let display_name = "ServerRedundancy";
    let description = "Describes the redundancy capabilities of the server.";
    let node_id = NodeId::new(0, 2012);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3115), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2034), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_24(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Namespaces";
    let display_name = "Namespaces";
    let description = "Describes the namespaces supported by the server.";
    let node_id = NodeId::new(0, 11527);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11645), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_25(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "OperationLimits";
    let display_name = "OperationLimits";
    let description = "Defines the limits supported by the server for different operations.";
    let node_id = NodeId::new(0, 11551);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_26(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ModellingRules";
    let display_name = "ModellingRules";
    let description = "A folder for the modelling rules supported by the server.";
    let node_id = NodeId::new(0, 2019);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_27(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "AggregateFunctions";
    let display_name = "AggregateFunctions";
    let description = "A folder for the real time aggregates supported by the server.";
    let node_id = NodeId::new(0, 2754);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_28(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "SessionsDiagnosticsSummary";
    let display_name = "SessionsDiagnosticsSummary";
    let description = "A summary of session level diagnostics.";
    let node_id = NodeId::new(0, 2744);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2020), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3129), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3130), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2026), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2020), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_29(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "<ClientName>";
    let display_name = "<ClientName>";
    let description = "";
    let node_id = NodeId::new(0, 12097);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2026), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12152), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2029), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2026), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_30(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "<FileDirectoryName>";
    let display_name = "<FileDirectoryName>";
    let description = "";
    let node_id = NodeId::new(0, 13354);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13353), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13355), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13358), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13361), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13363), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13353), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13353), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_31(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "<FileName>";
    let display_name = "<FileName>";
    let description = "";
    let node_id = NodeId::new(0, 13366);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13353), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13367), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13368), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13369), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13370), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13372), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13375), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13377), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13380), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13382), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13385), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13353), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_32(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "NamespaceFile";
    let display_name = "NamespaceFile";
    let description = "A file containing the nodes of the namespace.";
    let node_id = NodeId::new(0, 11624);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11616), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11625), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12690), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12691), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11628), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11629), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11632), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11634), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11637), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11639), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11642), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11595), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_33(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "<NamespaceIdentifier>";
    let display_name = "<NamespaceIdentifier>";
    let description = "";
    let node_id = NodeId::new(0, 11646);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11645), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11647), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11648), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11649), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11650), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11651), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11652), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11653), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11645), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_34(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "AddressSpaceFile";
    let display_name = "AddressSpaceFile";
    let description = "A file containing the nodes of the namespace.";
    let node_id = NodeId::new(0, 11675);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11645), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11676), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12694), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12695), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11679), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11680), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11683), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11685), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11688), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11690), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11693), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11595), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11645), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_35(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "EventTypes";
    let display_name = "EventTypes";
    let description = "";
    let node_id = NodeId::new(0, 3048);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 86), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Forward),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_36(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Server";
    let display_name = "Server";
    let description = "";
    let node_id = NodeId::new(0, 2253);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2254), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2255), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2267), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2994), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12885), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2295), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11715), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11492), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12873), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12749), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12886), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 85), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_37(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ServerCapabilities";
    let display_name = "ServerCapabilities";
    let description = "Describes capabilities supported by the server.";
    let node_id = NodeId::new(0, 2268);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2269), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2271), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2272), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2735), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2736), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2737), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3704), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11702), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11703), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12911), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2996), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2997), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_38(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "OperationLimits";
    let display_name = "OperationLimits";
    let description = "Defines the limits supported by the server for different operations.";
    let node_id = NodeId::new(0, 11704);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11705), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12165), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12166), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11707), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12167), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12168), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11709), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11710), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11711), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11712), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11713), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11714), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_39(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ModellingRules";
    let display_name = "ModellingRules";
    let description = "A folder for the modelling rules supported by the server.";
    let node_id = NodeId::new(0, 2996);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_40(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "AggregateFunctions";
    let display_name = "AggregateFunctions";
    let description = "A folder for the real time aggregates supported by the server.";
    let node_id = NodeId::new(0, 2997);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 61), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_41(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ServerDiagnostics";
    let display_name = "ServerDiagnostics";
    let description = "Reports diagnostics about the server.";
    let node_id = NodeId::new(0, 2274);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2289), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2290), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3706), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2294), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2020), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_42(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "SessionsDiagnosticsSummary";
    let display_name = "SessionsDiagnosticsSummary";
    let description = "A summary of session level diagnostics.";
    let node_id = NodeId::new(0, 3706);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3707), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3708), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2026), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_43(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "VendorServerInfo";
    let display_name = "VendorServerInfo";
    let description = "Server information provided by the vendor.";
    let node_id = NodeId::new(0, 2295);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2033), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_44(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ServerRedundancy";
    let display_name = "ServerRedundancy";
    let description = "Describes the redundancy capabilities of the server.";
    let node_id = NodeId::new(0, 2296);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3709), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11312), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11313), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11314), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 14415), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2034), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_45(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Namespaces";
    let display_name = "Namespaces";
    let description = "Describes the namespaces supported by the server.";
    let node_id = NodeId::new(0, 11715);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11645), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_46(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "0:http://opcfoundation.org/UA/";
    let display_name = "http://opcfoundation.org/UA/";
    let description = "";
    let node_id = NodeId::new(0, 15182);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11715), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 15183), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 15184), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 15185), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 15186), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 15187), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 15188), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 15189), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11715), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_47(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 339);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 338), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8327), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_48(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 854);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 853), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8843), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_49(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 11949);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11943), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11951), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_50(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 11950);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11944), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11954), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_51(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 857);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 856), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8846), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_52(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 860);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 859), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8849), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_53(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 863);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 862), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8852), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_54(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 866);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 865), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8855), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_55(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 869);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 868), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8858), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_56(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 872);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 871), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8861), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_57(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 300);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 299), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8294), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_58(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 875);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 874), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8864), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_59(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 878);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 877), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8867), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_60(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 898);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 897), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8870), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_61(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 340);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 338), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 7692), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_62(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 855);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 853), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8208), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_63(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 11957);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11943), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11959), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_64(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 11958);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11944), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11962), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_65(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 858);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 856), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8211), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_66(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 861);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 859), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8214), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_67(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 864);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 862), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8217), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_68(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 867);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 865), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8220), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_69(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 870);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 868), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8223), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_70(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 873);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 871), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8226), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_71(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 301);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 299), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 7659), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_72(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 876);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 874), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8229), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_73(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 879);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 877), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8232), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_74(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 899);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 897), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 8235), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_75(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "BaseObjectType";
    let display_name = "BaseObjectType";
    let description = "The base type for all object nodes.";
    let node_id = NodeId::new(0, 58);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, None);
}

fn add_76(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "FolderType";
    let display_name = "FolderType";
    let description = "The type for objects that organize other nodes.";
    let node_id = NodeId::new(0, 61);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_77(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "DataTypeSystemType";
    let display_name = "DataTypeSystemType";
    let description = "";
    let node_id = NodeId::new(0, 75);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_78(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "DataTypeEncodingType";
    let display_name = "DataTypeEncodingType";
    let description = "";
    let node_id = NodeId::new(0, 76);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_79(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ModellingRuleType";
    let display_name = "ModellingRuleType";
    let description = "The type for an object that describes how an instance declaration is used when a type is instantiated.";
    let node_id = NodeId::new(0, 77);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 111), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_80(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ServerType";
    let display_name = "ServerType";
    let description = "Specifies the current status and capabilities of the server.";
    let node_id = NodeId::new(0, 2004);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2005), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2006), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2007), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2008), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2742), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12882), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2010), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2011), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2012), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11527), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11489), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12871), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12746), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12883), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_81(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ServerCapabilitiesType";
    let display_name = "ServerCapabilitiesType";
    let description = "Describes the capabilities supported by the server.";
    let node_id = NodeId::new(0, 2013);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2014), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2016), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2017), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2732), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2733), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2734), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3049), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11549), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11550), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12910), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11551), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2019), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2754), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11562), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_82(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ServerDiagnosticsType";
    let display_name = "ServerDiagnosticsType";
    let description = "The diagnostics information for a server.";
    let node_id = NodeId::new(0, 2020);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2022), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2023), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2744), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2025), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_83(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "SessionsDiagnosticsSummaryType";
    let display_name = "SessionsDiagnosticsSummaryType";
    let description = "Provides a summary of session level diagnostics.";
    let node_id = NodeId::new(0, 2026);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2027), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2028), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12097), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_84(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "SessionDiagnosticsObjectType";
    let display_name = "SessionDiagnosticsObjectType";
    let description = "A container for session level diagnostics information.";
    let node_id = NodeId::new(0, 2029);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2032), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_85(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "VendorServerInfoType";
    let display_name = "VendorServerInfoType";
    let description = "A base type for vendor specific server information.";
    let node_id = NodeId::new(0, 2033);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_86(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ServerRedundancyType";
    let display_name = "ServerRedundancyType";
    let description = "A base type for an object that describe how a server supports redundancy.";
    let node_id = NodeId::new(0, 2034);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2035), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_87(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "TransparentRedundancyType";
    let display_name = "TransparentRedundancyType";
    let description = "Identifies the capabilties of server that supports transparent redundancy.";
    let node_id = NodeId::new(0, 2036);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2037), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2038), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2034), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_88(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "NonTransparentRedundancyType";
    let display_name = "NonTransparentRedundancyType";
    let description = "Identifies the capabilties of server that supports non-transparent redundancy.";
    let node_id = NodeId::new(0, 2039);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2040), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2034), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_89(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "NonTransparentNetworkRedundancyType";
    let display_name = "NonTransparentNetworkRedundancyType";
    let description = "";
    let node_id = NodeId::new(0, 11945);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11948), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2039), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_90(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "OperationLimitsType";
    let display_name = "OperationLimitsType";
    let description = "Identifies the operation limits imposed by the server.";
    let node_id = NodeId::new(0, 11564);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11565), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12161), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12162), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11567), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12163), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12164), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11569), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11570), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11571), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11572), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11573), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11574), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 61), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_91(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "FileType";
    let display_name = "FileType";
    let description = "An object that represents a file that can be accessed via the server.";
    let node_id = NodeId::new(0, 11575);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11576), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12686), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12687), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11579), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13341), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11580), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11583), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11585), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11588), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11590), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11593), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_92(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "FileDirectoryType";
    let display_name = "FileDirectoryType";
    let description = "";
    let node_id = NodeId::new(0, 13353);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13354), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13387), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13390), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13393), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13395), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 61), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_93(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AddressSpaceFileType";
    let display_name = "AddressSpaceFileType";
    let description = "A file used to store a namespace exported from the server.";
    let node_id = NodeId::new(0, 11595);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11615), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_94(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "NamespaceMetadataType";
    let display_name = "NamespaceMetadataType";
    let description = "Provides the metadata for a namespace used by the server.";
    let node_id = NodeId::new(0, 11616);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11617), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11618), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11619), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11620), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11621), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11622), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11623), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_95(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "NamespacesType";
    let display_name = "NamespacesType";
    let description = "A container for the namespace metadata provided by the server.";
    let node_id = NodeId::new(0, 11645);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11646), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_96(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "BaseEventType";
    let display_name = "BaseEventType";
    let description = "The base type for all events.";
    let node_id = NodeId::new(0, 2041);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2042), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2043), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2044), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2045), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2046), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2047), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3190), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2050), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2051), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_97(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditEventType";
    let display_name = "AuditEventType";
    let description = "A base type for events used to track client initiated changes to the server state.";
    let node_id = NodeId::new(0, 2052);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2053), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2054), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2055), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2056), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2057), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_98(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditSecurityEventType";
    let display_name = "AuditSecurityEventType";
    let description = "A base type for events used to track security related changes.";
    let node_id = NodeId::new(0, 2058);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2052), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_99(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditChannelEventType";
    let display_name = "AuditChannelEventType";
    let description = "A base type for events used to track related changes to a secure channel.";
    let node_id = NodeId::new(0, 2059);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2745), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2058), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_100(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditOpenSecureChannelEventType";
    let display_name = "AuditOpenSecureChannelEventType";
    let description = "An event that is raised when a secure channel is opened.";
    let node_id = NodeId::new(0, 2060);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2061), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2746), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2062), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2063), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2065), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2066), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2059), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_101(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditSessionEventType";
    let display_name = "AuditSessionEventType";
    let description = "A base type for events used to track related changes to a session.";
    let node_id = NodeId::new(0, 2069);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2070), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2058), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_102(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCreateSessionEventType";
    let display_name = "AuditCreateSessionEventType";
    let description = "An event that is raised when a session is created.";
    let node_id = NodeId::new(0, 2071);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2072), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2073), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2747), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2074), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2069), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_103(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditUrlMismatchEventType";
    let display_name = "AuditUrlMismatchEventType";
    let description = "";
    let node_id = NodeId::new(0, 2748);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2749), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2071), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_104(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditActivateSessionEventType";
    let display_name = "AuditActivateSessionEventType";
    let description = "";
    let node_id = NodeId::new(0, 2075);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2076), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2077), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11485), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2069), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_105(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCancelEventType";
    let display_name = "AuditCancelEventType";
    let description = "";
    let node_id = NodeId::new(0, 2078);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2079), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2069), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_106(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCertificateEventType";
    let display_name = "AuditCertificateEventType";
    let description = "";
    let node_id = NodeId::new(0, 2080);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2081), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2058), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_107(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCertificateDataMismatchEventType";
    let display_name = "AuditCertificateDataMismatchEventType";
    let description = "";
    let node_id = NodeId::new(0, 2082);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2083), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2084), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2080), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_108(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCertificateExpiredEventType";
    let display_name = "AuditCertificateExpiredEventType";
    let description = "";
    let node_id = NodeId::new(0, 2085);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2080), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_109(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCertificateInvalidEventType";
    let display_name = "AuditCertificateInvalidEventType";
    let description = "";
    let node_id = NodeId::new(0, 2086);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2080), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_110(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCertificateUntrustedEventType";
    let display_name = "AuditCertificateUntrustedEventType";
    let description = "";
    let node_id = NodeId::new(0, 2087);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2080), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_111(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCertificateRevokedEventType";
    let display_name = "AuditCertificateRevokedEventType";
    let description = "";
    let node_id = NodeId::new(0, 2088);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2080), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_112(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditCertificateMismatchEventType";
    let display_name = "AuditCertificateMismatchEventType";
    let description = "";
    let node_id = NodeId::new(0, 2089);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2080), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_113(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditNodeManagementEventType";
    let display_name = "AuditNodeManagementEventType";
    let description = "";
    let node_id = NodeId::new(0, 2090);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2052), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_114(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditAddNodesEventType";
    let display_name = "AuditAddNodesEventType";
    let description = "";
    let node_id = NodeId::new(0, 2091);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2092), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2090), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_115(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditDeleteNodesEventType";
    let display_name = "AuditDeleteNodesEventType";
    let description = "";
    let node_id = NodeId::new(0, 2093);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2094), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2090), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_116(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditAddReferencesEventType";
    let display_name = "AuditAddReferencesEventType";
    let description = "";
    let node_id = NodeId::new(0, 2095);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2096), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2090), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_117(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditDeleteReferencesEventType";
    let display_name = "AuditDeleteReferencesEventType";
    let description = "";
    let node_id = NodeId::new(0, 2097);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2098), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2090), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_118(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditUpdateEventType";
    let display_name = "AuditUpdateEventType";
    let description = "";
    let node_id = NodeId::new(0, 2099);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2052), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_119(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditWriteUpdateEventType";
    let display_name = "AuditWriteUpdateEventType";
    let description = "";
    let node_id = NodeId::new(0, 2100);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2750), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2101), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2102), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2103), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2099), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_120(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditHistoryUpdateEventType";
    let display_name = "AuditHistoryUpdateEventType";
    let description = "";
    let node_id = NodeId::new(0, 2104);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2751), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2099), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_121(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditUpdateMethodEventType";
    let display_name = "AuditUpdateMethodEventType";
    let description = "";
    let node_id = NodeId::new(0, 2127);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2128), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2129), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2052), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_122(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "SystemEventType";
    let display_name = "SystemEventType";
    let description = "";
    let node_id = NodeId::new(0, 2130);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_123(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "DeviceFailureEventType";
    let display_name = "DeviceFailureEventType";
    let description = "";
    let node_id = NodeId::new(0, 2131);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2130), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_124(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "SystemStatusChangeEventType";
    let display_name = "SystemStatusChangeEventType";
    let description = "";
    let node_id = NodeId::new(0, 11446);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11696), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2130), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_125(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "BaseModelChangeEventType";
    let display_name = "BaseModelChangeEventType";
    let description = "";
    let node_id = NodeId::new(0, 2132);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_126(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "GeneralModelChangeEventType";
    let display_name = "GeneralModelChangeEventType";
    let description = "";
    let node_id = NodeId::new(0, 2133);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2134), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2132), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_127(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "SemanticChangeEventType";
    let display_name = "SemanticChangeEventType";
    let description = "";
    let node_id = NodeId::new(0, 2738);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2739), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2132), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_128(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "EventQueueOverflowEventType";
    let display_name = "EventQueueOverflowEventType";
    let description = "";
    let node_id = NodeId::new(0, 3035);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_129(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ProgressEventType";
    let display_name = "ProgressEventType";
    let description = "";
    let node_id = NodeId::new(0, 11436);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12502), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12503), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_130(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AggregateFunctionType";
    let display_name = "AggregateFunctionType";
    let description = "";
    let node_id = NodeId::new(0, 2340);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_131(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "StateMachineType";
    let display_name = "StateMachineType";
    let description = "";
    let node_id = NodeId::new(0, 2299);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2769), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2770), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_132(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "FiniteStateMachineType";
    let display_name = "FiniteStateMachineType";
    let description = "";
    let node_id = NodeId::new(0, 2771);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2772), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2773), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2299), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_133(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "StateType";
    let display_name = "StateType";
    let description = "";
    let node_id = NodeId::new(0, 2307);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2308), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_134(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "InitialStateType";
    let display_name = "InitialStateType";
    let description = "";
    let node_id = NodeId::new(0, 2309);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2307), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_135(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "TransitionType";
    let display_name = "TransitionType";
    let description = "";
    let node_id = NodeId::new(0, 2310);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2312), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_136(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "TransitionEventType";
    let display_name = "TransitionEventType";
    let description = "";
    let node_id = NodeId::new(0, 2311);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2774), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2775), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2776), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_137(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditUpdateStateEventType";
    let display_name = "AuditUpdateStateEventType";
    let description = "";
    let node_id = NodeId::new(0, 2315);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2777), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2778), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2127), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_138(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "BitFieldMaskDataType";
    let display_name = "BitFieldMaskDataType";
    let description = "A mask of 32 bits that can be updated individually by using the top 32 bits as a mask.";
    let node_id = NodeId::new(0, 11737);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_139(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "BuildInfo";
    let display_name = "BuildInfo";
    let description = "";
    let node_id = NodeId::new(0, 338);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_140(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "RedundancySupport";
    let display_name = "RedundancySupport";
    let description = "";
    let node_id = NodeId::new(0, 851);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7611), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_141(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "ServerState";
    let display_name = "ServerState";
    let description = "";
    let node_id = NodeId::new(0, 852);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7612), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_142(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "RedundantServerDataType";
    let display_name = "RedundantServerDataType";
    let description = "";
    let node_id = NodeId::new(0, 853);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_143(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "EndpointUrlListDataType";
    let display_name = "EndpointUrlListDataType";
    let description = "";
    let node_id = NodeId::new(0, 11943);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_144(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "NetworkGroupDataType";
    let display_name = "NetworkGroupDataType";
    let description = "";
    let node_id = NodeId::new(0, 11944);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_145(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "SamplingIntervalDiagnosticsDataType";
    let display_name = "SamplingIntervalDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 856);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_146(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "ServerDiagnosticsSummaryDataType";
    let display_name = "ServerDiagnosticsSummaryDataType";
    let description = "";
    let node_id = NodeId::new(0, 859);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_147(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "ServerStatusDataType";
    let display_name = "ServerStatusDataType";
    let description = "";
    let node_id = NodeId::new(0, 862);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_148(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "SessionDiagnosticsDataType";
    let display_name = "SessionDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 865);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_149(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "SessionSecurityDiagnosticsDataType";
    let display_name = "SessionSecurityDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 868);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_150(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "ServiceCounterDataType";
    let display_name = "ServiceCounterDataType";
    let description = "";
    let node_id = NodeId::new(0, 871);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_151(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "StatusResult";
    let display_name = "StatusResult";
    let description = "";
    let node_id = NodeId::new(0, 299);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_152(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "SubscriptionDiagnosticsDataType";
    let display_name = "SubscriptionDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 874);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_153(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "ModelChangeStructureDataType";
    let display_name = "ModelChangeStructureDataType";
    let description = "";
    let node_id = NodeId::new(0, 877);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_154(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "SemanticChangeStructureDataType";
    let display_name = "SemanticChangeStructureDataType";
    let description = "";
    let node_id = NodeId::new(0, 897);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_155(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "FromState";
    let display_name = "FromState";
    let description = "The type for a reference to the state before a transition.";
    let node_id = NodeId::new(0, 51);
    let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "ToTransition")), false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_156(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "ToState";
    let display_name = "ToState";
    let description = "The type for a reference to the state after a transition.";
    let node_id = NodeId::new(0, 52);
    let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "FromTransition")), false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_157(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "HasCause";
    let display_name = "HasCause";
    let description = "The type for a reference to a method that can cause a transition to occur.";
    let node_id = NodeId::new(0, 53);
    let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "MayBeCausedBy")), false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_158(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "HasEffect";
    let display_name = "HasEffect";
    let description = "The type for a reference to an event that may be raised when a transition occurs.";
    let node_id = NodeId::new(0, 54);
    let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "MayBeEffectedBy")), false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_159(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "HasSubStateMachine";
    let display_name = "HasSubStateMachine";
    let description = "The type for a reference to a substate for a state.";
    let node_id = NodeId::new(0, 117);
    let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "SubStateMachineOf")), false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_160(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DataTypeVersion";
    let display_name = "DataTypeVersion";
    let description = "The version number for the data type description.";
    let node_id = NodeId::new(0, 104);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 69), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 69), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_161(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DictionaryFragment";
    let display_name = "DictionaryFragment";
    let description = "A fragment of a data type dictionary that defines the data type.";
    let node_id = NodeId::new(0, 105);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 69), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 69), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_162(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DataTypeVersion";
    let display_name = "DataTypeVersion";
    let description = "The version number for the data type dictionary.";
    let node_id = NodeId::new(0, 106);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 72), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 72), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_163(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceUri";
    let display_name = "NamespaceUri";
    let description = "A URI that uniquely identifies the dictionary.";
    let node_id = NodeId::new(0, 107);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 72), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 72), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_164(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamingRule";
    let display_name = "NamingRule";
    let description = "Specified the significances of the BrowseName when a type is instantiated.";
    let node_id = NodeId::new(0, 111);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 77), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 77), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_165(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamingRule";
    let display_name = "NamingRule";
    let description = "Specified the significances of the BrowseName when a type is instantiated.";
    let node_id = NodeId::new(0, 112);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 78), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_166(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamingRule";
    let display_name = "NamingRule";
    let description = "Specified the significances of the BrowseName when a type is instantiated.";
    let node_id = NodeId::new(0, 113);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 80), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_167(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamingRule";
    let display_name = "NamingRule";
    let description = "Specified the significances of the BrowseName when a type is instantiated.";
    let node_id = NodeId::new(0, 114);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 83), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 83), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_168(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamingRule";
    let display_name = "NamingRule";
    let description = "Specified the significances of the BrowseName when a type is instantiated.";
    let node_id = NodeId::new(0, 116);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 79), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 79), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_169(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamingRule";
    let display_name = "NamingRule";
    let description = "Specified the significances of the BrowseName when a type is instantiated.";
    let node_id = NodeId::new(0, 11509);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11508), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11508), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_170(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamingRule";
    let display_name = "NamingRule";
    let description = "Specified the significances of the BrowseName when a type is instantiated.";
    let node_id = NodeId::new(0, 11511);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(120u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11510), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11510), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_171(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerArray";
    let display_name = "ServerArray";
    let description = "The list of server URIs used by the server.";
    let node_id = NodeId::new(0, 2005);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_172(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceArray";
    let display_name = "NamespaceArray";
    let description = "The list of namespace URIs used by the server.";
    let node_id = NodeId::new(0, 2006);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_173(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerStatus";
    let display_name = "ServerStatus";
    let description = "The current status of the server.";
    let node_id = NodeId::new(0, 2007);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(862u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3074), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3075), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3076), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3077), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3084), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3085), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_174(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StartTime";
    let display_name = "StartTime";
    let description = "";
    let node_id = NodeId::new(0, 3074);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2007), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2007), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_175(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentTime";
    let display_name = "CurrentTime";
    let description = "";
    let node_id = NodeId::new(0, 3075);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2007), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2007), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_176(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "State";
    let display_name = "State";
    let description = "";
    let node_id = NodeId::new(0, 3076);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(852u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2007), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2007), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_177(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildInfo";
    let display_name = "BuildInfo";
    let description = "";
    let node_id = NodeId::new(0, 3077);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(338u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2007), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3078), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3079), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3080), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3081), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3082), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3083), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2007), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_178(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProductUri";
    let display_name = "ProductUri";
    let description = "";
    let node_id = NodeId::new(0, 3078);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3077), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3077), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_179(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ManufacturerName";
    let display_name = "ManufacturerName";
    let description = "";
    let node_id = NodeId::new(0, 3079);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3077), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3077), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_180(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProductName";
    let display_name = "ProductName";
    let description = "";
    let node_id = NodeId::new(0, 3080);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3077), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3077), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_181(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SoftwareVersion";
    let display_name = "SoftwareVersion";
    let description = "";
    let node_id = NodeId::new(0, 3081);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3077), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3077), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_182(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildNumber";
    let display_name = "BuildNumber";
    let description = "";
    let node_id = NodeId::new(0, 3082);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3077), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3077), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_183(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildDate";
    let display_name = "BuildDate";
    let description = "";
    let node_id = NodeId::new(0, 3083);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3077), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3077), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_184(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecondsTillShutdown";
    let display_name = "SecondsTillShutdown";
    let description = "";
    let node_id = NodeId::new(0, 3084);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2007), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2007), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_185(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ShutdownReason";
    let display_name = "ShutdownReason";
    let description = "";
    let node_id = NodeId::new(0, 3085);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2007), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2007), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_186(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServiceLevel";
    let display_name = "ServiceLevel";
    let description = "A value indicating the level of service the server can provide. 255 indicates the best.";
    let node_id = NodeId::new(0, 2008);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_187(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Auditing";
    let display_name = "Auditing";
    let description = "A flag indicating whether the server is currently generating audit events.";
    let node_id = NodeId::new(0, 2742);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_188(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EstimatedReturnTime";
    let display_name = "EstimatedReturnTime";
    let description = "Indicates the time at which the Server is expected to be available in the state RUNNING.";
    let node_id = NodeId::new(0, 12882);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_189(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerProfileArray";
    let display_name = "ServerProfileArray";
    let description = "A list of profiles supported by the server.";
    let node_id = NodeId::new(0, 3086);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_190(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LocaleIdArray";
    let display_name = "LocaleIdArray";
    let description = "A list of locales supported by the server.";
    let node_id = NodeId::new(0, 3087);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_191(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MinSupportedSampleRate";
    let display_name = "MinSupportedSampleRate";
    let description = "The minimum sampling interval supported by the server.";
    let node_id = NodeId::new(0, 3088);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_192(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxBrowseContinuationPoints";
    let display_name = "MaxBrowseContinuationPoints";
    let description = "The maximum number of continuation points for Browse operations per session.";
    let node_id = NodeId::new(0, 3089);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_193(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxQueryContinuationPoints";
    let display_name = "MaxQueryContinuationPoints";
    let description = "The maximum number of continuation points for Query operations per session.";
    let node_id = NodeId::new(0, 3090);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_194(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxHistoryContinuationPoints";
    let display_name = "MaxHistoryContinuationPoints";
    let description = "The maximum number of continuation points for ReadHistory operations per session.";
    let node_id = NodeId::new(0, 3091);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_195(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SoftwareCertificates";
    let display_name = "SoftwareCertificates";
    let description = "The software certificates owned by the server.";
    let node_id = NodeId::new(0, 3092);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(344u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2009), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2009), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_196(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerDiagnosticsSummary";
    let display_name = "ServerDiagnosticsSummary";
    let description = "A summary of server level diagnostics.";
    let node_id = NodeId::new(0, 3095);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(859u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2010), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3096), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3097), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3098), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3099), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3100), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3101), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3102), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3104), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3105), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3106), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3107), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3108), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2010), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_197(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerViewCount";
    let display_name = "ServerViewCount";
    let description = "";
    let node_id = NodeId::new(0, 3096);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_198(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSessionCount";
    let display_name = "CurrentSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3097);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_199(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CumulatedSessionCount";
    let display_name = "CumulatedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3098);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_200(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityRejectedSessionCount";
    let display_name = "SecurityRejectedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3099);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_201(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RejectedSessionCount";
    let display_name = "RejectedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3100);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_202(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionTimeoutCount";
    let display_name = "SessionTimeoutCount";
    let description = "";
    let node_id = NodeId::new(0, 3101);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_203(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionAbortCount";
    let display_name = "SessionAbortCount";
    let description = "";
    let node_id = NodeId::new(0, 3102);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_204(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishingIntervalCount";
    let display_name = "PublishingIntervalCount";
    let description = "";
    let node_id = NodeId::new(0, 3104);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_205(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSubscriptionCount";
    let display_name = "CurrentSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 3105);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_206(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CumulatedSubscriptionCount";
    let display_name = "CumulatedSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 3106);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_207(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityRejectedRequestsCount";
    let display_name = "SecurityRejectedRequestsCount";
    let description = "";
    let node_id = NodeId::new(0, 3107);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_208(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RejectedRequestsCount";
    let display_name = "RejectedRequestsCount";
    let description = "";
    let node_id = NodeId::new(0, 3108);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3095), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_209(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionDiagnosticsArray";
    let display_name = "SubscriptionDiagnosticsArray";
    let description = "A list of diagnostics for each active subscription.";
    let node_id = NodeId::new(0, 3110);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2010), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2010), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_210(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnosticsArray";
    let display_name = "SessionDiagnosticsArray";
    let description = "A list of diagnostics for each active session.";
    let node_id = NodeId::new(0, 3112);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3111), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3111), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_211(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnosticsArray";
    let display_name = "SessionSecurityDiagnosticsArray";
    let description = "A list of security related diagnostics for each active session.";
    let node_id = NodeId::new(0, 3113);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3111), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3111), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_212(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnabledFlag";
    let display_name = "EnabledFlag";
    let description = "If TRUE the diagnostics collection is enabled.";
    let node_id = NodeId::new(0, 3114);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2010), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2010), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_213(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RedundancySupport";
    let display_name = "RedundancySupport";
    let description = "Indicates what style of redundancy is supported by the server.";
    let node_id = NodeId::new(0, 3115);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(851u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2012), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2012), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_214(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11490);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11489), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11489), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_215(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ServerHandles"),
                data_type: NodeId::new(0, 7),
                value_rank: 1,
                array_dimensions: Some(vec![0]),
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ClientHandles"),
                data_type: NodeId::new(0, 7),
                value_rank: 1,
                array_dimensions: Some(vec![0]),
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11491);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11489), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11489), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_216(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12872);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12871), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12871), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_217(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("LifetimeInHours"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12747);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12746), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12746), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_218(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("RevisedLifetimeInHours"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12748);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12746), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12746), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_219(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("State"),
                data_type: NodeId::new(0, 852),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("EstimatedReturnTime"),
                data_type: NodeId::new(0, 13),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SecondsTillShutdown"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Reason"),
                data_type: NodeId::new(0, 21),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Restart"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12884);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12883), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12883), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_220(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerProfileArray";
    let display_name = "ServerProfileArray";
    let description = "A list of profiles supported by the server.";
    let node_id = NodeId::new(0, 2014);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_221(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LocaleIdArray";
    let display_name = "LocaleIdArray";
    let description = "A list of locales supported by the server.";
    let node_id = NodeId::new(0, 2016);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_222(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MinSupportedSampleRate";
    let display_name = "MinSupportedSampleRate";
    let description = "The minimum sampling interval supported by the server.";
    let node_id = NodeId::new(0, 2017);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_223(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxBrowseContinuationPoints";
    let display_name = "MaxBrowseContinuationPoints";
    let description = "The maximum number of continuation points for Browse operations per session.";
    let node_id = NodeId::new(0, 2732);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_224(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxQueryContinuationPoints";
    let display_name = "MaxQueryContinuationPoints";
    let description = "The maximum number of continuation points for Query operations per session.";
    let node_id = NodeId::new(0, 2733);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_225(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxHistoryContinuationPoints";
    let display_name = "MaxHistoryContinuationPoints";
    let description = "The maximum number of continuation points for ReadHistory operations per session.";
    let node_id = NodeId::new(0, 2734);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_226(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SoftwareCertificates";
    let display_name = "SoftwareCertificates";
    let description = "The software certificates owned by the server.";
    let node_id = NodeId::new(0, 3049);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(344u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_227(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxArrayLength";
    let display_name = "MaxArrayLength";
    let description = "The maximum length for an array value supported by the server.";
    let node_id = NodeId::new(0, 11549);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_228(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxStringLength";
    let display_name = "MaxStringLength";
    let description = "The maximum length for a string value supported by the server.";
    let node_id = NodeId::new(0, 11550);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_229(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxByteStringLength";
    let display_name = "MaxByteStringLength";
    let description = "The maximum length for a byte string value supported by the server.";
    let node_id = NodeId::new(0, 12910);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_230(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "<VendorCapability>";
    let display_name = "<VendorCapability>";
    let description = "";
    let node_id = NodeId::new(0, 11562);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2013), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2137), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2013), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_231(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerDiagnosticsSummary";
    let display_name = "ServerDiagnosticsSummary";
    let description = "A summary of server level diagnostics.";
    let node_id = NodeId::new(0, 2021);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(859u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2020), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3116), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3117), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3118), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3119), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3120), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3121), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3122), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3124), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3125), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3126), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3127), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3128), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2020), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_232(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerViewCount";
    let display_name = "ServerViewCount";
    let description = "";
    let node_id = NodeId::new(0, 3116);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_233(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSessionCount";
    let display_name = "CurrentSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3117);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_234(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CumulatedSessionCount";
    let display_name = "CumulatedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3118);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_235(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityRejectedSessionCount";
    let display_name = "SecurityRejectedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3119);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_236(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RejectedSessionCount";
    let display_name = "RejectedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3120);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_237(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionTimeoutCount";
    let display_name = "SessionTimeoutCount";
    let description = "";
    let node_id = NodeId::new(0, 3121);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_238(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionAbortCount";
    let display_name = "SessionAbortCount";
    let description = "";
    let node_id = NodeId::new(0, 3122);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_239(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishingIntervalCount";
    let display_name = "PublishingIntervalCount";
    let description = "";
    let node_id = NodeId::new(0, 3124);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_240(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSubscriptionCount";
    let display_name = "CurrentSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 3125);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_241(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CumulatedSubscriptionCount";
    let display_name = "CumulatedSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 3126);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_242(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityRejectedRequestsCount";
    let display_name = "SecurityRejectedRequestsCount";
    let description = "";
    let node_id = NodeId::new(0, 3127);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_243(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RejectedRequestsCount";
    let display_name = "RejectedRequestsCount";
    let description = "";
    let node_id = NodeId::new(0, 3128);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2021), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2021), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_244(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SamplingIntervalDiagnosticsArray";
    let display_name = "SamplingIntervalDiagnosticsArray";
    let description = "A list of diagnostics for each sampling interval supported by the server.";
    let node_id = NodeId::new(0, 2022);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(856u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2020), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2164), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2020), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_245(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionDiagnosticsArray";
    let display_name = "SubscriptionDiagnosticsArray";
    let description = "A list of diagnostics for each active subscription.";
    let node_id = NodeId::new(0, 2023);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2020), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2020), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_246(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnosticsArray";
    let display_name = "SessionDiagnosticsArray";
    let description = "A list of diagnostics for each active session.";
    let node_id = NodeId::new(0, 3129);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2744), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2744), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_247(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnosticsArray";
    let display_name = "SessionSecurityDiagnosticsArray";
    let description = "A list of security related diagnostics for each active session.";
    let node_id = NodeId::new(0, 3130);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2744), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2744), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_248(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnabledFlag";
    let display_name = "EnabledFlag";
    let description = "If TRUE the diagnostics collection is enabled.";
    let node_id = NodeId::new(0, 2025);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2020), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2020), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_249(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnosticsArray";
    let display_name = "SessionDiagnosticsArray";
    let description = "A list of diagnostics for each active session.";
    let node_id = NodeId::new(0, 2027);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2026), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2026), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_250(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnosticsArray";
    let display_name = "SessionSecurityDiagnosticsArray";
    let description = "A list of security related diagnostics for each active session.";
    let node_id = NodeId::new(0, 2028);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2026), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2026), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_251(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnostics";
    let display_name = "SessionDiagnostics";
    let description = "Diagnostics information for an active session.";
    let node_id = NodeId::new(0, 12098);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12097), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12099), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12100), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12101), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12102), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12103), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12104), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12105), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12106), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12107), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12108), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12109), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12110), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12111), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12112), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12113), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12114), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12115), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12116), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12117), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12118), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12119), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12120), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12121), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12122), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12123), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12124), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12125), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12126), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12127), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12128), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12129), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12130), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12131), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12132), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12133), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12134), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12135), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12136), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12137), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12138), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12139), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12140), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12141), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12097), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_252(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 12099);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_253(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionName";
    let display_name = "SessionName";
    let description = "";
    let node_id = NodeId::new(0, 12100);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_254(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientDescription";
    let display_name = "ClientDescription";
    let description = "";
    let node_id = NodeId::new(0, 12101);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(308u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_255(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerUri";
    let display_name = "ServerUri";
    let description = "";
    let node_id = NodeId::new(0, 12102);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_256(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointUrl";
    let display_name = "EndpointUrl";
    let description = "";
    let node_id = NodeId::new(0, 12103);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_257(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LocaleIds";
    let display_name = "LocaleIds";
    let description = "";
    let node_id = NodeId::new(0, 12104);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_258(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ActualSessionTimeout";
    let display_name = "ActualSessionTimeout";
    let description = "";
    let node_id = NodeId::new(0, 12105);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_259(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxResponseMessageSize";
    let display_name = "MaxResponseMessageSize";
    let description = "";
    let node_id = NodeId::new(0, 12106);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_260(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientConnectionTime";
    let display_name = "ClientConnectionTime";
    let description = "";
    let node_id = NodeId::new(0, 12107);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_261(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientLastContactTime";
    let display_name = "ClientLastContactTime";
    let description = "";
    let node_id = NodeId::new(0, 12108);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_262(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSubscriptionsCount";
    let display_name = "CurrentSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 12109);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_263(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentMonitoredItemsCount";
    let display_name = "CurrentMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12110);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_264(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentPublishRequestsInQueue";
    let display_name = "CurrentPublishRequestsInQueue";
    let description = "";
    let node_id = NodeId::new(0, 12111);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_265(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TotalRequestCount";
    let display_name = "TotalRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12112);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_266(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnauthorizedRequestCount";
    let display_name = "UnauthorizedRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12113);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_267(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ReadCount";
    let display_name = "ReadCount";
    let description = "";
    let node_id = NodeId::new(0, 12114);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_268(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryReadCount";
    let display_name = "HistoryReadCount";
    let description = "";
    let node_id = NodeId::new(0, 12115);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_269(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "WriteCount";
    let display_name = "WriteCount";
    let description = "";
    let node_id = NodeId::new(0, 12116);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_270(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryUpdateCount";
    let display_name = "HistoryUpdateCount";
    let description = "";
    let node_id = NodeId::new(0, 12117);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_271(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CallCount";
    let display_name = "CallCount";
    let description = "";
    let node_id = NodeId::new(0, 12118);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_272(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CreateMonitoredItemsCount";
    let display_name = "CreateMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12119);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_273(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifyMonitoredItemsCount";
    let display_name = "ModifyMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12120);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_274(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetMonitoringModeCount";
    let display_name = "SetMonitoringModeCount";
    let description = "";
    let node_id = NodeId::new(0, 12121);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_275(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetTriggeringCount";
    let display_name = "SetTriggeringCount";
    let description = "";
    let node_id = NodeId::new(0, 12122);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_276(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteMonitoredItemsCount";
    let display_name = "DeleteMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12123);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_277(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CreateSubscriptionCount";
    let display_name = "CreateSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 12124);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_278(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifySubscriptionCount";
    let display_name = "ModifySubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 12125);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_279(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetPublishingModeCount";
    let display_name = "SetPublishingModeCount";
    let description = "";
    let node_id = NodeId::new(0, 12126);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_280(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishCount";
    let display_name = "PublishCount";
    let description = "";
    let node_id = NodeId::new(0, 12127);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_281(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishCount";
    let display_name = "RepublishCount";
    let description = "";
    let node_id = NodeId::new(0, 12128);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_282(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferSubscriptionsCount";
    let display_name = "TransferSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 12129);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_283(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteSubscriptionsCount";
    let display_name = "DeleteSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 12130);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_284(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddNodesCount";
    let display_name = "AddNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 12131);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_285(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddReferencesCount";
    let display_name = "AddReferencesCount";
    let description = "";
    let node_id = NodeId::new(0, 12132);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_286(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteNodesCount";
    let display_name = "DeleteNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 12133);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_287(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteReferencesCount";
    let display_name = "DeleteReferencesCount";
    let description = "";
    let node_id = NodeId::new(0, 12134);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_288(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BrowseCount";
    let display_name = "BrowseCount";
    let description = "";
    let node_id = NodeId::new(0, 12135);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_289(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BrowseNextCount";
    let display_name = "BrowseNextCount";
    let description = "";
    let node_id = NodeId::new(0, 12136);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_290(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TranslateBrowsePathsToNodeIdsCount";
    let display_name = "TranslateBrowsePathsToNodeIdsCount";
    let description = "";
    let node_id = NodeId::new(0, 12137);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_291(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "QueryFirstCount";
    let display_name = "QueryFirstCount";
    let description = "";
    let node_id = NodeId::new(0, 12138);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_292(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "QueryNextCount";
    let display_name = "QueryNextCount";
    let description = "";
    let node_id = NodeId::new(0, 12139);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_293(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RegisterNodesCount";
    let display_name = "RegisterNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 12140);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_294(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnregisterNodesCount";
    let display_name = "UnregisterNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 12141);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12098), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12098), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_295(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnostics";
    let display_name = "SessionSecurityDiagnostics";
    let description = "Security related diagnostics information for an active session.";
    let node_id = NodeId::new(0, 12142);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12097), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12143), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12144), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12145), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12146), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12147), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12148), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12149), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12150), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12151), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12097), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_296(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 12143);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_297(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserIdOfSession";
    let display_name = "ClientUserIdOfSession";
    let description = "";
    let node_id = NodeId::new(0, 12144);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_298(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserIdHistory";
    let display_name = "ClientUserIdHistory";
    let description = "";
    let node_id = NodeId::new(0, 12145);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_299(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AuthenticationMechanism";
    let display_name = "AuthenticationMechanism";
    let description = "";
    let node_id = NodeId::new(0, 12146);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_300(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Encoding";
    let display_name = "Encoding";
    let description = "";
    let node_id = NodeId::new(0, 12147);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_301(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransportProtocol";
    let display_name = "TransportProtocol";
    let description = "";
    let node_id = NodeId::new(0, 12148);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_302(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityMode";
    let display_name = "SecurityMode";
    let description = "";
    let node_id = NodeId::new(0, 12149);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_303(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityPolicyUri";
    let display_name = "SecurityPolicyUri";
    let description = "";
    let node_id = NodeId::new(0, 12150);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_304(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientCertificate";
    let display_name = "ClientCertificate";
    let description = "";
    let node_id = NodeId::new(0, 12151);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_305(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionDiagnosticsArray";
    let display_name = "SubscriptionDiagnosticsArray";
    let description = "A list of diagnostics for each subscription owned by the session.";
    let node_id = NodeId::new(0, 12152);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12097), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12097), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_306(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnostics";
    let display_name = "SessionDiagnostics";
    let description = "Diagnostics information for an active session.";
    let node_id = NodeId::new(0, 2030);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2029), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3131), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3132), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3133), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3134), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3135), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3136), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3137), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3138), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3139), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3140), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3141), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3142), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3143), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8898), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11891), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3151), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3152), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3153), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3154), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3155), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3156), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3157), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3158), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3159), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3160), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3161), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3162), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3163), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3164), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3165), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3166), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3167), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3168), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3169), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3170), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3171), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3172), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3173), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3174), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3175), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3176), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3177), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3178), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2029), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_307(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 3131);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_308(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionName";
    let display_name = "SessionName";
    let description = "";
    let node_id = NodeId::new(0, 3132);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_309(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientDescription";
    let display_name = "ClientDescription";
    let description = "";
    let node_id = NodeId::new(0, 3133);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(308u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_310(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerUri";
    let display_name = "ServerUri";
    let description = "";
    let node_id = NodeId::new(0, 3134);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_311(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointUrl";
    let display_name = "EndpointUrl";
    let description = "";
    let node_id = NodeId::new(0, 3135);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_312(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LocaleIds";
    let display_name = "LocaleIds";
    let description = "";
    let node_id = NodeId::new(0, 3136);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_313(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ActualSessionTimeout";
    let display_name = "ActualSessionTimeout";
    let description = "";
    let node_id = NodeId::new(0, 3137);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_314(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxResponseMessageSize";
    let display_name = "MaxResponseMessageSize";
    let description = "";
    let node_id = NodeId::new(0, 3138);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_315(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientConnectionTime";
    let display_name = "ClientConnectionTime";
    let description = "";
    let node_id = NodeId::new(0, 3139);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_316(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientLastContactTime";
    let display_name = "ClientLastContactTime";
    let description = "";
    let node_id = NodeId::new(0, 3140);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_317(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSubscriptionsCount";
    let display_name = "CurrentSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 3141);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_318(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentMonitoredItemsCount";
    let display_name = "CurrentMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 3142);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_319(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentPublishRequestsInQueue";
    let display_name = "CurrentPublishRequestsInQueue";
    let description = "";
    let node_id = NodeId::new(0, 3143);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_320(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TotalRequestCount";
    let display_name = "TotalRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 8898);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_321(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnauthorizedRequestCount";
    let display_name = "UnauthorizedRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 11891);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_322(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ReadCount";
    let display_name = "ReadCount";
    let description = "";
    let node_id = NodeId::new(0, 3151);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_323(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryReadCount";
    let display_name = "HistoryReadCount";
    let description = "";
    let node_id = NodeId::new(0, 3152);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_324(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "WriteCount";
    let display_name = "WriteCount";
    let description = "";
    let node_id = NodeId::new(0, 3153);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_325(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryUpdateCount";
    let display_name = "HistoryUpdateCount";
    let description = "";
    let node_id = NodeId::new(0, 3154);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_326(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CallCount";
    let display_name = "CallCount";
    let description = "";
    let node_id = NodeId::new(0, 3155);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_327(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CreateMonitoredItemsCount";
    let display_name = "CreateMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 3156);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_328(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifyMonitoredItemsCount";
    let display_name = "ModifyMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 3157);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_329(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetMonitoringModeCount";
    let display_name = "SetMonitoringModeCount";
    let description = "";
    let node_id = NodeId::new(0, 3158);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_330(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetTriggeringCount";
    let display_name = "SetTriggeringCount";
    let description = "";
    let node_id = NodeId::new(0, 3159);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_331(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteMonitoredItemsCount";
    let display_name = "DeleteMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 3160);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_332(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CreateSubscriptionCount";
    let display_name = "CreateSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 3161);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_333(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifySubscriptionCount";
    let display_name = "ModifySubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 3162);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_334(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetPublishingModeCount";
    let display_name = "SetPublishingModeCount";
    let description = "";
    let node_id = NodeId::new(0, 3163);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_335(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishCount";
    let display_name = "PublishCount";
    let description = "";
    let node_id = NodeId::new(0, 3164);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_336(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishCount";
    let display_name = "RepublishCount";
    let description = "";
    let node_id = NodeId::new(0, 3165);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_337(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferSubscriptionsCount";
    let display_name = "TransferSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 3166);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_338(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteSubscriptionsCount";
    let display_name = "DeleteSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 3167);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_339(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddNodesCount";
    let display_name = "AddNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 3168);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_340(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddReferencesCount";
    let display_name = "AddReferencesCount";
    let description = "";
    let node_id = NodeId::new(0, 3169);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_341(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteNodesCount";
    let display_name = "DeleteNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 3170);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_342(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteReferencesCount";
    let display_name = "DeleteReferencesCount";
    let description = "";
    let node_id = NodeId::new(0, 3171);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_343(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BrowseCount";
    let display_name = "BrowseCount";
    let description = "";
    let node_id = NodeId::new(0, 3172);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_344(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BrowseNextCount";
    let display_name = "BrowseNextCount";
    let description = "";
    let node_id = NodeId::new(0, 3173);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_345(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TranslateBrowsePathsToNodeIdsCount";
    let display_name = "TranslateBrowsePathsToNodeIdsCount";
    let description = "";
    let node_id = NodeId::new(0, 3174);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_346(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "QueryFirstCount";
    let display_name = "QueryFirstCount";
    let description = "";
    let node_id = NodeId::new(0, 3175);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_347(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "QueryNextCount";
    let display_name = "QueryNextCount";
    let description = "";
    let node_id = NodeId::new(0, 3176);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_348(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RegisterNodesCount";
    let display_name = "RegisterNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 3177);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_349(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnregisterNodesCount";
    let display_name = "UnregisterNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 3178);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2030), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2030), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_350(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnostics";
    let display_name = "SessionSecurityDiagnostics";
    let description = "Security related diagnostics information for an active session.";
    let node_id = NodeId::new(0, 2031);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2029), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3179), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3180), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3181), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3182), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3183), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3184), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3185), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3186), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3187), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2029), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_351(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 3179);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_352(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserIdOfSession";
    let display_name = "ClientUserIdOfSession";
    let description = "";
    let node_id = NodeId::new(0, 3180);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_353(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserIdHistory";
    let display_name = "ClientUserIdHistory";
    let description = "";
    let node_id = NodeId::new(0, 3181);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_354(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AuthenticationMechanism";
    let display_name = "AuthenticationMechanism";
    let description = "";
    let node_id = NodeId::new(0, 3182);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_355(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Encoding";
    let display_name = "Encoding";
    let description = "";
    let node_id = NodeId::new(0, 3183);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_356(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransportProtocol";
    let display_name = "TransportProtocol";
    let description = "";
    let node_id = NodeId::new(0, 3184);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_357(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityMode";
    let display_name = "SecurityMode";
    let description = "";
    let node_id = NodeId::new(0, 3185);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_358(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityPolicyUri";
    let display_name = "SecurityPolicyUri";
    let description = "";
    let node_id = NodeId::new(0, 3186);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_359(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientCertificate";
    let display_name = "ClientCertificate";
    let description = "";
    let node_id = NodeId::new(0, 3187);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2031), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2031), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_360(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionDiagnosticsArray";
    let display_name = "SubscriptionDiagnosticsArray";
    let description = "A list of diagnostics for each subscription owned by the session.";
    let node_id = NodeId::new(0, 2032);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2029), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2029), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_361(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RedundancySupport";
    let display_name = "RedundancySupport";
    let description = "Indicates what style of redundancy is supported by the server.";
    let node_id = NodeId::new(0, 2035);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(851u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2034), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2034), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_362(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentServerId";
    let display_name = "CurrentServerId";
    let description = "The ID of the server that is currently in use.";
    let node_id = NodeId::new(0, 2037);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2036), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2036), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_363(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RedundantServerArray";
    let display_name = "RedundantServerArray";
    let description = "A list of servers in the same redundant set.";
    let node_id = NodeId::new(0, 2038);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(853u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2036), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2036), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_364(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerUriArray";
    let display_name = "ServerUriArray";
    let description = "A list of servers in the same redundant set.";
    let node_id = NodeId::new(0, 2040);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2039), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2039), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_365(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerNetworkGroups";
    let display_name = "ServerNetworkGroups";
    let description = "";
    let node_id = NodeId::new(0, 11948);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(11944u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11945), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11945), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_366(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerRead";
    let display_name = "MaxNodesPerRead";
    let description = "The maximum number of operations in a single Read request.";
    let node_id = NodeId::new(0, 11565);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_367(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerHistoryReadData";
    let display_name = "MaxNodesPerHistoryReadData";
    let description = "The maximum number of operations in a single data HistoryRead request.";
    let node_id = NodeId::new(0, 12161);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_368(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerHistoryReadEvents";
    let display_name = "MaxNodesPerHistoryReadEvents";
    let description = "The maximum number of operations in a single event HistoryRead request.";
    let node_id = NodeId::new(0, 12162);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_369(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerWrite";
    let display_name = "MaxNodesPerWrite";
    let description = "The maximum number of operations in a single Write request.";
    let node_id = NodeId::new(0, 11567);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_370(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerHistoryUpdateData";
    let display_name = "MaxNodesPerHistoryUpdateData";
    let description = "The maximum number of operations in a single data HistoryUpdate request.";
    let node_id = NodeId::new(0, 12163);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_371(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerHistoryUpdateEvents";
    let display_name = "MaxNodesPerHistoryUpdateEvents";
    let description = "The maximum number of operations in a single event HistoryUpdate request.";
    let node_id = NodeId::new(0, 12164);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_372(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerMethodCall";
    let display_name = "MaxNodesPerMethodCall";
    let description = "The maximum number of operations in a single Call request.";
    let node_id = NodeId::new(0, 11569);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_373(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerBrowse";
    let display_name = "MaxNodesPerBrowse";
    let description = "The maximum number of operations in a single Browse request.";
    let node_id = NodeId::new(0, 11570);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_374(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerRegisterNodes";
    let display_name = "MaxNodesPerRegisterNodes";
    let description = "The maximum number of operations in a single RegisterNodes request.";
    let node_id = NodeId::new(0, 11571);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_375(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
    let display_name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
    let description = "The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.";
    let node_id = NodeId::new(0, 11572);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_376(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerNodeManagement";
    let display_name = "MaxNodesPerNodeManagement";
    let description = "The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.";
    let node_id = NodeId::new(0, 11573);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_377(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxMonitoredItemsPerCall";
    let display_name = "MaxMonitoredItemsPerCall";
    let description = "The maximum number of operations in a single MonitoredItem related request.";
    let node_id = NodeId::new(0, 11574);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11564), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11564), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_378(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Size";
    let display_name = "Size";
    let description = "The size of the file in bytes.";
    let node_id = NodeId::new(0, 11576);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_379(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Writable";
    let display_name = "Writable";
    let description = "Whether the file is writable.";
    let node_id = NodeId::new(0, 12686);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_380(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserWritable";
    let display_name = "UserWritable";
    let description = "Whether the file is writable by the current user.";
    let node_id = NodeId::new(0, 12687);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_381(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OpenCount";
    let display_name = "OpenCount";
    let description = "The current number of open file handles.";
    let node_id = NodeId::new(0, 11579);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_382(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MimeType";
    let display_name = "MimeType";
    let description = "The content of the file.";
    let node_id = NodeId::new(0, 13341);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_383(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Mode"),
                data_type: NodeId::new(0, 3),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11581);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11580), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11580), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_384(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11582);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11580), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11580), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_385(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11584);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11583), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11583), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_386(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Length"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11586);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11585), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11585), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_387(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11587);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11585), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11585), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_388(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11589);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11588), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11588), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_389(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11591);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11590), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11590), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_390(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11592);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11590), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11590), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_391(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11594);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11593), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11593), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_392(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("DirectoryName"),
                data_type: NodeId::new(0, 12),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13356);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13355), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13355), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_393(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("DirectoryNodeId"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13357);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13355), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13355), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_394(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileName"),
                data_type: NodeId::new(0, 12),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("RequestFileOpen"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13359);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13358), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13358), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_395(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileNodeId"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13360);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13358), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13358), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_396(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ObjectToDelete"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13362);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13361), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13361), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_397(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ObjectToMoveOrCopy"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("TargetDirectory"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("CreateCopy"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("NewName"),
                data_type: NodeId::new(0, 12),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13364);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13363), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13363), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_398(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("NewNodeId"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13365);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13363), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13363), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_399(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Size";
    let display_name = "Size";
    let description = "The size of the file in bytes.";
    let node_id = NodeId::new(0, 13367);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_400(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Writable";
    let display_name = "Writable";
    let description = "Whether the file is writable.";
    let node_id = NodeId::new(0, 13368);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_401(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserWritable";
    let display_name = "UserWritable";
    let description = "Whether the file is writable by the current user.";
    let node_id = NodeId::new(0, 13369);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_402(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OpenCount";
    let display_name = "OpenCount";
    let description = "The current number of open file handles.";
    let node_id = NodeId::new(0, 13370);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_403(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Mode"),
                data_type: NodeId::new(0, 3),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13373);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13372), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13372), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_404(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13374);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13372), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13372), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_405(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13376);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13375), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13375), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_406(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Length"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13378);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13377), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13377), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_407(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13379);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13377), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13377), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_408(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13381);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13380), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13380), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_409(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13383);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13382), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13382), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_410(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13384);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13382), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13382), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_411(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13386);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13385), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13385), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_412(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("DirectoryName"),
                data_type: NodeId::new(0, 12),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13388);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13387), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13387), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_413(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("DirectoryNodeId"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13389);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13387), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13387), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_414(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileName"),
                data_type: NodeId::new(0, 12),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("RequestFileOpen"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13391);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13390), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13390), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_415(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileNodeId"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13392);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13390), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13390), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_416(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ObjectToDelete"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13394);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13393), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13393), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_417(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ObjectToMoveOrCopy"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("TargetDirectory"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("CreateCopy"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("NewName"),
                data_type: NodeId::new(0, 12),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13396);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13395), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13395), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_418(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("NewNodeId"),
                data_type: NodeId::new(0, 17),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13397);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13395), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13395), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_419(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceUri";
    let display_name = "NamespaceUri";
    let description = "The URI of the namespace.";
    let node_id = NodeId::new(0, 11617);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11616), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_420(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceVersion";
    let display_name = "NamespaceVersion";
    let description = "The human readable string representing version of the namespace.";
    let node_id = NodeId::new(0, 11618);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11616), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_421(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespacePublicationDate";
    let display_name = "NamespacePublicationDate";
    let description = "The publication date for the namespace.";
    let node_id = NodeId::new(0, 11619);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11616), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_422(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "IsNamespaceSubset";
    let display_name = "IsNamespaceSubset";
    let description = "If TRUE then the server only supports a subset of the namespace.";
    let node_id = NodeId::new(0, 11620);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11616), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_423(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticNodeIdTypes";
    let display_name = "StaticNodeIdTypes";
    let description = "A list of IdTypes for nodes which are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 11621);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(256u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11616), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_424(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticNumericNodeIdRange";
    let display_name = "StaticNumericNodeIdRange";
    let description = "A list of ranges for numeric node ids which are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 11622);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(291u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11616), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_425(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticStringNodeIdPattern";
    let display_name = "StaticStringNodeIdPattern";
    let description = "A regular expression which matches string node ids are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 11623);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11616), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11616), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_426(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Size";
    let display_name = "Size";
    let description = "The size of the file in bytes.";
    let node_id = NodeId::new(0, 11625);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_427(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Writable";
    let display_name = "Writable";
    let description = "Whether the file is writable.";
    let node_id = NodeId::new(0, 12690);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_428(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserWritable";
    let display_name = "UserWritable";
    let description = "Whether the file is writable by the current user.";
    let node_id = NodeId::new(0, 12691);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_429(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OpenCount";
    let display_name = "OpenCount";
    let description = "The current number of open file handles.";
    let node_id = NodeId::new(0, 11628);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_430(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Mode"),
                data_type: NodeId::new(0, 3),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11630);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11629), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11629), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_431(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11631);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11629), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11629), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_432(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11633);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11632), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11632), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_433(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Length"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11635);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11634), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11634), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_434(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11636);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11634), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11634), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_435(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11638);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11637), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11637), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_436(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11640);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11639), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11639), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_437(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11641);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11639), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11639), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_438(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11643);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11642), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11642), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_439(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceUri";
    let display_name = "NamespaceUri";
    let description = "The URI of the namespace.";
    let node_id = NodeId::new(0, 11647);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11646), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11646), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_440(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceVersion";
    let display_name = "NamespaceVersion";
    let description = "The human readable string representing version of the namespace.";
    let node_id = NodeId::new(0, 11648);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11646), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11646), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_441(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespacePublicationDate";
    let display_name = "NamespacePublicationDate";
    let description = "The publication date for the namespace.";
    let node_id = NodeId::new(0, 11649);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11646), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11646), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_442(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "IsNamespaceSubset";
    let display_name = "IsNamespaceSubset";
    let description = "If TRUE then the server only supports a subset of the namespace.";
    let node_id = NodeId::new(0, 11650);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11646), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11646), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_443(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticNodeIdTypes";
    let display_name = "StaticNodeIdTypes";
    let description = "A list of IdTypes for nodes which are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 11651);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(256u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11646), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11646), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_444(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticNumericNodeIdRange";
    let display_name = "StaticNumericNodeIdRange";
    let description = "A list of ranges for numeric node ids which are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 11652);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(291u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11646), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11646), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_445(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticStringNodeIdPattern";
    let display_name = "StaticStringNodeIdPattern";
    let description = "A regular expression which matches string node ids are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 11653);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11646), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11646), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_446(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Size";
    let display_name = "Size";
    let description = "The size of the file in bytes.";
    let node_id = NodeId::new(0, 11676);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_447(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Writable";
    let display_name = "Writable";
    let description = "Whether the file is writable.";
    let node_id = NodeId::new(0, 12694);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_448(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserWritable";
    let display_name = "UserWritable";
    let description = "Whether the file is writable by the current user.";
    let node_id = NodeId::new(0, 12695);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_449(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OpenCount";
    let display_name = "OpenCount";
    let description = "The current number of open file handles.";
    let node_id = NodeId::new(0, 11679);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_450(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Mode"),
                data_type: NodeId::new(0, 3),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11681);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11680), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11680), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_451(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11682);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11680), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11680), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_452(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11684);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11683), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11683), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_453(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Length"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11686);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11685), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11685), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_454(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11687);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11685), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11685), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_455(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11689);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11688), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11688), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_456(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11691);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11690), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11690), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_457(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11692);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11690), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11690), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_458(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11694);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11693), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11693), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_459(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EventId";
    let display_name = "EventId";
    let description = "A globally unique identifier for the event.";
    let node_id = NodeId::new(0, 2042);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_460(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EventType";
    let display_name = "EventType";
    let description = "The identifier for the event type.";
    let node_id = NodeId::new(0, 2043);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_461(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SourceNode";
    let display_name = "SourceNode";
    let description = "The source of the event.";
    let node_id = NodeId::new(0, 2044);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_462(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SourceName";
    let display_name = "SourceName";
    let description = "A description of the source of the event.";
    let node_id = NodeId::new(0, 2045);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_463(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Time";
    let display_name = "Time";
    let description = "When the event occurred.";
    let node_id = NodeId::new(0, 2046);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_464(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ReceiveTime";
    let display_name = "ReceiveTime";
    let description = "When the server received the event from the underlying system.";
    let node_id = NodeId::new(0, 2047);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_465(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LocalTime";
    let display_name = "LocalTime";
    let description = "Information about the local time where the event originated.";
    let node_id = NodeId::new(0, 3190);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(8912u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_466(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Message";
    let display_name = "Message";
    let description = "A localized description of the event.";
    let node_id = NodeId::new(0, 2050);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_467(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Severity";
    let display_name = "Severity";
    let description = "Indicates how urgent an event is.";
    let node_id = NodeId::new(0, 2051);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2041), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_468(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ActionTimeStamp";
    let display_name = "ActionTimeStamp";
    let description = "When the action triggering the event occurred.";
    let node_id = NodeId::new(0, 2053);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2052), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2052), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_469(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Status";
    let display_name = "Status";
    let description = "If TRUE the action was performed. If FALSE the action failed and the server state did not change.";
    let node_id = NodeId::new(0, 2054);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2052), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2052), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_470(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerId";
    let display_name = "ServerId";
    let description = "The unique identifier for the server generating the event.";
    let node_id = NodeId::new(0, 2055);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2052), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2052), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_471(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientAuditEntryId";
    let display_name = "ClientAuditEntryId";
    let description = "The log entry id provided in the request that initiated the action.";
    let node_id = NodeId::new(0, 2056);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2052), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2052), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_472(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserId";
    let display_name = "ClientUserId";
    let description = "The user identity associated with the session that initiated the action.";
    let node_id = NodeId::new(0, 2057);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2052), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2052), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_473(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecureChannelId";
    let display_name = "SecureChannelId";
    let description = "The identifier for the secure channel that was changed.";
    let node_id = NodeId::new(0, 2745);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2059), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2059), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_474(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientCertificate";
    let display_name = "ClientCertificate";
    let description = "The certificate provided by the client.";
    let node_id = NodeId::new(0, 2061);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2060), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2060), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_475(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientCertificateThumbprint";
    let display_name = "ClientCertificateThumbprint";
    let description = "The thumbprint for certificate provided by the client.";
    let node_id = NodeId::new(0, 2746);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2060), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2060), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_476(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RequestType";
    let display_name = "RequestType";
    let description = "The type of request (NEW or RENEW).";
    let node_id = NodeId::new(0, 2062);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(315u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2060), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2060), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_477(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityPolicyUri";
    let display_name = "SecurityPolicyUri";
    let description = "The security policy used by the channel.";
    let node_id = NodeId::new(0, 2063);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2060), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2060), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_478(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityMode";
    let display_name = "SecurityMode";
    let description = "The security mode used by the channel.";
    let node_id = NodeId::new(0, 2065);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2060), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2060), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_479(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RequestedLifetime";
    let display_name = "RequestedLifetime";
    let description = "The lifetime of the channel requested by the client.";
    let node_id = NodeId::new(0, 2066);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2060), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2060), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_480(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "The unique identifier for the session,.";
    let node_id = NodeId::new(0, 2070);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2069), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2069), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_481(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecureChannelId";
    let display_name = "SecureChannelId";
    let description = "The secure channel associated with the session.";
    let node_id = NodeId::new(0, 2072);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2071), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2071), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_482(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientCertificate";
    let display_name = "ClientCertificate";
    let description = "The certificate provided by the client.";
    let node_id = NodeId::new(0, 2073);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2071), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2071), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_483(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientCertificateThumbprint";
    let display_name = "ClientCertificateThumbprint";
    let description = "The thumbprint of the certificate provided by the client.";
    let node_id = NodeId::new(0, 2747);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2071), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2071), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_484(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RevisedSessionTimeout";
    let display_name = "RevisedSessionTimeout";
    let description = "The timeout for the session.";
    let node_id = NodeId::new(0, 2074);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2071), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2071), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_485(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointUrl";
    let display_name = "EndpointUrl";
    let description = "";
    let node_id = NodeId::new(0, 2749);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2748), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2748), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_486(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientSoftwareCertificates";
    let display_name = "ClientSoftwareCertificates";
    let description = "";
    let node_id = NodeId::new(0, 2076);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(344u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2075), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2075), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_487(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserIdentityToken";
    let display_name = "UserIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 2077);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(316u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2075), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2075), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_488(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecureChannelId";
    let display_name = "SecureChannelId";
    let description = "";
    let node_id = NodeId::new(0, 11485);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2075), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2075), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_489(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RequestHandle";
    let display_name = "RequestHandle";
    let description = "";
    let node_id = NodeId::new(0, 2079);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2078), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2078), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_490(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Certificate";
    let display_name = "Certificate";
    let description = "";
    let node_id = NodeId::new(0, 2081);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2080), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2080), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_491(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "InvalidHostname";
    let display_name = "InvalidHostname";
    let description = "";
    let node_id = NodeId::new(0, 2083);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2082), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2082), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_492(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "InvalidUri";
    let display_name = "InvalidUri";
    let description = "";
    let node_id = NodeId::new(0, 2084);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2082), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2082), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_493(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NodesToAdd";
    let display_name = "NodesToAdd";
    let description = "";
    let node_id = NodeId::new(0, 2092);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(376u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2091), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2091), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_494(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NodesToDelete";
    let display_name = "NodesToDelete";
    let description = "";
    let node_id = NodeId::new(0, 2094);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(382u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2093), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2093), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_495(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ReferencesToAdd";
    let display_name = "ReferencesToAdd";
    let description = "";
    let node_id = NodeId::new(0, 2096);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(379u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2095), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2095), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_496(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ReferencesToDelete";
    let display_name = "ReferencesToDelete";
    let description = "";
    let node_id = NodeId::new(0, 2098);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(385u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2097), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2097), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_497(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AttributeId";
    let display_name = "AttributeId";
    let description = "";
    let node_id = NodeId::new(0, 2750);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2100), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2100), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_498(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "IndexRange";
    let display_name = "IndexRange";
    let description = "";
    let node_id = NodeId::new(0, 2101);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(291u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2100), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2100), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_499(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OldValue";
    let display_name = "OldValue";
    let description = "";
    let node_id = NodeId::new(0, 2102);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2100), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2100), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_500(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NewValue";
    let display_name = "NewValue";
    let description = "";
    let node_id = NodeId::new(0, 2103);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2100), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2100), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_501(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ParameterDataTypeId";
    let display_name = "ParameterDataTypeId";
    let description = "";
    let node_id = NodeId::new(0, 2751);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2104), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2104), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_502(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MethodId";
    let display_name = "MethodId";
    let description = "";
    let node_id = NodeId::new(0, 2128);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2127), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2127), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_503(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 2129);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2127), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2127), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_504(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SystemState";
    let display_name = "SystemState";
    let description = "";
    let node_id = NodeId::new(0, 11696);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(852u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11446), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11446), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_505(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Changes";
    let display_name = "Changes";
    let description = "";
    let node_id = NodeId::new(0, 2134);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(877u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2133), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2133), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_506(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Changes";
    let display_name = "Changes";
    let description = "";
    let node_id = NodeId::new(0, 2739);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(897u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2738), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2738), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_507(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Context";
    let display_name = "Context";
    let description = "";
    let node_id = NodeId::new(0, 12502);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11436), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11436), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_508(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Progress";
    let display_name = "Progress";
    let description = "";
    let node_id = NodeId::new(0, 12503);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11436), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11436), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_509(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StartTime";
    let display_name = "StartTime";
    let description = "";
    let node_id = NodeId::new(0, 2139);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_510(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentTime";
    let display_name = "CurrentTime";
    let description = "";
    let node_id = NodeId::new(0, 2140);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_511(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "State";
    let display_name = "State";
    let description = "";
    let node_id = NodeId::new(0, 2141);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(852u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_512(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildInfo";
    let display_name = "BuildInfo";
    let description = "";
    let node_id = NodeId::new(0, 2142);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(338u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3698), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3699), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3700), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3701), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3702), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3703), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_513(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProductUri";
    let display_name = "ProductUri";
    let description = "";
    let node_id = NodeId::new(0, 3698);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_514(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ManufacturerName";
    let display_name = "ManufacturerName";
    let description = "";
    let node_id = NodeId::new(0, 3699);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_515(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProductName";
    let display_name = "ProductName";
    let description = "";
    let node_id = NodeId::new(0, 3700);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_516(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SoftwareVersion";
    let display_name = "SoftwareVersion";
    let description = "";
    let node_id = NodeId::new(0, 3701);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_517(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildNumber";
    let display_name = "BuildNumber";
    let description = "";
    let node_id = NodeId::new(0, 3702);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_518(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildDate";
    let display_name = "BuildDate";
    let description = "";
    let node_id = NodeId::new(0, 3703);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_519(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecondsTillShutdown";
    let display_name = "SecondsTillShutdown";
    let description = "";
    let node_id = NodeId::new(0, 2752);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_520(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ShutdownReason";
    let display_name = "ShutdownReason";
    let description = "";
    let node_id = NodeId::new(0, 2753);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_521(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProductUri";
    let display_name = "ProductUri";
    let description = "";
    let node_id = NodeId::new(0, 3052);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_522(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ManufacturerName";
    let display_name = "ManufacturerName";
    let description = "";
    let node_id = NodeId::new(0, 3053);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_523(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProductName";
    let display_name = "ProductName";
    let description = "";
    let node_id = NodeId::new(0, 3054);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_524(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SoftwareVersion";
    let display_name = "SoftwareVersion";
    let description = "";
    let node_id = NodeId::new(0, 3055);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_525(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildNumber";
    let display_name = "BuildNumber";
    let description = "";
    let node_id = NodeId::new(0, 3056);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_526(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildDate";
    let display_name = "BuildDate";
    let description = "";
    let node_id = NodeId::new(0, 3057);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_527(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerViewCount";
    let display_name = "ServerViewCount";
    let description = "";
    let node_id = NodeId::new(0, 2151);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_528(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSessionCount";
    let display_name = "CurrentSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 2152);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_529(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CumulatedSessionCount";
    let display_name = "CumulatedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 2153);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_530(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityRejectedSessionCount";
    let display_name = "SecurityRejectedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 2154);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_531(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RejectedSessionCount";
    let display_name = "RejectedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 2155);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_532(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionTimeoutCount";
    let display_name = "SessionTimeoutCount";
    let description = "";
    let node_id = NodeId::new(0, 2156);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_533(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionAbortCount";
    let display_name = "SessionAbortCount";
    let description = "";
    let node_id = NodeId::new(0, 2157);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_534(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishingIntervalCount";
    let display_name = "PublishingIntervalCount";
    let description = "";
    let node_id = NodeId::new(0, 2159);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_535(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSubscriptionCount";
    let display_name = "CurrentSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 2160);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_536(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CumulatedSubscriptionCount";
    let display_name = "CumulatedSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 2161);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_537(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityRejectedRequestsCount";
    let display_name = "SecurityRejectedRequestsCount";
    let description = "";
    let node_id = NodeId::new(0, 2162);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_538(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RejectedRequestsCount";
    let display_name = "RejectedRequestsCount";
    let description = "";
    let node_id = NodeId::new(0, 2163);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_539(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SamplingIntervalDiagnostics";
    let display_name = "SamplingIntervalDiagnostics";
    let description = "";
    let node_id = NodeId::new(0, 12779);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(856u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2164), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12780), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12781), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12782), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12783), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 83), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2164), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_540(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SamplingInterval";
    let display_name = "SamplingInterval";
    let description = "";
    let node_id = NodeId::new(0, 12780);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_541(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SampledMonitoredItemsCount";
    let display_name = "SampledMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12781);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_542(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxSampledMonitoredItemsCount";
    let display_name = "MaxSampledMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12782);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_543(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DisabledMonitoredItemsSamplingCount";
    let display_name = "DisabledMonitoredItemsSamplingCount";
    let description = "";
    let node_id = NodeId::new(0, 12783);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_544(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SamplingInterval";
    let display_name = "SamplingInterval";
    let description = "";
    let node_id = NodeId::new(0, 2166);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2165), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_545(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SampledMonitoredItemsCount";
    let display_name = "SampledMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 11697);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2165), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_546(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxSampledMonitoredItemsCount";
    let display_name = "MaxSampledMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 11698);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2165), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_547(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DisabledMonitoredItemsSamplingCount";
    let display_name = "DisabledMonitoredItemsSamplingCount";
    let description = "";
    let node_id = NodeId::new(0, 11699);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2165), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_548(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionDiagnostics";
    let display_name = "SubscriptionDiagnostics";
    let description = "";
    let node_id = NodeId::new(0, 12784);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2171), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12785), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12786), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12787), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12788), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12789), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12790), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12791), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12792), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12793), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12794), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12795), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12796), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12797), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12798), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12799), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12800), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12801), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12802), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12803), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12804), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12805), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12806), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12807), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12808), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12809), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12810), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12811), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12812), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12813), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12814), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12815), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 83), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2171), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_549(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 12785);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_550(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionId";
    let display_name = "SubscriptionId";
    let description = "";
    let node_id = NodeId::new(0, 12786);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_551(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Priority";
    let display_name = "Priority";
    let description = "";
    let node_id = NodeId::new(0, 12787);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_552(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishingInterval";
    let display_name = "PublishingInterval";
    let description = "";
    let node_id = NodeId::new(0, 12788);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Double, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_553(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxKeepAliveCount";
    let display_name = "MaxKeepAliveCount";
    let description = "";
    let node_id = NodeId::new(0, 12789);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_554(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxLifetimeCount";
    let display_name = "MaxLifetimeCount";
    let description = "";
    let node_id = NodeId::new(0, 12790);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_555(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNotificationsPerPublish";
    let display_name = "MaxNotificationsPerPublish";
    let description = "";
    let node_id = NodeId::new(0, 12791);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_556(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishingEnabled";
    let display_name = "PublishingEnabled";
    let description = "";
    let node_id = NodeId::new(0, 12792);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_557(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifyCount";
    let display_name = "ModifyCount";
    let description = "";
    let node_id = NodeId::new(0, 12793);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_558(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnableCount";
    let display_name = "EnableCount";
    let description = "";
    let node_id = NodeId::new(0, 12794);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_559(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DisableCount";
    let display_name = "DisableCount";
    let description = "";
    let node_id = NodeId::new(0, 12795);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_560(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishRequestCount";
    let display_name = "RepublishRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12796);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_561(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishMessageRequestCount";
    let display_name = "RepublishMessageRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12797);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_562(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishMessageCount";
    let display_name = "RepublishMessageCount";
    let description = "";
    let node_id = NodeId::new(0, 12798);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_563(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferRequestCount";
    let display_name = "TransferRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12799);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_564(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferredToAltClientCount";
    let display_name = "TransferredToAltClientCount";
    let description = "";
    let node_id = NodeId::new(0, 12800);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_565(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferredToSameClientCount";
    let display_name = "TransferredToSameClientCount";
    let description = "";
    let node_id = NodeId::new(0, 12801);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_566(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishRequestCount";
    let display_name = "PublishRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12802);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_567(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DataChangeNotificationsCount";
    let display_name = "DataChangeNotificationsCount";
    let description = "";
    let node_id = NodeId::new(0, 12803);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_568(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EventNotificationsCount";
    let display_name = "EventNotificationsCount";
    let description = "";
    let node_id = NodeId::new(0, 12804);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_569(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NotificationsCount";
    let display_name = "NotificationsCount";
    let description = "";
    let node_id = NodeId::new(0, 12805);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_570(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LatePublishRequestCount";
    let display_name = "LatePublishRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12806);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_571(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentKeepAliveCount";
    let display_name = "CurrentKeepAliveCount";
    let description = "";
    let node_id = NodeId::new(0, 12807);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_572(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentLifetimeCount";
    let display_name = "CurrentLifetimeCount";
    let description = "";
    let node_id = NodeId::new(0, 12808);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_573(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnacknowledgedMessageCount";
    let display_name = "UnacknowledgedMessageCount";
    let description = "";
    let node_id = NodeId::new(0, 12809);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_574(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DiscardedMessageCount";
    let display_name = "DiscardedMessageCount";
    let description = "";
    let node_id = NodeId::new(0, 12810);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_575(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MonitoredItemCount";
    let display_name = "MonitoredItemCount";
    let description = "";
    let node_id = NodeId::new(0, 12811);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_576(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DisabledMonitoredItemCount";
    let display_name = "DisabledMonitoredItemCount";
    let description = "";
    let node_id = NodeId::new(0, 12812);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_577(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MonitoringQueueOverflowCount";
    let display_name = "MonitoringQueueOverflowCount";
    let description = "";
    let node_id = NodeId::new(0, 12813);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_578(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NextSequenceNumber";
    let display_name = "NextSequenceNumber";
    let description = "";
    let node_id = NodeId::new(0, 12814);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_579(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EventQueueOverFlowCount";
    let display_name = "EventQueueOverFlowCount";
    let description = "";
    let node_id = NodeId::new(0, 12815);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_580(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 2173);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_581(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionId";
    let display_name = "SubscriptionId";
    let description = "";
    let node_id = NodeId::new(0, 2174);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_582(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Priority";
    let display_name = "Priority";
    let description = "";
    let node_id = NodeId::new(0, 2175);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_583(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishingInterval";
    let display_name = "PublishingInterval";
    let description = "";
    let node_id = NodeId::new(0, 2176);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Double, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_584(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxKeepAliveCount";
    let display_name = "MaxKeepAliveCount";
    let description = "";
    let node_id = NodeId::new(0, 2177);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_585(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxLifetimeCount";
    let display_name = "MaxLifetimeCount";
    let description = "";
    let node_id = NodeId::new(0, 8888);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_586(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNotificationsPerPublish";
    let display_name = "MaxNotificationsPerPublish";
    let description = "";
    let node_id = NodeId::new(0, 2179);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_587(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishingEnabled";
    let display_name = "PublishingEnabled";
    let description = "";
    let node_id = NodeId::new(0, 2180);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_588(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifyCount";
    let display_name = "ModifyCount";
    let description = "";
    let node_id = NodeId::new(0, 2181);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_589(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnableCount";
    let display_name = "EnableCount";
    let description = "";
    let node_id = NodeId::new(0, 2182);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_590(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DisableCount";
    let display_name = "DisableCount";
    let description = "";
    let node_id = NodeId::new(0, 2183);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_591(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishRequestCount";
    let display_name = "RepublishRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 2184);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_592(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishMessageRequestCount";
    let display_name = "RepublishMessageRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 2185);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_593(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishMessageCount";
    let display_name = "RepublishMessageCount";
    let description = "";
    let node_id = NodeId::new(0, 2186);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_594(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferRequestCount";
    let display_name = "TransferRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 2187);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_595(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferredToAltClientCount";
    let display_name = "TransferredToAltClientCount";
    let description = "";
    let node_id = NodeId::new(0, 2188);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_596(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferredToSameClientCount";
    let display_name = "TransferredToSameClientCount";
    let description = "";
    let node_id = NodeId::new(0, 2189);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_597(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishRequestCount";
    let display_name = "PublishRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 2190);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_598(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DataChangeNotificationsCount";
    let display_name = "DataChangeNotificationsCount";
    let description = "";
    let node_id = NodeId::new(0, 2191);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_599(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EventNotificationsCount";
    let display_name = "EventNotificationsCount";
    let description = "";
    let node_id = NodeId::new(0, 2998);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_600(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NotificationsCount";
    let display_name = "NotificationsCount";
    let description = "";
    let node_id = NodeId::new(0, 2193);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_601(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LatePublishRequestCount";
    let display_name = "LatePublishRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 8889);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_602(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentKeepAliveCount";
    let display_name = "CurrentKeepAliveCount";
    let description = "";
    let node_id = NodeId::new(0, 8890);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_603(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentLifetimeCount";
    let display_name = "CurrentLifetimeCount";
    let description = "";
    let node_id = NodeId::new(0, 8891);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_604(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnacknowledgedMessageCount";
    let display_name = "UnacknowledgedMessageCount";
    let description = "";
    let node_id = NodeId::new(0, 8892);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_605(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DiscardedMessageCount";
    let display_name = "DiscardedMessageCount";
    let description = "";
    let node_id = NodeId::new(0, 8893);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_606(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MonitoredItemCount";
    let display_name = "MonitoredItemCount";
    let description = "";
    let node_id = NodeId::new(0, 8894);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_607(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DisabledMonitoredItemCount";
    let display_name = "DisabledMonitoredItemCount";
    let description = "";
    let node_id = NodeId::new(0, 8895);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_608(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MonitoringQueueOverflowCount";
    let display_name = "MonitoringQueueOverflowCount";
    let description = "";
    let node_id = NodeId::new(0, 8896);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_609(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NextSequenceNumber";
    let display_name = "NextSequenceNumber";
    let description = "";
    let node_id = NodeId::new(0, 8897);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_610(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EventQueueOverFlowCount";
    let display_name = "EventQueueOverFlowCount";
    let description = "";
    let node_id = NodeId::new(0, 8902);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_611(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnostics";
    let display_name = "SessionDiagnostics";
    let description = "";
    let node_id = NodeId::new(0, 12816);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2196), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12817), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12818), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12819), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12820), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12821), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12822), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12823), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12824), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12825), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12826), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12827), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12828), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12829), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12830), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12831), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12832), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12833), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12834), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12835), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12836), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12837), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12838), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12839), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12840), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12841), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12842), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12843), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12844), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12845), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12846), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12847), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12848), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12849), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12850), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12851), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12852), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12853), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12854), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12855), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12856), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12857), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12858), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12859), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 83), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2196), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_612(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 12817);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_613(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionName";
    let display_name = "SessionName";
    let description = "";
    let node_id = NodeId::new(0, 12818);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_614(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientDescription";
    let display_name = "ClientDescription";
    let description = "";
    let node_id = NodeId::new(0, 12819);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(308u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_615(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerUri";
    let display_name = "ServerUri";
    let description = "";
    let node_id = NodeId::new(0, 12820);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_616(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointUrl";
    let display_name = "EndpointUrl";
    let description = "";
    let node_id = NodeId::new(0, 12821);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_617(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LocaleIds";
    let display_name = "LocaleIds";
    let description = "";
    let node_id = NodeId::new(0, 12822);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_618(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ActualSessionTimeout";
    let display_name = "ActualSessionTimeout";
    let description = "";
    let node_id = NodeId::new(0, 12823);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_619(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxResponseMessageSize";
    let display_name = "MaxResponseMessageSize";
    let description = "";
    let node_id = NodeId::new(0, 12824);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_620(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientConnectionTime";
    let display_name = "ClientConnectionTime";
    let description = "";
    let node_id = NodeId::new(0, 12825);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_621(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientLastContactTime";
    let display_name = "ClientLastContactTime";
    let description = "";
    let node_id = NodeId::new(0, 12826);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_622(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSubscriptionsCount";
    let display_name = "CurrentSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 12827);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_623(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentMonitoredItemsCount";
    let display_name = "CurrentMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12828);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_624(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentPublishRequestsInQueue";
    let display_name = "CurrentPublishRequestsInQueue";
    let description = "";
    let node_id = NodeId::new(0, 12829);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_625(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TotalRequestCount";
    let display_name = "TotalRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12830);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_626(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnauthorizedRequestCount";
    let display_name = "UnauthorizedRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 12831);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_627(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ReadCount";
    let display_name = "ReadCount";
    let description = "";
    let node_id = NodeId::new(0, 12832);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_628(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryReadCount";
    let display_name = "HistoryReadCount";
    let description = "";
    let node_id = NodeId::new(0, 12833);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_629(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "WriteCount";
    let display_name = "WriteCount";
    let description = "";
    let node_id = NodeId::new(0, 12834);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_630(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryUpdateCount";
    let display_name = "HistoryUpdateCount";
    let description = "";
    let node_id = NodeId::new(0, 12835);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_631(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CallCount";
    let display_name = "CallCount";
    let description = "";
    let node_id = NodeId::new(0, 12836);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_632(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CreateMonitoredItemsCount";
    let display_name = "CreateMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12837);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_633(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifyMonitoredItemsCount";
    let display_name = "ModifyMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12838);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_634(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetMonitoringModeCount";
    let display_name = "SetMonitoringModeCount";
    let description = "";
    let node_id = NodeId::new(0, 12839);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_635(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetTriggeringCount";
    let display_name = "SetTriggeringCount";
    let description = "";
    let node_id = NodeId::new(0, 12840);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_636(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteMonitoredItemsCount";
    let display_name = "DeleteMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 12841);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_637(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CreateSubscriptionCount";
    let display_name = "CreateSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 12842);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_638(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifySubscriptionCount";
    let display_name = "ModifySubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 12843);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_639(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetPublishingModeCount";
    let display_name = "SetPublishingModeCount";
    let description = "";
    let node_id = NodeId::new(0, 12844);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_640(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishCount";
    let display_name = "PublishCount";
    let description = "";
    let node_id = NodeId::new(0, 12845);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_641(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishCount";
    let display_name = "RepublishCount";
    let description = "";
    let node_id = NodeId::new(0, 12846);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_642(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferSubscriptionsCount";
    let display_name = "TransferSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 12847);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_643(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteSubscriptionsCount";
    let display_name = "DeleteSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 12848);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_644(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddNodesCount";
    let display_name = "AddNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 12849);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_645(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddReferencesCount";
    let display_name = "AddReferencesCount";
    let description = "";
    let node_id = NodeId::new(0, 12850);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_646(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteNodesCount";
    let display_name = "DeleteNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 12851);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_647(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteReferencesCount";
    let display_name = "DeleteReferencesCount";
    let description = "";
    let node_id = NodeId::new(0, 12852);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_648(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BrowseCount";
    let display_name = "BrowseCount";
    let description = "";
    let node_id = NodeId::new(0, 12853);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_649(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BrowseNextCount";
    let display_name = "BrowseNextCount";
    let description = "";
    let node_id = NodeId::new(0, 12854);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_650(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TranslateBrowsePathsToNodeIdsCount";
    let display_name = "TranslateBrowsePathsToNodeIdsCount";
    let description = "";
    let node_id = NodeId::new(0, 12855);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_651(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "QueryFirstCount";
    let display_name = "QueryFirstCount";
    let description = "";
    let node_id = NodeId::new(0, 12856);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_652(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "QueryNextCount";
    let display_name = "QueryNextCount";
    let description = "";
    let node_id = NodeId::new(0, 12857);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_653(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RegisterNodesCount";
    let display_name = "RegisterNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 12858);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_654(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnregisterNodesCount";
    let display_name = "UnregisterNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 12859);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_655(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 2198);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_656(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionName";
    let display_name = "SessionName";
    let description = "";
    let node_id = NodeId::new(0, 2199);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_657(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientDescription";
    let display_name = "ClientDescription";
    let description = "";
    let node_id = NodeId::new(0, 2200);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(308u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_658(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerUri";
    let display_name = "ServerUri";
    let description = "";
    let node_id = NodeId::new(0, 2201);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_659(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointUrl";
    let display_name = "EndpointUrl";
    let description = "";
    let node_id = NodeId::new(0, 2202);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_660(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LocaleIds";
    let display_name = "LocaleIds";
    let description = "";
    let node_id = NodeId::new(0, 2203);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_661(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ActualSessionTimeout";
    let display_name = "ActualSessionTimeout";
    let description = "";
    let node_id = NodeId::new(0, 2204);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_662(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxResponseMessageSize";
    let display_name = "MaxResponseMessageSize";
    let description = "";
    let node_id = NodeId::new(0, 3050);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_663(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientConnectionTime";
    let display_name = "ClientConnectionTime";
    let description = "";
    let node_id = NodeId::new(0, 2205);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_664(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientLastContactTime";
    let display_name = "ClientLastContactTime";
    let description = "";
    let node_id = NodeId::new(0, 2206);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_665(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSubscriptionsCount";
    let display_name = "CurrentSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 2207);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_666(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentMonitoredItemsCount";
    let display_name = "CurrentMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 2208);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_667(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentPublishRequestsInQueue";
    let display_name = "CurrentPublishRequestsInQueue";
    let description = "";
    let node_id = NodeId::new(0, 2209);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_668(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TotalRequestCount";
    let display_name = "TotalRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 8900);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_669(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnauthorizedRequestCount";
    let display_name = "UnauthorizedRequestCount";
    let description = "";
    let node_id = NodeId::new(0, 11892);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_670(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ReadCount";
    let display_name = "ReadCount";
    let description = "";
    let node_id = NodeId::new(0, 2217);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_671(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryReadCount";
    let display_name = "HistoryReadCount";
    let description = "";
    let node_id = NodeId::new(0, 2218);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_672(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "WriteCount";
    let display_name = "WriteCount";
    let description = "";
    let node_id = NodeId::new(0, 2219);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_673(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryUpdateCount";
    let display_name = "HistoryUpdateCount";
    let description = "";
    let node_id = NodeId::new(0, 2220);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_674(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CallCount";
    let display_name = "CallCount";
    let description = "";
    let node_id = NodeId::new(0, 2221);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_675(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CreateMonitoredItemsCount";
    let display_name = "CreateMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 2222);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_676(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifyMonitoredItemsCount";
    let display_name = "ModifyMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 2223);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_677(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetMonitoringModeCount";
    let display_name = "SetMonitoringModeCount";
    let description = "";
    let node_id = NodeId::new(0, 2224);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_678(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetTriggeringCount";
    let display_name = "SetTriggeringCount";
    let description = "";
    let node_id = NodeId::new(0, 2225);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_679(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteMonitoredItemsCount";
    let display_name = "DeleteMonitoredItemsCount";
    let description = "";
    let node_id = NodeId::new(0, 2226);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_680(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CreateSubscriptionCount";
    let display_name = "CreateSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 2227);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_681(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModifySubscriptionCount";
    let display_name = "ModifySubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 2228);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_682(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SetPublishingModeCount";
    let display_name = "SetPublishingModeCount";
    let description = "";
    let node_id = NodeId::new(0, 2229);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_683(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishCount";
    let display_name = "PublishCount";
    let description = "";
    let node_id = NodeId::new(0, 2230);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_684(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RepublishCount";
    let display_name = "RepublishCount";
    let description = "";
    let node_id = NodeId::new(0, 2231);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_685(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransferSubscriptionsCount";
    let display_name = "TransferSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 2232);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_686(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteSubscriptionsCount";
    let display_name = "DeleteSubscriptionsCount";
    let description = "";
    let node_id = NodeId::new(0, 2233);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_687(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddNodesCount";
    let display_name = "AddNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 2234);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_688(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddReferencesCount";
    let display_name = "AddReferencesCount";
    let description = "";
    let node_id = NodeId::new(0, 2235);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_689(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteNodesCount";
    let display_name = "DeleteNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 2236);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_690(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteReferencesCount";
    let display_name = "DeleteReferencesCount";
    let description = "";
    let node_id = NodeId::new(0, 2237);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_691(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BrowseCount";
    let display_name = "BrowseCount";
    let description = "";
    let node_id = NodeId::new(0, 2238);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_692(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BrowseNextCount";
    let display_name = "BrowseNextCount";
    let description = "";
    let node_id = NodeId::new(0, 2239);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_693(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TranslateBrowsePathsToNodeIdsCount";
    let display_name = "TranslateBrowsePathsToNodeIdsCount";
    let description = "";
    let node_id = NodeId::new(0, 2240);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_694(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "QueryFirstCount";
    let display_name = "QueryFirstCount";
    let description = "";
    let node_id = NodeId::new(0, 2241);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_695(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "QueryNextCount";
    let display_name = "QueryNextCount";
    let description = "";
    let node_id = NodeId::new(0, 2242);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_696(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RegisterNodesCount";
    let display_name = "RegisterNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 2730);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_697(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UnregisterNodesCount";
    let display_name = "UnregisterNodesCount";
    let description = "";
    let node_id = NodeId::new(0, 2731);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(871u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2197), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2197), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_698(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnostics";
    let display_name = "SessionSecurityDiagnostics";
    let description = "";
    let node_id = NodeId::new(0, 12860);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2243), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12861), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12862), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12863), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12864), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12865), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12866), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12867), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12868), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12869), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 83), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2243), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_699(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 12861);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_700(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserIdOfSession";
    let display_name = "ClientUserIdOfSession";
    let description = "";
    let node_id = NodeId::new(0, 12862);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_701(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserIdHistory";
    let display_name = "ClientUserIdHistory";
    let description = "";
    let node_id = NodeId::new(0, 12863);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_702(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AuthenticationMechanism";
    let display_name = "AuthenticationMechanism";
    let description = "";
    let node_id = NodeId::new(0, 12864);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_703(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Encoding";
    let display_name = "Encoding";
    let description = "";
    let node_id = NodeId::new(0, 12865);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_704(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransportProtocol";
    let display_name = "TransportProtocol";
    let description = "";
    let node_id = NodeId::new(0, 12866);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_705(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityMode";
    let display_name = "SecurityMode";
    let description = "";
    let node_id = NodeId::new(0, 12867);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_706(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityPolicyUri";
    let display_name = "SecurityPolicyUri";
    let description = "";
    let node_id = NodeId::new(0, 12868);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_707(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientCertificate";
    let display_name = "ClientCertificate";
    let description = "";
    let node_id = NodeId::new(0, 12869);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_708(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionId";
    let display_name = "SessionId";
    let description = "";
    let node_id = NodeId::new(0, 2245);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_709(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserIdOfSession";
    let display_name = "ClientUserIdOfSession";
    let description = "";
    let node_id = NodeId::new(0, 2246);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_710(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserIdHistory";
    let display_name = "ClientUserIdHistory";
    let description = "";
    let node_id = NodeId::new(0, 2247);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_711(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AuthenticationMechanism";
    let display_name = "AuthenticationMechanism";
    let description = "";
    let node_id = NodeId::new(0, 2248);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_712(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Encoding";
    let display_name = "Encoding";
    let description = "";
    let node_id = NodeId::new(0, 2249);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_713(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransportProtocol";
    let display_name = "TransportProtocol";
    let description = "";
    let node_id = NodeId::new(0, 2250);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_714(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityMode";
    let display_name = "SecurityMode";
    let description = "";
    let node_id = NodeId::new(0, 2251);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(302u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_715(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityPolicyUri";
    let display_name = "SecurityPolicyUri";
    let description = "";
    let node_id = NodeId::new(0, 2252);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_716(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientCertificate";
    let display_name = "ClientCertificate";
    let description = "";
    let node_id = NodeId::new(0, 3058);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2244), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2244), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_717(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OptionSetValues";
    let display_name = "OptionSetValues";
    let description = "";
    let node_id = NodeId::new(0, 11488);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11487), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11487), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_718(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BitMask";
    let display_name = "BitMask";
    let description = "";
    let node_id = NodeId::new(0, 11701);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11487), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11487), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_719(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerArray";
    let display_name = "ServerArray";
    let description = "The list of server URIs used by the server.";
    let node_id = NodeId::new(0, 2254);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_720(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceArray";
    let display_name = "NamespaceArray";
    let description = "The list of namespace URIs used by the server.";
    let node_id = NodeId::new(0, 2255);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_721(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerStatus";
    let display_name = "ServerStatus";
    let description = "The current status of the server.";
    let node_id = NodeId::new(0, 2256);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(862u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2257), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2258), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2259), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2992), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2993), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_722(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StartTime";
    let display_name = "StartTime";
    let description = "";
    let node_id = NodeId::new(0, 2257);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_723(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentTime";
    let display_name = "CurrentTime";
    let description = "";
    let node_id = NodeId::new(0, 2258);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_724(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "State";
    let display_name = "State";
    let description = "";
    let node_id = NodeId::new(0, 2259);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(852u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_725(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildInfo";
    let display_name = "BuildInfo";
    let description = "";
    let node_id = NodeId::new(0, 2260);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(338u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2262), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2263), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2261), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2264), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2265), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2266), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_726(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProductUri";
    let display_name = "ProductUri";
    let description = "";
    let node_id = NodeId::new(0, 2262);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_727(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ManufacturerName";
    let display_name = "ManufacturerName";
    let description = "";
    let node_id = NodeId::new(0, 2263);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_728(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProductName";
    let display_name = "ProductName";
    let description = "";
    let node_id = NodeId::new(0, 2261);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_729(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SoftwareVersion";
    let display_name = "SoftwareVersion";
    let description = "";
    let node_id = NodeId::new(0, 2264);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_730(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildNumber";
    let display_name = "BuildNumber";
    let description = "";
    let node_id = NodeId::new(0, 2265);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_731(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildDate";
    let display_name = "BuildDate";
    let description = "";
    let node_id = NodeId::new(0, 2266);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2260), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2260), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_732(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecondsTillShutdown";
    let display_name = "SecondsTillShutdown";
    let description = "";
    let node_id = NodeId::new(0, 2992);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_733(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ShutdownReason";
    let display_name = "ShutdownReason";
    let description = "";
    let node_id = NodeId::new(0, 2993);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2256), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2256), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_734(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServiceLevel";
    let display_name = "ServiceLevel";
    let description = "A value indicating the level of service the server can provide. 255 indicates the best.";
    let node_id = NodeId::new(0, 2267);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_735(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Auditing";
    let display_name = "Auditing";
    let description = "A flag indicating whether the server is currently generating audit events.";
    let node_id = NodeId::new(0, 2994);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_736(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EstimatedReturnTime";
    let display_name = "EstimatedReturnTime";
    let description = "Indicates the time at which the Server is expected to be available in the state RUNNING.";
    let node_id = NodeId::new(0, 12885);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_737(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerProfileArray";
    let display_name = "ServerProfileArray";
    let description = "A list of profiles supported by the server.";
    let node_id = NodeId::new(0, 2269);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_738(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LocaleIdArray";
    let display_name = "LocaleIdArray";
    let description = "A list of locales supported by the server.";
    let node_id = NodeId::new(0, 2271);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(295u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_739(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MinSupportedSampleRate";
    let display_name = "MinSupportedSampleRate";
    let description = "The minimum sampling interval supported by the server.";
    let node_id = NodeId::new(0, 2272);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_740(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxBrowseContinuationPoints";
    let display_name = "MaxBrowseContinuationPoints";
    let description = "The maximum number of continuation points for Browse operations per session.";
    let node_id = NodeId::new(0, 2735);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_741(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxQueryContinuationPoints";
    let display_name = "MaxQueryContinuationPoints";
    let description = "The maximum number of continuation points for Query operations per session.";
    let node_id = NodeId::new(0, 2736);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_742(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxHistoryContinuationPoints";
    let display_name = "MaxHistoryContinuationPoints";
    let description = "The maximum number of continuation points for ReadHistory operations per session.";
    let node_id = NodeId::new(0, 2737);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_743(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SoftwareCertificates";
    let display_name = "SoftwareCertificates";
    let description = "The software certificates owned by the server.";
    let node_id = NodeId::new(0, 3704);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(344u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_744(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxArrayLength";
    let display_name = "MaxArrayLength";
    let description = "The maximum length for an array value supported by the server.";
    let node_id = NodeId::new(0, 11702);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_745(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxStringLength";
    let display_name = "MaxStringLength";
    let description = "The maximum length for a string value supported by the server.";
    let node_id = NodeId::new(0, 11703);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_746(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxByteStringLength";
    let display_name = "MaxByteStringLength";
    let description = "The maximum length for a byte string value supported by the server.";
    let node_id = NodeId::new(0, 12911);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2268), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2268), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_747(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerRead";
    let display_name = "MaxNodesPerRead";
    let description = "The maximum number of operations in a single Read request.";
    let node_id = NodeId::new(0, 11705);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_748(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerHistoryReadData";
    let display_name = "MaxNodesPerHistoryReadData";
    let description = "The maximum number of operations in a single data HistoryRead request.";
    let node_id = NodeId::new(0, 12165);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_749(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerHistoryReadEvents";
    let display_name = "MaxNodesPerHistoryReadEvents";
    let description = "The maximum number of operations in a single event HistoryRead request.";
    let node_id = NodeId::new(0, 12166);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_750(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerWrite";
    let display_name = "MaxNodesPerWrite";
    let description = "The maximum number of operations in a single Write request.";
    let node_id = NodeId::new(0, 11707);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_751(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerHistoryUpdateData";
    let display_name = "MaxNodesPerHistoryUpdateData";
    let description = "The maximum number of operations in a single data HistoryUpdate request.";
    let node_id = NodeId::new(0, 12167);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_752(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerHistoryUpdateEvents";
    let display_name = "MaxNodesPerHistoryUpdateEvents";
    let description = "The maximum number of operations in a single event HistoryUpdate request.";
    let node_id = NodeId::new(0, 12168);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_753(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerMethodCall";
    let display_name = "MaxNodesPerMethodCall";
    let description = "The maximum number of operations in a single Call request.";
    let node_id = NodeId::new(0, 11709);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_754(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerBrowse";
    let display_name = "MaxNodesPerBrowse";
    let description = "The maximum number of operations in a single Browse request.";
    let node_id = NodeId::new(0, 11710);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_755(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerRegisterNodes";
    let display_name = "MaxNodesPerRegisterNodes";
    let description = "The maximum number of operations in a single RegisterNodes request.";
    let node_id = NodeId::new(0, 11711);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_756(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
    let display_name = "MaxNodesPerTranslateBrowsePathsToNodeIds";
    let description = "The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.";
    let node_id = NodeId::new(0, 11712);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_757(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxNodesPerNodeManagement";
    let display_name = "MaxNodesPerNodeManagement";
    let description = "The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.";
    let node_id = NodeId::new(0, 11713);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_758(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MaxMonitoredItemsPerCall";
    let display_name = "MaxMonitoredItemsPerCall";
    let description = "The maximum number of operations in a single MonitoredItem related request.";
    let node_id = NodeId::new(0, 11714);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11704), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11704), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_759(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerDiagnosticsSummary";
    let display_name = "ServerDiagnosticsSummary";
    let description = "A summary of server level diagnostics.";
    let node_id = NodeId::new(0, 2275);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(859u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2276), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2277), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2278), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2279), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3705), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2281), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2282), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2284), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2285), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2286), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2287), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2288), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_760(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerViewCount";
    let display_name = "ServerViewCount";
    let description = "";
    let node_id = NodeId::new(0, 2276);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_761(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSessionCount";
    let display_name = "CurrentSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 2277);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_762(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CumulatedSessionCount";
    let display_name = "CumulatedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 2278);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_763(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityRejectedSessionCount";
    let display_name = "SecurityRejectedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 2279);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_764(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RejectedSessionCount";
    let display_name = "RejectedSessionCount";
    let description = "";
    let node_id = NodeId::new(0, 3705);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_765(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionTimeoutCount";
    let display_name = "SessionTimeoutCount";
    let description = "";
    let node_id = NodeId::new(0, 2281);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_766(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionAbortCount";
    let display_name = "SessionAbortCount";
    let description = "";
    let node_id = NodeId::new(0, 2282);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_767(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "PublishingIntervalCount";
    let display_name = "PublishingIntervalCount";
    let description = "";
    let node_id = NodeId::new(0, 2284);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_768(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentSubscriptionCount";
    let display_name = "CurrentSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 2285);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_769(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CumulatedSubscriptionCount";
    let display_name = "CumulatedSubscriptionCount";
    let description = "";
    let node_id = NodeId::new(0, 2286);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_770(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SecurityRejectedRequestsCount";
    let display_name = "SecurityRejectedRequestsCount";
    let description = "";
    let node_id = NodeId::new(0, 2287);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_771(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RejectedRequestsCount";
    let display_name = "RejectedRequestsCount";
    let description = "";
    let node_id = NodeId::new(0, 2288);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2275), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2275), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_772(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SamplingIntervalDiagnosticsArray";
    let display_name = "SamplingIntervalDiagnosticsArray";
    let description = "A list of diagnostics for each sampling interval supported by the server.";
    let node_id = NodeId::new(0, 2289);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(856u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2164), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_773(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionDiagnosticsArray";
    let display_name = "SubscriptionDiagnosticsArray";
    let description = "A list of diagnostics for each active subscription.";
    let node_id = NodeId::new(0, 2290);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(874u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2171), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_774(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnosticsArray";
    let display_name = "SessionDiagnosticsArray";
    let description = "A list of diagnostics for each active session.";
    let node_id = NodeId::new(0, 3707);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(865u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3706), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2196), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 3706), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_775(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnosticsArray";
    let display_name = "SessionSecurityDiagnosticsArray";
    let description = "A list of security related diagnostics for each active session.";
    let node_id = NodeId::new(0, 3708);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(868u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3706), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 2243), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 3706), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_776(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnabledFlag";
    let display_name = "EnabledFlag";
    let description = "If TRUE the diagnostics collection is enabled.";
    let node_id = NodeId::new(0, 2294);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2274), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2274), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_777(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RedundancySupport";
    let display_name = "RedundancySupport";
    let description = "Indicates what style of redundancy is supported by the server.";
    let node_id = NodeId::new(0, 3709);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(851u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_778(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentServerId";
    let display_name = "CurrentServerId";
    let description = "";
    let node_id = NodeId::new(0, 11312);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_779(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RedundantServerArray";
    let display_name = "RedundantServerArray";
    let description = "";
    let node_id = NodeId::new(0, 11313);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(853u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_780(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerUriArray";
    let display_name = "ServerUriArray";
    let description = "";
    let node_id = NodeId::new(0, 11314);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_781(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerNetworkGroups";
    let display_name = "ServerNetworkGroups";
    let description = "";
    let node_id = NodeId::new(0, 14415);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(11944u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2296), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2296), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_782(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceUri";
    let display_name = "NamespaceUri";
    let description = "The URI of the namespace.";
    let node_id = NodeId::new(0, 15183);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_783(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceVersion";
    let display_name = "NamespaceVersion";
    let description = "The human readable string representing version of the namespace.";
    let node_id = NodeId::new(0, 15184);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_784(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespacePublicationDate";
    let display_name = "NamespacePublicationDate";
    let description = "The publication date for the namespace.";
    let node_id = NodeId::new(0, 15185);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::DateTime, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_785(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "IsNamespaceSubset";
    let display_name = "IsNamespaceSubset";
    let description = "If TRUE then the server only supports a subset of the namespace.";
    let node_id = NodeId::new(0, 15186);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_786(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticNodeIdTypes";
    let display_name = "StaticNodeIdTypes";
    let description = "A list of IdTypes for nodes which are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 15187);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(256u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_787(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticNumericNodeIdRange";
    let display_name = "StaticNumericNodeIdRange";
    let description = "A list of ranges for numeric node ids which are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 15188);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(291u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_788(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StaticStringNodeIdPattern";
    let display_name = "StaticStringNodeIdPattern";
    let description = "A regular expression which matches string node ids are the same in every server that exposes them.";
    let node_id = NodeId::new(0, 15189);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 15182), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 15182), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_789(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11493);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11492), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11492), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_790(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ServerHandles"),
                data_type: NodeId::new(0, 7),
                value_rank: 1,
                array_dimensions: Some(vec![0]),
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ClientHandles"),
                data_type: NodeId::new(0, 7),
                value_rank: 1,
                array_dimensions: Some(vec![0]),
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 11494);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11492), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11492), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_791(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12874);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12873), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 12873), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_792(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("LifetimeInHours"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12750);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12749), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 12749), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_793(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("RevisedLifetimeInHours"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12751);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12749), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 12749), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_794(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("State"),
                data_type: NodeId::new(0, 852),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("EstimatedReturnTime"),
                data_type: NodeId::new(0, 13),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SecondsTillShutdown"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Reason"),
                data_type: NodeId::new(0, 21),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Restart"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12887);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12886), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 12886), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_795(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentState";
    let display_name = "CurrentState";
    let description = "";
    let node_id = NodeId::new(0, 2769);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2299), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3720), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2299), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_796(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 3720);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2769), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2769), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_797(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastTransition";
    let display_name = "LastTransition";
    let description = "";
    let node_id = NodeId::new(0, 2770);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2299), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3724), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2299), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_798(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 3724);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2770), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2770), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_799(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 2756);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2755), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_800(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Name";
    let display_name = "Name";
    let description = "";
    let node_id = NodeId::new(0, 2757);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::QualifiedName, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2755), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_801(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Number";
    let display_name = "Number";
    let description = "";
    let node_id = NodeId::new(0, 2758);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2755), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_802(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EffectiveDisplayName";
    let display_name = "EffectiveDisplayName";
    let description = "";
    let node_id = NodeId::new(0, 2759);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2755), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_803(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 2763);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2762), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_804(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Name";
    let display_name = "Name";
    let description = "";
    let node_id = NodeId::new(0, 2764);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::QualifiedName, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2762), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_805(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Number";
    let display_name = "Number";
    let description = "";
    let node_id = NodeId::new(0, 2765);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2762), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_806(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransitionTime";
    let display_name = "TransitionTime";
    let description = "";
    let node_id = NodeId::new(0, 2766);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2762), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_807(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EffectiveTransitionTime";
    let display_name = "EffectiveTransitionTime";
    let description = "";
    let node_id = NodeId::new(0, 11456);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2762), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_808(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CurrentState";
    let display_name = "CurrentState";
    let description = "";
    let node_id = NodeId::new(0, 2772);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2771), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3728), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2760), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2771), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_809(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 3728);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2772), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2772), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_810(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastTransition";
    let display_name = "LastTransition";
    let description = "";
    let node_id = NodeId::new(0, 2773);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2771), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3732), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2767), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2771), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_811(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 3732);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2773), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2773), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_812(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 2761);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2760), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2760), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_813(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 2768);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2767), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2767), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_814(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StateNumber";
    let display_name = "StateNumber";
    let description = "";
    let node_id = NodeId::new(0, 2308);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2307), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2307), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_815(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransitionNumber";
    let display_name = "TransitionNumber";
    let description = "";
    let node_id = NodeId::new(0, 2312);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2310), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_816(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Transition";
    let display_name = "Transition";
    let description = "";
    let node_id = NodeId::new(0, 2774);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2311), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3754), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2311), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_817(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 3754);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2774), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2774), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_818(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "FromState";
    let display_name = "FromState";
    let description = "";
    let node_id = NodeId::new(0, 2775);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2311), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3746), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2311), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_819(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 3746);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2775), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2775), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_820(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ToState";
    let display_name = "ToState";
    let description = "";
    let node_id = NodeId::new(0, 2776);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2311), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3750), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2311), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_821(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 3750);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2776), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2776), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_822(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OldStateId";
    let display_name = "OldStateId";
    let description = "";
    let node_id = NodeId::new(0, 2777);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2315), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2315), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_823(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NewStateId";
    let display_name = "NewStateId";
    let description = "";
    let node_id = NodeId::new(0, 2778);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2315), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2315), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_824(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnumStrings";
    let display_name = "EnumStrings";
    let description = "";
    let node_id = NodeId::new(0, 7611);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 851), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 851), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_825(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnumStrings";
    let display_name = "EnumStrings";
    let description = "";
    let node_id = NodeId::new(0, 7612);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 852), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 852), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_826(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Opc.Ua";
    let display_name = "Opc.Ua";
    let description = "";
    let node_id = NodeId::new(0, 8252);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8254), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12677), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8285), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8291), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12759), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12762), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8918), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8300), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12201), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8297), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8303), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8417), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12894), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12897), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8333), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8306), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8309), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8312), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8315), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8318), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8363), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8366), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8369), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8372), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12712), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12715), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8321), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8564), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8567), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8570), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8573), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8576), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8579), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8582), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8639), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8702), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8708), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8711), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8807), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8327), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8843), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11951), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11954), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8846), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8849), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8852), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8855), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8858), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8861), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8294), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8864), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8867), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8870), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8873), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8876), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12175), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12178), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12083), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12086), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8882), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8879), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 92), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
        (&NodeId::new(0, 72), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_827(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceUri";
    let display_name = "NamespaceUri";
    let description = "A URI that uniquely identifies the dictionary.";
    let node_id = NodeId::new(0, 8254);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_828(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TrustListDataType";
    let display_name = "TrustListDataType";
    let description = "";
    let node_id = NodeId::new(0, 12677);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_829(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Argument";
    let display_name = "Argument";
    let description = "";
    let node_id = NodeId::new(0, 8285);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_830(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnumValueType";
    let display_name = "EnumValueType";
    let description = "";
    let node_id = NodeId::new(0, 8291);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_831(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OptionSet";
    let display_name = "OptionSet";
    let description = "";
    let node_id = NodeId::new(0, 12759);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_832(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Union";
    let display_name = "Union";
    let description = "";
    let node_id = NodeId::new(0, 12762);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_833(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TimeZoneDataType";
    let display_name = "TimeZoneDataType";
    let description = "";
    let node_id = NodeId::new(0, 8918);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_834(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ApplicationDescription";
    let display_name = "ApplicationDescription";
    let description = "";
    let node_id = NodeId::new(0, 8300);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_835(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerOnNetwork";
    let display_name = "ServerOnNetwork";
    let description = "";
    let node_id = NodeId::new(0, 12201);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_836(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserTokenPolicy";
    let display_name = "UserTokenPolicy";
    let description = "";
    let node_id = NodeId::new(0, 8297);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_837(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointDescription";
    let display_name = "EndpointDescription";
    let description = "";
    let node_id = NodeId::new(0, 8303);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_838(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RegisteredServer";
    let display_name = "RegisteredServer";
    let description = "";
    let node_id = NodeId::new(0, 8417);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_839(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DiscoveryConfiguration";
    let display_name = "DiscoveryConfiguration";
    let description = "";
    let node_id = NodeId::new(0, 12894);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_840(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MdnsDiscoveryConfiguration";
    let display_name = "MdnsDiscoveryConfiguration";
    let description = "";
    let node_id = NodeId::new(0, 12897);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_841(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SignedSoftwareCertificate";
    let display_name = "SignedSoftwareCertificate";
    let description = "";
    let node_id = NodeId::new(0, 8333);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_842(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserIdentityToken";
    let display_name = "UserIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 8306);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_843(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AnonymousIdentityToken";
    let display_name = "AnonymousIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 8309);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_844(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserNameIdentityToken";
    let display_name = "UserNameIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 8312);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_845(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "X509IdentityToken";
    let display_name = "X509IdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 8315);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_846(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "IssuedIdentityToken";
    let display_name = "IssuedIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 8318);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_847(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddNodesItem";
    let display_name = "AddNodesItem";
    let description = "";
    let node_id = NodeId::new(0, 8363);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_848(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddReferencesItem";
    let display_name = "AddReferencesItem";
    let description = "";
    let node_id = NodeId::new(0, 8366);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_849(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteNodesItem";
    let display_name = "DeleteNodesItem";
    let description = "";
    let node_id = NodeId::new(0, 8369);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_850(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteReferencesItem";
    let display_name = "DeleteReferencesItem";
    let description = "";
    let node_id = NodeId::new(0, 8372);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_851(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RelativePathElement";
    let display_name = "RelativePathElement";
    let description = "";
    let node_id = NodeId::new(0, 12712);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_852(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RelativePath";
    let display_name = "RelativePath";
    let description = "";
    let node_id = NodeId::new(0, 12715);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_853(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointConfiguration";
    let display_name = "EndpointConfiguration";
    let description = "";
    let node_id = NodeId::new(0, 8321);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_854(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ContentFilterElement";
    let display_name = "ContentFilterElement";
    let description = "";
    let node_id = NodeId::new(0, 8564);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_855(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ContentFilter";
    let display_name = "ContentFilter";
    let description = "";
    let node_id = NodeId::new(0, 8567);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_856(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "FilterOperand";
    let display_name = "FilterOperand";
    let description = "";
    let node_id = NodeId::new(0, 8570);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_857(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ElementOperand";
    let display_name = "ElementOperand";
    let description = "";
    let node_id = NodeId::new(0, 8573);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_858(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LiteralOperand";
    let display_name = "LiteralOperand";
    let description = "";
    let node_id = NodeId::new(0, 8576);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_859(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AttributeOperand";
    let display_name = "AttributeOperand";
    let description = "";
    let node_id = NodeId::new(0, 8579);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_860(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SimpleAttributeOperand";
    let display_name = "SimpleAttributeOperand";
    let description = "";
    let node_id = NodeId::new(0, 8582);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_861(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryEvent";
    let display_name = "HistoryEvent";
    let description = "";
    let node_id = NodeId::new(0, 8639);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_862(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MonitoringFilter";
    let display_name = "MonitoringFilter";
    let description = "";
    let node_id = NodeId::new(0, 8702);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_863(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EventFilter";
    let display_name = "EventFilter";
    let description = "";
    let node_id = NodeId::new(0, 8708);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_864(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AggregateConfiguration";
    let display_name = "AggregateConfiguration";
    let description = "";
    let node_id = NodeId::new(0, 8711);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_865(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryEventFieldList";
    let display_name = "HistoryEventFieldList";
    let description = "";
    let node_id = NodeId::new(0, 8807);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_866(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildInfo";
    let display_name = "BuildInfo";
    let description = "";
    let node_id = NodeId::new(0, 8327);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_867(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RedundantServerDataType";
    let display_name = "RedundantServerDataType";
    let description = "";
    let node_id = NodeId::new(0, 8843);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_868(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointUrlListDataType";
    let display_name = "EndpointUrlListDataType";
    let description = "";
    let node_id = NodeId::new(0, 11951);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_869(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NetworkGroupDataType";
    let display_name = "NetworkGroupDataType";
    let description = "";
    let node_id = NodeId::new(0, 11954);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_870(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SamplingIntervalDiagnosticsDataType";
    let display_name = "SamplingIntervalDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 8846);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_871(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerDiagnosticsSummaryDataType";
    let display_name = "ServerDiagnosticsSummaryDataType";
    let description = "";
    let node_id = NodeId::new(0, 8849);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_872(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerStatusDataType";
    let display_name = "ServerStatusDataType";
    let description = "";
    let node_id = NodeId::new(0, 8852);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_873(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnosticsDataType";
    let display_name = "SessionDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 8855);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_874(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnosticsDataType";
    let display_name = "SessionSecurityDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 8858);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_875(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServiceCounterDataType";
    let display_name = "ServiceCounterDataType";
    let description = "";
    let node_id = NodeId::new(0, 8861);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_876(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StatusResult";
    let display_name = "StatusResult";
    let description = "";
    let node_id = NodeId::new(0, 8294);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_877(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionDiagnosticsDataType";
    let display_name = "SubscriptionDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 8864);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_878(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModelChangeStructureDataType";
    let display_name = "ModelChangeStructureDataType";
    let description = "";
    let node_id = NodeId::new(0, 8867);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_879(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SemanticChangeStructureDataType";
    let display_name = "SemanticChangeStructureDataType";
    let description = "";
    let node_id = NodeId::new(0, 8870);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_880(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Range";
    let display_name = "Range";
    let description = "";
    let node_id = NodeId::new(0, 8873);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_881(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EUInformation";
    let display_name = "EUInformation";
    let description = "";
    let node_id = NodeId::new(0, 8876);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_882(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ComplexNumberType";
    let display_name = "ComplexNumberType";
    let description = "";
    let node_id = NodeId::new(0, 12175);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_883(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DoubleComplexNumberType";
    let display_name = "DoubleComplexNumberType";
    let description = "";
    let node_id = NodeId::new(0, 12178);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_884(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AxisInformation";
    let display_name = "AxisInformation";
    let description = "";
    let node_id = NodeId::new(0, 12083);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_885(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "XVType";
    let display_name = "XVType";
    let description = "";
    let node_id = NodeId::new(0, 12086);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_886(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProgramDiagnosticDataType";
    let display_name = "ProgramDiagnosticDataType";
    let description = "";
    let node_id = NodeId::new(0, 8882);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_887(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Annotation";
    let display_name = "Annotation";
    let description = "";
    let node_id = NodeId::new(0, 8879);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8252), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 8252), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_888(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Opc.Ua";
    let display_name = "Opc.Ua";
    let description = "";
    let node_id = NodeId::new(0, 7617);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::ByteString, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7619), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12681), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7650), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7656), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12767), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12770), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8914), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7665), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12213), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7662), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7668), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7782), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12902), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12905), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7698), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7671), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7674), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7677), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7680), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7683), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7728), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7731), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7734), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7737), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12718), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12721), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7686), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7929), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7932), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7935), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7938), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7941), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7944), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7947), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8004), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8067), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8073), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8076), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8172), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7692), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8208), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11959), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11962), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8211), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8214), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8217), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8220), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8223), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8226), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 7659), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8229), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8232), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8235), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8238), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8241), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12183), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12186), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12091), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12094), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8247), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8244), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 93), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
        (&NodeId::new(0, 72), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_889(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NamespaceUri";
    let display_name = "NamespaceUri";
    let description = "A URI that uniquely identifies the dictionary.";
    let node_id = NodeId::new(0, 7619);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_890(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TrustListDataType";
    let display_name = "TrustListDataType";
    let description = "";
    let node_id = NodeId::new(0, 12681);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_891(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Argument";
    let display_name = "Argument";
    let description = "";
    let node_id = NodeId::new(0, 7650);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_892(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnumValueType";
    let display_name = "EnumValueType";
    let description = "";
    let node_id = NodeId::new(0, 7656);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_893(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OptionSet";
    let display_name = "OptionSet";
    let description = "";
    let node_id = NodeId::new(0, 12767);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_894(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Union";
    let display_name = "Union";
    let description = "";
    let node_id = NodeId::new(0, 12770);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_895(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TimeZoneDataType";
    let display_name = "TimeZoneDataType";
    let description = "";
    let node_id = NodeId::new(0, 8914);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_896(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ApplicationDescription";
    let display_name = "ApplicationDescription";
    let description = "";
    let node_id = NodeId::new(0, 7665);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_897(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerOnNetwork";
    let display_name = "ServerOnNetwork";
    let description = "";
    let node_id = NodeId::new(0, 12213);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_898(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserTokenPolicy";
    let display_name = "UserTokenPolicy";
    let description = "";
    let node_id = NodeId::new(0, 7662);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_899(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointDescription";
    let display_name = "EndpointDescription";
    let description = "";
    let node_id = NodeId::new(0, 7668);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_900(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RegisteredServer";
    let display_name = "RegisteredServer";
    let description = "";
    let node_id = NodeId::new(0, 7782);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_901(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DiscoveryConfiguration";
    let display_name = "DiscoveryConfiguration";
    let description = "";
    let node_id = NodeId::new(0, 12902);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_902(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MdnsDiscoveryConfiguration";
    let display_name = "MdnsDiscoveryConfiguration";
    let description = "";
    let node_id = NodeId::new(0, 12905);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_903(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SignedSoftwareCertificate";
    let display_name = "SignedSoftwareCertificate";
    let description = "";
    let node_id = NodeId::new(0, 7698);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_904(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserIdentityToken";
    let display_name = "UserIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 7671);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_905(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AnonymousIdentityToken";
    let display_name = "AnonymousIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 7674);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_906(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserNameIdentityToken";
    let display_name = "UserNameIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 7677);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_907(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "X509IdentityToken";
    let display_name = "X509IdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 7680);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_908(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "IssuedIdentityToken";
    let display_name = "IssuedIdentityToken";
    let description = "";
    let node_id = NodeId::new(0, 7683);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_909(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddNodesItem";
    let display_name = "AddNodesItem";
    let description = "";
    let node_id = NodeId::new(0, 7728);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_910(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AddReferencesItem";
    let display_name = "AddReferencesItem";
    let description = "";
    let node_id = NodeId::new(0, 7731);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_911(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteNodesItem";
    let display_name = "DeleteNodesItem";
    let description = "";
    let node_id = NodeId::new(0, 7734);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_912(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DeleteReferencesItem";
    let display_name = "DeleteReferencesItem";
    let description = "";
    let node_id = NodeId::new(0, 7737);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_913(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RelativePathElement";
    let display_name = "RelativePathElement";
    let description = "";
    let node_id = NodeId::new(0, 12718);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_914(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RelativePath";
    let display_name = "RelativePath";
    let description = "";
    let node_id = NodeId::new(0, 12721);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_915(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointConfiguration";
    let display_name = "EndpointConfiguration";
    let description = "";
    let node_id = NodeId::new(0, 7686);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_916(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ContentFilterElement";
    let display_name = "ContentFilterElement";
    let description = "";
    let node_id = NodeId::new(0, 7929);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_917(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ContentFilter";
    let display_name = "ContentFilter";
    let description = "";
    let node_id = NodeId::new(0, 7932);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_918(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "FilterOperand";
    let display_name = "FilterOperand";
    let description = "";
    let node_id = NodeId::new(0, 7935);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_919(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ElementOperand";
    let display_name = "ElementOperand";
    let description = "";
    let node_id = NodeId::new(0, 7938);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_920(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LiteralOperand";
    let display_name = "LiteralOperand";
    let description = "";
    let node_id = NodeId::new(0, 7941);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_921(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AttributeOperand";
    let display_name = "AttributeOperand";
    let description = "";
    let node_id = NodeId::new(0, 7944);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_922(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SimpleAttributeOperand";
    let display_name = "SimpleAttributeOperand";
    let description = "";
    let node_id = NodeId::new(0, 7947);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_923(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryEvent";
    let display_name = "HistoryEvent";
    let description = "";
    let node_id = NodeId::new(0, 8004);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_924(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "MonitoringFilter";
    let display_name = "MonitoringFilter";
    let description = "";
    let node_id = NodeId::new(0, 8067);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_925(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EventFilter";
    let display_name = "EventFilter";
    let description = "";
    let node_id = NodeId::new(0, 8073);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_926(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AggregateConfiguration";
    let display_name = "AggregateConfiguration";
    let description = "";
    let node_id = NodeId::new(0, 8076);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_927(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "HistoryEventFieldList";
    let display_name = "HistoryEventFieldList";
    let description = "";
    let node_id = NodeId::new(0, 8172);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_928(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BuildInfo";
    let display_name = "BuildInfo";
    let description = "";
    let node_id = NodeId::new(0, 7692);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_929(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "RedundantServerDataType";
    let display_name = "RedundantServerDataType";
    let description = "";
    let node_id = NodeId::new(0, 8208);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_930(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EndpointUrlListDataType";
    let display_name = "EndpointUrlListDataType";
    let description = "";
    let node_id = NodeId::new(0, 11959);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_931(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "NetworkGroupDataType";
    let display_name = "NetworkGroupDataType";
    let description = "";
    let node_id = NodeId::new(0, 11962);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_932(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SamplingIntervalDiagnosticsDataType";
    let display_name = "SamplingIntervalDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 8211);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_933(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerDiagnosticsSummaryDataType";
    let display_name = "ServerDiagnosticsSummaryDataType";
    let description = "";
    let node_id = NodeId::new(0, 8214);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_934(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServerStatusDataType";
    let display_name = "ServerStatusDataType";
    let description = "";
    let node_id = NodeId::new(0, 8217);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_935(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionDiagnosticsDataType";
    let display_name = "SessionDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 8220);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_936(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SessionSecurityDiagnosticsDataType";
    let display_name = "SessionSecurityDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 8223);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_937(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ServiceCounterDataType";
    let display_name = "ServiceCounterDataType";
    let description = "";
    let node_id = NodeId::new(0, 8226);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_938(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "StatusResult";
    let display_name = "StatusResult";
    let description = "";
    let node_id = NodeId::new(0, 7659);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_939(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SubscriptionDiagnosticsDataType";
    let display_name = "SubscriptionDiagnosticsDataType";
    let description = "";
    let node_id = NodeId::new(0, 8229);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_940(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ModelChangeStructureDataType";
    let display_name = "ModelChangeStructureDataType";
    let description = "";
    let node_id = NodeId::new(0, 8232);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_941(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SemanticChangeStructureDataType";
    let display_name = "SemanticChangeStructureDataType";
    let description = "";
    let node_id = NodeId::new(0, 8235);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_942(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Range";
    let display_name = "Range";
    let description = "";
    let node_id = NodeId::new(0, 8238);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_943(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EUInformation";
    let display_name = "EUInformation";
    let description = "";
    let node_id = NodeId::new(0, 8241);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_944(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ComplexNumberType";
    let display_name = "ComplexNumberType";
    let description = "";
    let node_id = NodeId::new(0, 12183);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_945(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DoubleComplexNumberType";
    let display_name = "DoubleComplexNumberType";
    let description = "";
    let node_id = NodeId::new(0, 12186);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_946(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AxisInformation";
    let display_name = "AxisInformation";
    let description = "";
    let node_id = NodeId::new(0, 12091);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_947(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "XVType";
    let display_name = "XVType";
    let description = "";
    let node_id = NodeId::new(0, 12094);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_948(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ProgramDiagnosticDataType";
    let display_name = "ProgramDiagnosticDataType";
    let description = "";
    let node_id = NodeId::new(0, 8247);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_949(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Annotation";
    let display_name = "Annotation";
    let description = "";
    let node_id = NodeId::new(0, 8244);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 7617), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 69), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 7617), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_950(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "BaseVariableType";
    let display_name = "BaseVariableType";
    let description = "The abstract base type for all variable nodes.";
    let node_id = NodeId::new(0, 62);
    let node = VariableType::new(&node_id, browse_name, display_name, description, true, -2);
    address_space.insert(node, None);
}

fn add_951(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "BaseDataVariableType";
    let display_name = "BaseDataVariableType";
    let description = "The type for variable that represents a process value.";
    let node_id = NodeId::new(0, 63);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -2);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 62), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_952(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "PropertyType";
    let display_name = "PropertyType";
    let description = "The type for variable that represents a property of another node.";
    let node_id = NodeId::new(0, 68);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -2);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 62), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_953(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "DataTypeDescriptionType";
    let display_name = "DataTypeDescriptionType";
    let description = "The type for variable that represents the description of a data type encoding.";
    let node_id = NodeId::new(0, 69);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 104), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 105), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_954(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "DataTypeDictionaryType";
    let display_name = "DataTypeDictionaryType";
    let description = "The type for variable that represents the collection of data type decriptions.";
    let node_id = NodeId::new(0, 72);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 106), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 107), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_955(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "ServerVendorCapabilityType";
    let display_name = "ServerVendorCapabilityType";
    let description = "";
    let node_id = NodeId::new(0, 2137);
    let node = VariableType::new(&node_id, browse_name, display_name, description, true, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_956(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "ServerStatusType";
    let display_name = "ServerStatusType";
    let description = "";
    let node_id = NodeId::new(0, 2138);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2139), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2140), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2141), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2752), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2753), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_957(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "BuildInfoType";
    let display_name = "BuildInfoType";
    let description = "";
    let node_id = NodeId::new(0, 3051);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3052), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3053), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3054), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3055), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3056), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3057), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_958(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "ServerDiagnosticsSummaryType";
    let display_name = "ServerDiagnosticsSummaryType";
    let description = "";
    let node_id = NodeId::new(0, 2150);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2151), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2152), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2153), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2154), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2155), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2156), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2157), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2159), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2160), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2161), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2162), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2163), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_959(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "SamplingIntervalDiagnosticsArrayType";
    let display_name = "SamplingIntervalDiagnosticsArrayType";
    let description = "";
    let node_id = NodeId::new(0, 2164);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, 1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_960(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "SamplingIntervalDiagnosticsType";
    let display_name = "SamplingIntervalDiagnosticsType";
    let description = "";
    let node_id = NodeId::new(0, 2165);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2166), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11697), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11698), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11699), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_961(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "SubscriptionDiagnosticsArrayType";
    let display_name = "SubscriptionDiagnosticsArrayType";
    let description = "";
    let node_id = NodeId::new(0, 2171);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, 1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_962(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "SubscriptionDiagnosticsType";
    let display_name = "SubscriptionDiagnosticsType";
    let description = "";
    let node_id = NodeId::new(0, 2172);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2173), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2174), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2175), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2176), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2177), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8888), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2179), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2180), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2181), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2182), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2183), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2184), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2185), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2186), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2187), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2188), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2189), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2190), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2191), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2998), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2193), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8889), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8890), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8891), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8892), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8893), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8894), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8895), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8896), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8897), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8902), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_963(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "SessionDiagnosticsArrayType";
    let display_name = "SessionDiagnosticsArrayType";
    let description = "";
    let node_id = NodeId::new(0, 2196);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, 1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12816), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_964(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "SessionDiagnosticsVariableType";
    let display_name = "SessionDiagnosticsVariableType";
    let description = "";
    let node_id = NodeId::new(0, 2197);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2198), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2199), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2200), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2201), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2202), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2203), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2204), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3050), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2205), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2206), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2207), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2208), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2209), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 8900), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11892), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2217), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2218), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2219), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2220), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2221), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2222), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2223), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2224), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2225), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2226), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2227), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2228), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2229), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2230), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2231), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2232), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2233), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2234), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2235), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2236), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2237), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2238), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2239), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2240), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2241), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2242), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2730), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2731), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_965(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "SessionSecurityDiagnosticsArrayType";
    let display_name = "SessionSecurityDiagnosticsArrayType";
    let description = "";
    let node_id = NodeId::new(0, 2243);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, 1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12860), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_966(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "SessionSecurityDiagnosticsType";
    let display_name = "SessionSecurityDiagnosticsType";
    let description = "";
    let node_id = NodeId::new(0, 2244);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2245), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2246), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2247), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2248), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2249), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2250), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2251), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2252), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3058), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_967(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "OptionSetType";
    let display_name = "OptionSetType";
    let description = "";
    let node_id = NodeId::new(0, 11487);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11488), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11701), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_968(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "StateVariableType";
    let display_name = "StateVariableType";
    let description = "";
    let node_id = NodeId::new(0, 2755);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2756), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2757), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2758), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2759), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_969(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "TransitionVariableType";
    let display_name = "TransitionVariableType";
    let description = "";
    let node_id = NodeId::new(0, 2762);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2763), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2764), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2765), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2766), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11456), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 63), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_970(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "FiniteStateVariableType";
    let display_name = "FiniteStateVariableType";
    let description = "";
    let node_id = NodeId::new(0, 2760);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2761), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2755), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_971(address_space: &mut AddressSpace) {
    // VariableType
    let browse_name = "FiniteTransitionVariableType";
    let display_name = "FiniteTransitionVariableType";
    let description = "";
    let node_id = NodeId::new(0, 2767);
    let node = VariableType::new(&node_id, browse_name, display_name, description, false, -1);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2768), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2762), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_972(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "GetMonitoredItems";
    let display_name = "GetMonitoredItems";
    let description = "";
    let node_id = NodeId::new(0, 11489);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11490), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11491), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_973(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "ResendData";
    let display_name = "ResendData";
    let description = "";
    let node_id = NodeId::new(0, 12871);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12872), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_974(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "SetSubscriptionDurable";
    let display_name = "SetSubscriptionDurable";
    let description = "";
    let node_id = NodeId::new(0, 12746);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12747), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12748), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_975(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "RequestServerStateChange";
    let display_name = "RequestServerStateChange";
    let description = "";
    let node_id = NodeId::new(0, 12883);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2004), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12884), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2004), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_976(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Open";
    let display_name = "Open";
    let description = "";
    let node_id = NodeId::new(0, 11580);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11581), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11582), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_977(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Close";
    let display_name = "Close";
    let description = "";
    let node_id = NodeId::new(0, 11583);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11584), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_978(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Read";
    let display_name = "Read";
    let description = "";
    let node_id = NodeId::new(0, 11585);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11586), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11587), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_979(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Write";
    let display_name = "Write";
    let description = "";
    let node_id = NodeId::new(0, 11588);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11589), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_980(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "GetPosition";
    let display_name = "GetPosition";
    let description = "";
    let node_id = NodeId::new(0, 11590);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11591), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11592), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_981(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "SetPosition";
    let display_name = "SetPosition";
    let description = "";
    let node_id = NodeId::new(0, 11593);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11575), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11594), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_982(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "CreateDirectory";
    let display_name = "CreateDirectory";
    let description = "";
    let node_id = NodeId::new(0, 13355);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13354), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13356), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13357), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13354), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_983(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "CreateFile";
    let display_name = "CreateFile";
    let description = "";
    let node_id = NodeId::new(0, 13358);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13354), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13359), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13360), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13354), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_984(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Delete";
    let display_name = "Delete";
    let description = "";
    let node_id = NodeId::new(0, 13361);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13354), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13362), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13354), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_985(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "MoveOrCopy";
    let display_name = "MoveOrCopy";
    let description = "";
    let node_id = NodeId::new(0, 13363);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13354), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13364), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13365), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13354), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_986(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Open";
    let display_name = "Open";
    let description = "";
    let node_id = NodeId::new(0, 13372);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13373), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13374), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_987(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Close";
    let display_name = "Close";
    let description = "";
    let node_id = NodeId::new(0, 13375);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13376), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_988(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Read";
    let display_name = "Read";
    let description = "";
    let node_id = NodeId::new(0, 13377);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13378), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13379), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_989(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Write";
    let display_name = "Write";
    let description = "";
    let node_id = NodeId::new(0, 13380);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13381), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_990(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "GetPosition";
    let display_name = "GetPosition";
    let description = "";
    let node_id = NodeId::new(0, 13382);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13383), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13384), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_991(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "SetPosition";
    let display_name = "SetPosition";
    let description = "";
    let node_id = NodeId::new(0, 13385);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13366), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13386), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13366), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_992(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "CreateDirectory";
    let display_name = "CreateDirectory";
    let description = "";
    let node_id = NodeId::new(0, 13387);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13353), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13388), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13389), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13353), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_993(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "CreateFile";
    let display_name = "CreateFile";
    let description = "";
    let node_id = NodeId::new(0, 13390);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13353), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13391), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13392), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13353), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_994(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Delete";
    let display_name = "Delete";
    let description = "";
    let node_id = NodeId::new(0, 13393);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13353), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13394), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13353), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_995(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "MoveOrCopy";
    let display_name = "MoveOrCopy";
    let description = "";
    let node_id = NodeId::new(0, 13395);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13353), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13396), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13397), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13353), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_996(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "ExportNamespace";
    let display_name = "ExportNamespace";
    let description = "Updates the file by exporting the server namespace.";
    let node_id = NodeId::new(0, 11615);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11595), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11595), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_997(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Open";
    let display_name = "Open";
    let description = "";
    let node_id = NodeId::new(0, 11629);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11630), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11631), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_998(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Close";
    let display_name = "Close";
    let description = "";
    let node_id = NodeId::new(0, 11632);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11633), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_999(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Read";
    let display_name = "Read";
    let description = "";
    let node_id = NodeId::new(0, 11634);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11635), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11636), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1000(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Write";
    let display_name = "Write";
    let description = "";
    let node_id = NodeId::new(0, 11637);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11638), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1001(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "GetPosition";
    let display_name = "GetPosition";
    let description = "";
    let node_id = NodeId::new(0, 11639);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11640), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11641), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1002(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "SetPosition";
    let display_name = "SetPosition";
    let description = "";
    let node_id = NodeId::new(0, 11642);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11624), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11643), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11624), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1003(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Open";
    let display_name = "Open";
    let description = "";
    let node_id = NodeId::new(0, 11680);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11681), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11682), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1004(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Close";
    let display_name = "Close";
    let description = "";
    let node_id = NodeId::new(0, 11683);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11684), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1005(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Read";
    let display_name = "Read";
    let description = "";
    let node_id = NodeId::new(0, 11685);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11686), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11687), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1006(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "Write";
    let display_name = "Write";
    let description = "";
    let node_id = NodeId::new(0, 11688);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11689), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1007(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "GetPosition";
    let display_name = "GetPosition";
    let description = "";
    let node_id = NodeId::new(0, 11690);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11691), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11692), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1008(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "SetPosition";
    let display_name = "SetPosition";
    let description = "";
    let node_id = NodeId::new(0, 11693);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11675), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11694), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11675), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1009(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "GetMonitoredItems";
    let display_name = "GetMonitoredItems";
    let description = "";
    let node_id = NodeId::new(0, 11492);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11493), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11494), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1010(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "ResendData";
    let display_name = "ResendData";
    let description = "";
    let node_id = NodeId::new(0, 12873);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12874), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1011(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "SetSubscriptionDurable";
    let display_name = "SetSubscriptionDurable";
    let description = "";
    let node_id = NodeId::new(0, 12749);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12750), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12751), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_1012(address_space: &mut AddressSpace) {
    // Method
    let browse_name = "RequestServerStateChange";
    let display_name = "RequestServerStateChange";
    let description = "";
    let node_id = NodeId::new(0, 12886);
    let node = Method::new(&node_id, browse_name, display_name, description, false, false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2253), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12887), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2253), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_1(address_space);
    add_2(address_space);
    add_3(address_space);
    add_4(address_space);
    add_5(address_space);
    add_6(address_space);
    add_7(address_space);
    add_8(address_space);
    add_9(address_space);
    add_10(address_space);
    add_11(address_space);
    add_12(address_space);
    add_13(address_space);
    add_14(address_space);
    add_15(address_space);
    add_16(address_space);
    add_17(address_space);
    add_18(address_space);
    add_19(address_space);
    add_20(address_space);
    add_21(address_space);
    add_22(address_space);
    add_23(address_space);
    add_24(address_space);
    add_25(address_space);
    add_26(address_space);
    add_27(address_space);
    add_28(address_space);
    add_29(address_space);
    add_30(address_space);
    add_31(address_space);
    add_32(address_space);
    add_33(address_space);
    add_34(address_space);
    add_35(address_space);
    add_36(address_space);
    add_37(address_space);
    add_38(address_space);
    add_39(address_space);
    add_40(address_space);
    add_41(address_space);
    add_42(address_space);
    add_43(address_space);
    add_44(address_space);
    add_45(address_space);
    add_46(address_space);
    add_47(address_space);
    add_48(address_space);
    add_49(address_space);
    add_50(address_space);
    add_51(address_space);
    add_52(address_space);
    add_53(address_space);
    add_54(address_space);
    add_55(address_space);
    add_56(address_space);
    add_57(address_space);
    add_58(address_space);
    add_59(address_space);
    add_60(address_space);
    add_61(address_space);
    add_62(address_space);
    add_63(address_space);
    add_64(address_space);
    add_65(address_space);
    add_66(address_space);
    add_67(address_space);
    add_68(address_space);
    add_69(address_space);
    add_70(address_space);
    add_71(address_space);
    add_72(address_space);
    add_73(address_space);
    add_74(address_space);
    add_75(address_space);
    add_76(address_space);
    add_77(address_space);
    add_78(address_space);
    add_79(address_space);
    add_80(address_space);
    add_81(address_space);
    add_82(address_space);
    add_83(address_space);
    add_84(address_space);
    add_85(address_space);
    add_86(address_space);
    add_87(address_space);
    add_88(address_space);
    add_89(address_space);
    add_90(address_space);
    add_91(address_space);
    add_92(address_space);
    add_93(address_space);
    add_94(address_space);
    add_95(address_space);
    add_96(address_space);
    add_97(address_space);
    add_98(address_space);
    add_99(address_space);
    add_100(address_space);
    add_101(address_space);
    add_102(address_space);
    add_103(address_space);
    add_104(address_space);
    add_105(address_space);
    add_106(address_space);
    add_107(address_space);
    add_108(address_space);
    add_109(address_space);
    add_110(address_space);
    add_111(address_space);
    add_112(address_space);
    add_113(address_space);
    add_114(address_space);
    add_115(address_space);
    add_116(address_space);
    add_117(address_space);
    add_118(address_space);
    add_119(address_space);
    add_120(address_space);
    add_121(address_space);
    add_122(address_space);
    add_123(address_space);
    add_124(address_space);
    add_125(address_space);
    add_126(address_space);
    add_127(address_space);
    add_128(address_space);
    add_129(address_space);
    add_130(address_space);
    add_131(address_space);
    add_132(address_space);
    add_133(address_space);
    add_134(address_space);
    add_135(address_space);
    add_136(address_space);
    add_137(address_space);
    add_138(address_space);
    add_139(address_space);
    add_140(address_space);
    add_141(address_space);
    add_142(address_space);
    add_143(address_space);
    add_144(address_space);
    add_145(address_space);
    add_146(address_space);
    add_147(address_space);
    add_148(address_space);
    add_149(address_space);
    add_150(address_space);
    add_151(address_space);
    add_152(address_space);
    add_153(address_space);
    add_154(address_space);
    add_155(address_space);
    add_156(address_space);
    add_157(address_space);
    add_158(address_space);
    add_159(address_space);
    add_160(address_space);
    add_161(address_space);
    add_162(address_space);
    add_163(address_space);
    add_164(address_space);
    add_165(address_space);
    add_166(address_space);
    add_167(address_space);
    add_168(address_space);
    add_169(address_space);
    add_170(address_space);
    add_171(address_space);
    add_172(address_space);
    add_173(address_space);
    add_174(address_space);
    add_175(address_space);
    add_176(address_space);
    add_177(address_space);
    add_178(address_space);
    add_179(address_space);
    add_180(address_space);
    add_181(address_space);
    add_182(address_space);
    add_183(address_space);
    add_184(address_space);
    add_185(address_space);
    add_186(address_space);
    add_187(address_space);
    add_188(address_space);
    add_189(address_space);
    add_190(address_space);
    add_191(address_space);
    add_192(address_space);
    add_193(address_space);
    add_194(address_space);
    add_195(address_space);
    add_196(address_space);
    add_197(address_space);
    add_198(address_space);
    add_199(address_space);
    add_200(address_space);
    add_201(address_space);
    add_202(address_space);
    add_203(address_space);
    add_204(address_space);
    add_205(address_space);
    add_206(address_space);
    add_207(address_space);
    add_208(address_space);
    add_209(address_space);
    add_210(address_space);
    add_211(address_space);
    add_212(address_space);
    add_213(address_space);
    add_214(address_space);
    add_215(address_space);
    add_216(address_space);
    add_217(address_space);
    add_218(address_space);
    add_219(address_space);
    add_220(address_space);
    add_221(address_space);
    add_222(address_space);
    add_223(address_space);
    add_224(address_space);
    add_225(address_space);
    add_226(address_space);
    add_227(address_space);
    add_228(address_space);
    add_229(address_space);
    add_230(address_space);
    add_231(address_space);
    add_232(address_space);
    add_233(address_space);
    add_234(address_space);
    add_235(address_space);
    add_236(address_space);
    add_237(address_space);
    add_238(address_space);
    add_239(address_space);
    add_240(address_space);
    add_241(address_space);
    add_242(address_space);
    add_243(address_space);
    add_244(address_space);
    add_245(address_space);
    add_246(address_space);
    add_247(address_space);
    add_248(address_space);
    add_249(address_space);
    add_250(address_space);
    add_251(address_space);
    add_252(address_space);
    add_253(address_space);
    add_254(address_space);
    add_255(address_space);
    add_256(address_space);
    add_257(address_space);
    add_258(address_space);
    add_259(address_space);
    add_260(address_space);
    add_261(address_space);
    add_262(address_space);
    add_263(address_space);
    add_264(address_space);
    add_265(address_space);
    add_266(address_space);
    add_267(address_space);
    add_268(address_space);
    add_269(address_space);
    add_270(address_space);
    add_271(address_space);
    add_272(address_space);
    add_273(address_space);
    add_274(address_space);
    add_275(address_space);
    add_276(address_space);
    add_277(address_space);
    add_278(address_space);
    add_279(address_space);
    add_280(address_space);
    add_281(address_space);
    add_282(address_space);
    add_283(address_space);
    add_284(address_space);
    add_285(address_space);
    add_286(address_space);
    add_287(address_space);
    add_288(address_space);
    add_289(address_space);
    add_290(address_space);
    add_291(address_space);
    add_292(address_space);
    add_293(address_space);
    add_294(address_space);
    add_295(address_space);
    add_296(address_space);
    add_297(address_space);
    add_298(address_space);
    add_299(address_space);
    add_300(address_space);
    add_301(address_space);
    add_302(address_space);
    add_303(address_space);
    add_304(address_space);
    add_305(address_space);
    add_306(address_space);
    add_307(address_space);
    add_308(address_space);
    add_309(address_space);
    add_310(address_space);
    add_311(address_space);
    add_312(address_space);
    add_313(address_space);
    add_314(address_space);
    add_315(address_space);
    add_316(address_space);
    add_317(address_space);
    add_318(address_space);
    add_319(address_space);
    add_320(address_space);
    add_321(address_space);
    add_322(address_space);
    add_323(address_space);
    add_324(address_space);
    add_325(address_space);
    add_326(address_space);
    add_327(address_space);
    add_328(address_space);
    add_329(address_space);
    add_330(address_space);
    add_331(address_space);
    add_332(address_space);
    add_333(address_space);
    add_334(address_space);
    add_335(address_space);
    add_336(address_space);
    add_337(address_space);
    add_338(address_space);
    add_339(address_space);
    add_340(address_space);
    add_341(address_space);
    add_342(address_space);
    add_343(address_space);
    add_344(address_space);
    add_345(address_space);
    add_346(address_space);
    add_347(address_space);
    add_348(address_space);
    add_349(address_space);
    add_350(address_space);
    add_351(address_space);
    add_352(address_space);
    add_353(address_space);
    add_354(address_space);
    add_355(address_space);
    add_356(address_space);
    add_357(address_space);
    add_358(address_space);
    add_359(address_space);
    add_360(address_space);
    add_361(address_space);
    add_362(address_space);
    add_363(address_space);
    add_364(address_space);
    add_365(address_space);
    add_366(address_space);
    add_367(address_space);
    add_368(address_space);
    add_369(address_space);
    add_370(address_space);
    add_371(address_space);
    add_372(address_space);
    add_373(address_space);
    add_374(address_space);
    add_375(address_space);
    add_376(address_space);
    add_377(address_space);
    add_378(address_space);
    add_379(address_space);
    add_380(address_space);
    add_381(address_space);
    add_382(address_space);
    add_383(address_space);
    add_384(address_space);
    add_385(address_space);
    add_386(address_space);
    add_387(address_space);
    add_388(address_space);
    add_389(address_space);
    add_390(address_space);
    add_391(address_space);
    add_392(address_space);
    add_393(address_space);
    add_394(address_space);
    add_395(address_space);
    add_396(address_space);
    add_397(address_space);
    add_398(address_space);
    add_399(address_space);
    add_400(address_space);
    add_401(address_space);
    add_402(address_space);
    add_403(address_space);
    add_404(address_space);
    add_405(address_space);
    add_406(address_space);
    add_407(address_space);
    add_408(address_space);
    add_409(address_space);
    add_410(address_space);
    add_411(address_space);
    add_412(address_space);
    add_413(address_space);
    add_414(address_space);
    add_415(address_space);
    add_416(address_space);
    add_417(address_space);
    add_418(address_space);
    add_419(address_space);
    add_420(address_space);
    add_421(address_space);
    add_422(address_space);
    add_423(address_space);
    add_424(address_space);
    add_425(address_space);
    add_426(address_space);
    add_427(address_space);
    add_428(address_space);
    add_429(address_space);
    add_430(address_space);
    add_431(address_space);
    add_432(address_space);
    add_433(address_space);
    add_434(address_space);
    add_435(address_space);
    add_436(address_space);
    add_437(address_space);
    add_438(address_space);
    add_439(address_space);
    add_440(address_space);
    add_441(address_space);
    add_442(address_space);
    add_443(address_space);
    add_444(address_space);
    add_445(address_space);
    add_446(address_space);
    add_447(address_space);
    add_448(address_space);
    add_449(address_space);
    add_450(address_space);
    add_451(address_space);
    add_452(address_space);
    add_453(address_space);
    add_454(address_space);
    add_455(address_space);
    add_456(address_space);
    add_457(address_space);
    add_458(address_space);
    add_459(address_space);
    add_460(address_space);
    add_461(address_space);
    add_462(address_space);
    add_463(address_space);
    add_464(address_space);
    add_465(address_space);
    add_466(address_space);
    add_467(address_space);
    add_468(address_space);
    add_469(address_space);
    add_470(address_space);
    add_471(address_space);
    add_472(address_space);
    add_473(address_space);
    add_474(address_space);
    add_475(address_space);
    add_476(address_space);
    add_477(address_space);
    add_478(address_space);
    add_479(address_space);
    add_480(address_space);
    add_481(address_space);
    add_482(address_space);
    add_483(address_space);
    add_484(address_space);
    add_485(address_space);
    add_486(address_space);
    add_487(address_space);
    add_488(address_space);
    add_489(address_space);
    add_490(address_space);
    add_491(address_space);
    add_492(address_space);
    add_493(address_space);
    add_494(address_space);
    add_495(address_space);
    add_496(address_space);
    add_497(address_space);
    add_498(address_space);
    add_499(address_space);
    add_500(address_space);
    add_501(address_space);
    add_502(address_space);
    add_503(address_space);
    add_504(address_space);
    add_505(address_space);
    add_506(address_space);
    add_507(address_space);
    add_508(address_space);
    add_509(address_space);
    add_510(address_space);
    add_511(address_space);
    add_512(address_space);
    add_513(address_space);
    add_514(address_space);
    add_515(address_space);
    add_516(address_space);
    add_517(address_space);
    add_518(address_space);
    add_519(address_space);
    add_520(address_space);
    add_521(address_space);
    add_522(address_space);
    add_523(address_space);
    add_524(address_space);
    add_525(address_space);
    add_526(address_space);
    add_527(address_space);
    add_528(address_space);
    add_529(address_space);
    add_530(address_space);
    add_531(address_space);
    add_532(address_space);
    add_533(address_space);
    add_534(address_space);
    add_535(address_space);
    add_536(address_space);
    add_537(address_space);
    add_538(address_space);
    add_539(address_space);
    add_540(address_space);
    add_541(address_space);
    add_542(address_space);
    add_543(address_space);
    add_544(address_space);
    add_545(address_space);
    add_546(address_space);
    add_547(address_space);
    add_548(address_space);
    add_549(address_space);
    add_550(address_space);
    add_551(address_space);
    add_552(address_space);
    add_553(address_space);
    add_554(address_space);
    add_555(address_space);
    add_556(address_space);
    add_557(address_space);
    add_558(address_space);
    add_559(address_space);
    add_560(address_space);
    add_561(address_space);
    add_562(address_space);
    add_563(address_space);
    add_564(address_space);
    add_565(address_space);
    add_566(address_space);
    add_567(address_space);
    add_568(address_space);
    add_569(address_space);
    add_570(address_space);
    add_571(address_space);
    add_572(address_space);
    add_573(address_space);
    add_574(address_space);
    add_575(address_space);
    add_576(address_space);
    add_577(address_space);
    add_578(address_space);
    add_579(address_space);
    add_580(address_space);
    add_581(address_space);
    add_582(address_space);
    add_583(address_space);
    add_584(address_space);
    add_585(address_space);
    add_586(address_space);
    add_587(address_space);
    add_588(address_space);
    add_589(address_space);
    add_590(address_space);
    add_591(address_space);
    add_592(address_space);
    add_593(address_space);
    add_594(address_space);
    add_595(address_space);
    add_596(address_space);
    add_597(address_space);
    add_598(address_space);
    add_599(address_space);
    add_600(address_space);
    add_601(address_space);
    add_602(address_space);
    add_603(address_space);
    add_604(address_space);
    add_605(address_space);
    add_606(address_space);
    add_607(address_space);
    add_608(address_space);
    add_609(address_space);
    add_610(address_space);
    add_611(address_space);
    add_612(address_space);
    add_613(address_space);
    add_614(address_space);
    add_615(address_space);
    add_616(address_space);
    add_617(address_space);
    add_618(address_space);
    add_619(address_space);
    add_620(address_space);
    add_621(address_space);
    add_622(address_space);
    add_623(address_space);
    add_624(address_space);
    add_625(address_space);
    add_626(address_space);
    add_627(address_space);
    add_628(address_space);
    add_629(address_space);
    add_630(address_space);
    add_631(address_space);
    add_632(address_space);
    add_633(address_space);
    add_634(address_space);
    add_635(address_space);
    add_636(address_space);
    add_637(address_space);
    add_638(address_space);
    add_639(address_space);
    add_640(address_space);
    add_641(address_space);
    add_642(address_space);
    add_643(address_space);
    add_644(address_space);
    add_645(address_space);
    add_646(address_space);
    add_647(address_space);
    add_648(address_space);
    add_649(address_space);
    add_650(address_space);
    add_651(address_space);
    add_652(address_space);
    add_653(address_space);
    add_654(address_space);
    add_655(address_space);
    add_656(address_space);
    add_657(address_space);
    add_658(address_space);
    add_659(address_space);
    add_660(address_space);
    add_661(address_space);
    add_662(address_space);
    add_663(address_space);
    add_664(address_space);
    add_665(address_space);
    add_666(address_space);
    add_667(address_space);
    add_668(address_space);
    add_669(address_space);
    add_670(address_space);
    add_671(address_space);
    add_672(address_space);
    add_673(address_space);
    add_674(address_space);
    add_675(address_space);
    add_676(address_space);
    add_677(address_space);
    add_678(address_space);
    add_679(address_space);
    add_680(address_space);
    add_681(address_space);
    add_682(address_space);
    add_683(address_space);
    add_684(address_space);
    add_685(address_space);
    add_686(address_space);
    add_687(address_space);
    add_688(address_space);
    add_689(address_space);
    add_690(address_space);
    add_691(address_space);
    add_692(address_space);
    add_693(address_space);
    add_694(address_space);
    add_695(address_space);
    add_696(address_space);
    add_697(address_space);
    add_698(address_space);
    add_699(address_space);
    add_700(address_space);
    add_701(address_space);
    add_702(address_space);
    add_703(address_space);
    add_704(address_space);
    add_705(address_space);
    add_706(address_space);
    add_707(address_space);
    add_708(address_space);
    add_709(address_space);
    add_710(address_space);
    add_711(address_space);
    add_712(address_space);
    add_713(address_space);
    add_714(address_space);
    add_715(address_space);
    add_716(address_space);
    add_717(address_space);
    add_718(address_space);
    add_719(address_space);
    add_720(address_space);
    add_721(address_space);
    add_722(address_space);
    add_723(address_space);
    add_724(address_space);
    add_725(address_space);
    add_726(address_space);
    add_727(address_space);
    add_728(address_space);
    add_729(address_space);
    add_730(address_space);
    add_731(address_space);
    add_732(address_space);
    add_733(address_space);
    add_734(address_space);
    add_735(address_space);
    add_736(address_space);
    add_737(address_space);
    add_738(address_space);
    add_739(address_space);
    add_740(address_space);
    add_741(address_space);
    add_742(address_space);
    add_743(address_space);
    add_744(address_space);
    add_745(address_space);
    add_746(address_space);
    add_747(address_space);
    add_748(address_space);
    add_749(address_space);
    add_750(address_space);
    add_751(address_space);
    add_752(address_space);
    add_753(address_space);
    add_754(address_space);
    add_755(address_space);
    add_756(address_space);
    add_757(address_space);
    add_758(address_space);
    add_759(address_space);
    add_760(address_space);
    add_761(address_space);
    add_762(address_space);
    add_763(address_space);
    add_764(address_space);
    add_765(address_space);
    add_766(address_space);
    add_767(address_space);
    add_768(address_space);
    add_769(address_space);
    add_770(address_space);
    add_771(address_space);
    add_772(address_space);
    add_773(address_space);
    add_774(address_space);
    add_775(address_space);
    add_776(address_space);
    add_777(address_space);
    add_778(address_space);
    add_779(address_space);
    add_780(address_space);
    add_781(address_space);
    add_782(address_space);
    add_783(address_space);
    add_784(address_space);
    add_785(address_space);
    add_786(address_space);
    add_787(address_space);
    add_788(address_space);
    add_789(address_space);
    add_790(address_space);
    add_791(address_space);
    add_792(address_space);
    add_793(address_space);
    add_794(address_space);
    add_795(address_space);
    add_796(address_space);
    add_797(address_space);
    add_798(address_space);
    add_799(address_space);
    add_800(address_space);
    add_801(address_space);
    add_802(address_space);
    add_803(address_space);
    add_804(address_space);
    add_805(address_space);
    add_806(address_space);
    add_807(address_space);
    add_808(address_space);
    add_809(address_space);
    add_810(address_space);
    add_811(address_space);
    add_812(address_space);
    add_813(address_space);
    add_814(address_space);
    add_815(address_space);
    add_816(address_space);
    add_817(address_space);
    add_818(address_space);
    add_819(address_space);
    add_820(address_space);
    add_821(address_space);
    add_822(address_space);
    add_823(address_space);
    add_824(address_space);
    add_825(address_space);
    add_826(address_space);
    add_827(address_space);
    add_828(address_space);
    add_829(address_space);
    add_830(address_space);
    add_831(address_space);
    add_832(address_space);
    add_833(address_space);
    add_834(address_space);
    add_835(address_space);
    add_836(address_space);
    add_837(address_space);
    add_838(address_space);
    add_839(address_space);
    add_840(address_space);
    add_841(address_space);
    add_842(address_space);
    add_843(address_space);
    add_844(address_space);
    add_845(address_space);
    add_846(address_space);
    add_847(address_space);
    add_848(address_space);
    add_849(address_space);
    add_850(address_space);
    add_851(address_space);
    add_852(address_space);
    add_853(address_space);
    add_854(address_space);
    add_855(address_space);
    add_856(address_space);
    add_857(address_space);
    add_858(address_space);
    add_859(address_space);
    add_860(address_space);
    add_861(address_space);
    add_862(address_space);
    add_863(address_space);
    add_864(address_space);
    add_865(address_space);
    add_866(address_space);
    add_867(address_space);
    add_868(address_space);
    add_869(address_space);
    add_870(address_space);
    add_871(address_space);
    add_872(address_space);
    add_873(address_space);
    add_874(address_space);
    add_875(address_space);
    add_876(address_space);
    add_877(address_space);
    add_878(address_space);
    add_879(address_space);
    add_880(address_space);
    add_881(address_space);
    add_882(address_space);
    add_883(address_space);
    add_884(address_space);
    add_885(address_space);
    add_886(address_space);
    add_887(address_space);
    add_888(address_space);
    add_889(address_space);
    add_890(address_space);
    add_891(address_space);
    add_892(address_space);
    add_893(address_space);
    add_894(address_space);
    add_895(address_space);
    add_896(address_space);
    add_897(address_space);
    add_898(address_space);
    add_899(address_space);
    add_900(address_space);
    add_901(address_space);
    add_902(address_space);
    add_903(address_space);
    add_904(address_space);
    add_905(address_space);
    add_906(address_space);
    add_907(address_space);
    add_908(address_space);
    add_909(address_space);
    add_910(address_space);
    add_911(address_space);
    add_912(address_space);
    add_913(address_space);
    add_914(address_space);
    add_915(address_space);
    add_916(address_space);
    add_917(address_space);
    add_918(address_space);
    add_919(address_space);
    add_920(address_space);
    add_921(address_space);
    add_922(address_space);
    add_923(address_space);
    add_924(address_space);
    add_925(address_space);
    add_926(address_space);
    add_927(address_space);
    add_928(address_space);
    add_929(address_space);
    add_930(address_space);
    add_931(address_space);
    add_932(address_space);
    add_933(address_space);
    add_934(address_space);
    add_935(address_space);
    add_936(address_space);
    add_937(address_space);
    add_938(address_space);
    add_939(address_space);
    add_940(address_space);
    add_941(address_space);
    add_942(address_space);
    add_943(address_space);
    add_944(address_space);
    add_945(address_space);
    add_946(address_space);
    add_947(address_space);
    add_948(address_space);
    add_949(address_space);
    add_950(address_space);
    add_951(address_space);
    add_952(address_space);
    add_953(address_space);
    add_954(address_space);
    add_955(address_space);
    add_956(address_space);
    add_957(address_space);
    add_958(address_space);
    add_959(address_space);
    add_960(address_space);
    add_961(address_space);
    add_962(address_space);
    add_963(address_space);
    add_964(address_space);
    add_965(address_space);
    add_966(address_space);
    add_967(address_space);
    add_968(address_space);
    add_969(address_space);
    add_970(address_space);
    add_971(address_space);
    add_972(address_space);
    add_973(address_space);
    add_974(address_space);
    add_975(address_space);
    add_976(address_space);
    add_977(address_space);
    add_978(address_space);
    add_979(address_space);
    add_980(address_space);
    add_981(address_space);
    add_982(address_space);
    add_983(address_space);
    add_984(address_space);
    add_985(address_space);
    add_986(address_space);
    add_987(address_space);
    add_988(address_space);
    add_989(address_space);
    add_990(address_space);
    add_991(address_space);
    add_992(address_space);
    add_993(address_space);
    add_994(address_space);
    add_995(address_space);
    add_996(address_space);
    add_997(address_space);
    add_998(address_space);
    add_999(address_space);
    add_1000(address_space);
    add_1001(address_space);
    add_1002(address_space);
    add_1003(address_space);
    add_1004(address_space);
    add_1005(address_space);
    add_1006(address_space);
    add_1007(address_space);
    add_1008(address_space);
    add_1009(address_space);
    add_1010(address_space);
    add_1011(address_space);
    add_1012(address_space);
}
