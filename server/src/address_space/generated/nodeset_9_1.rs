// This file was autogenerated from Opc.Ua.NodeSet2.Part9.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

#[allow(unused_imports)]
use opcua_types::{
    node_id::NodeId,
    data_value::DataValue,
    variant::Variant, 
    extension_object::ExtensionObject, 
    string::UAString,
    basic_types::LocalizedText,
    service_types::{
        Argument
    },
    node_ids::*
};
#[allow(unused_imports)]
use crate::address_space::types::*;

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_object_1(address_space);
    add_object_2(address_space);
    add_object_3(address_space);
    add_object_4(address_space);
    add_object_5(address_space);
    add_object_6(address_space);
    add_object_7(address_space);
    add_object_8(address_space);
    add_object_9(address_space);
    add_object_10(address_space);
    add_object_11(address_space);
    add_object_12(address_space);
    add_object_13(address_space);
    add_object_14(address_space);
    add_object_15(address_space);
    add_object_16(address_space);
    add_object_17(address_space);
    add_object_18(address_space);
    add_object_19(address_space);
    add_objecttype_20(address_space);
    add_objecttype_21(address_space);
    add_objecttype_22(address_space);
    add_objecttype_23(address_space);
    add_objecttype_24(address_space);
    add_objecttype_25(address_space);
    add_objecttype_26(address_space);
    add_objecttype_27(address_space);
    add_objecttype_28(address_space);
    add_objecttype_29(address_space);
    add_objecttype_30(address_space);
    add_objecttype_31(address_space);
    add_objecttype_32(address_space);
    add_objecttype_33(address_space);
    add_objecttype_34(address_space);
    add_objecttype_35(address_space);
    add_objecttype_36(address_space);
    add_objecttype_37(address_space);
    add_objecttype_38(address_space);
    add_objecttype_39(address_space);
    add_objecttype_40(address_space);
    add_objecttype_41(address_space);
    add_objecttype_42(address_space);
    add_objecttype_43(address_space);
    add_objecttype_44(address_space);
    add_objecttype_45(address_space);
    add_objecttype_46(address_space);
    add_objecttype_47(address_space);
    add_objecttype_48(address_space);
    add_objecttype_49(address_space);
    add_objecttype_50(address_space);
    add_objecttype_51(address_space);
    add_objecttype_52(address_space);
    add_objecttype_53(address_space);
    add_referencetype_54(address_space);
    add_referencetype_55(address_space);
    add_referencetype_56(address_space);
    add_variable_57(address_space);
    add_variable_58(address_space);
    add_variable_59(address_space);
    add_variable_60(address_space);
    add_variable_61(address_space);
    add_variable_62(address_space);
    add_variable_63(address_space);
    add_variable_64(address_space);
    add_variable_65(address_space);
    add_variable_66(address_space);
    add_variable_67(address_space);
    add_variable_68(address_space);
    add_variable_69(address_space);
    add_variable_70(address_space);
    add_variable_71(address_space);
    add_variable_72(address_space);
    add_variable_73(address_space);
    add_variable_74(address_space);
    add_variable_75(address_space);
    add_variable_76(address_space);
    add_variable_77(address_space);
    add_variable_78(address_space);
    add_variable_79(address_space);
    add_variable_80(address_space);
    add_variable_81(address_space);
    add_variable_82(address_space);
    add_variable_83(address_space);
    add_variable_84(address_space);
    add_variable_85(address_space);
    add_variable_86(address_space);
    add_variable_87(address_space);
    add_variable_88(address_space);
    add_variable_89(address_space);
    add_variable_90(address_space);
    add_variable_91(address_space);
    add_variable_92(address_space);
    add_variable_93(address_space);
    add_variable_94(address_space);
    add_variable_95(address_space);
    add_variable_96(address_space);
    add_variable_97(address_space);
    add_variable_98(address_space);
    add_variable_99(address_space);
    add_variable_100(address_space);
}

fn add_object_1(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "ShelvingState";
    let display_name = "ShelvingState";
    let description = "";
    let node_id = NodeId::new(0, 9178);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2915), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9179), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9184), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9189), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9211), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9212), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9213), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2915), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_2(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Unshelved";
    let display_name = "Unshelved";
    let description = "";
    let node_id = NodeId::new(0, 2930);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 6098), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2307), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_3(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TimedShelved";
    let display_name = "TimedShelved";
    let description = "";
    let node_id = NodeId::new(0, 2932);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 6100), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2307), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_4(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "OneShotShelved";
    let display_name = "OneShotShelved";
    let description = "";
    let node_id = NodeId::new(0, 2933);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 6101), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2307), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_5(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "UnshelvedToTimedShelved";
    let display_name = "UnshelvedToTimedShelved";
    let description = "";
    let node_id = NodeId::new(0, 2935);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11322), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_6(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "UnshelvedToOneShotShelved";
    let display_name = "UnshelvedToOneShotShelved";
    let description = "";
    let node_id = NodeId::new(0, 2936);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11323), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_7(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TimedShelvedToUnshelved";
    let display_name = "TimedShelvedToUnshelved";
    let description = "";
    let node_id = NodeId::new(0, 2940);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11324), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_8(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TimedShelvedToOneShotShelved";
    let display_name = "TimedShelvedToOneShotShelved";
    let description = "";
    let node_id = NodeId::new(0, 2942);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11325), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_9(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "OneShotShelvedToUnshelved";
    let display_name = "OneShotShelvedToUnshelved";
    let description = "";
    let node_id = NodeId::new(0, 2943);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11326), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_10(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "OneShotShelvedToTimedShelved";
    let display_name = "OneShotShelvedToTimedShelved";
    let description = "";
    let node_id = NodeId::new(0, 2945);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2929), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11327), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 2929), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_11(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "HighHigh";
    let display_name = "HighHigh";
    let description = "";
    let node_id = NodeId::new(0, 9329);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9318), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9330), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2307), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_12(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "High";
    let display_name = "High";
    let description = "";
    let node_id = NodeId::new(0, 9331);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9318), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9332), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2307), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_13(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Low";
    let display_name = "Low";
    let description = "";
    let node_id = NodeId::new(0, 9333);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9318), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9334), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2307), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_14(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "LowLow";
    let display_name = "LowLow";
    let description = "";
    let node_id = NodeId::new(0, 9335);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9318), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9336), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2307), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_15(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "LowLowToLow";
    let display_name = "LowLowToLow";
    let description = "";
    let node_id = NodeId::new(0, 9337);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9318), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11340), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_16(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "LowToLowLow";
    let display_name = "LowToLowLow";
    let description = "";
    let node_id = NodeId::new(0, 9338);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9318), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11341), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_17(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "HighHighToHigh";
    let display_name = "HighHighToHigh";
    let description = "";
    let node_id = NodeId::new(0, 9339);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9318), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11342), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_18(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "HighToHighHigh";
    let display_name = "HighToHighHigh";
    let description = "";
    let node_id = NodeId::new(0, 9340);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9318), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 11343), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2310), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_19(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "LimitState";
    let display_name = "LimitState";
    let description = "";
    let node_id = NodeId::new(0, 9455);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9341), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9456), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9461), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9318), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9341), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_20(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ConditionType";
    let display_name = "ConditionType";
    let description = "";
    let node_id = NodeId::new(0, 2782);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11112), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11113), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9009), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9010), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3874), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9011), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9020), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9022), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9024), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9026), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9028), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9027), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9029), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3875), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12912), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2041), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_21(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "DialogConditionType";
    let display_name = "DialogConditionType";
    let description = "";
    let node_id = NodeId::new(0, 2830);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9035), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9055), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2831), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9064), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9065), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9066), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9067), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9068), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9069), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_22(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AcknowledgeableConditionType";
    let display_name = "AcknowledgeableConditionType";
    let description = "";
    let node_id = NodeId::new(0, 2881);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9073), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9093), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9102), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9111), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9113), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_23(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AlarmConditionType";
    let display_name = "AlarmConditionType";
    let description = "";
    let node_id = NodeId::new(0, 2915);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9118), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9160), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11120), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9169), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9178), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9215), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9216), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2881), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_24(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ShelvedStateMachineType";
    let display_name = "ShelvedStateMachineType";
    let description = "";
    let node_id = NodeId::new(0, 2929);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9115), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2930), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2932), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2933), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2935), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2936), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2940), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2942), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2943), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2945), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2947), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2948), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2949), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2771), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_25(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "LimitAlarmType";
    let display_name = "LimitAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 2955);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11124), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11125), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11126), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11127), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2915), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_26(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ExclusiveLimitStateMachineType";
    let display_name = "ExclusiveLimitStateMachineType";
    let description = "";
    let node_id = NodeId::new(0, 9318);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9329), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9331), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9333), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9335), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9337), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9338), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9339), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9340), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2771), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_27(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ExclusiveLimitAlarmType";
    let display_name = "ExclusiveLimitAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 9341);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9398), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 9455), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2955), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_28(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "NonExclusiveLimitAlarmType";
    let display_name = "NonExclusiveLimitAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 9906);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9963), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 10020), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 10029), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 10038), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 10047), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2955), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_29(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "NonExclusiveLevelAlarmType";
    let display_name = "NonExclusiveLevelAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 10060);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9906), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_30(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ExclusiveLevelAlarmType";
    let display_name = "ExclusiveLevelAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 9482);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9341), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_31(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "NonExclusiveDeviationAlarmType";
    let display_name = "NonExclusiveDeviationAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 10368);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 10522), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9906), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_32(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ExclusiveDeviationAlarmType";
    let display_name = "ExclusiveDeviationAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 9764);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9905), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9341), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_33(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "NonExclusiveRateOfChangeAlarmType";
    let display_name = "NonExclusiveRateOfChangeAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 10214);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9906), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_34(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ExclusiveRateOfChangeAlarmType";
    let display_name = "ExclusiveRateOfChangeAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 9623);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9341), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_35(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "DiscreteAlarmType";
    let display_name = "DiscreteAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 10523);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2915), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_36(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "OffNormalAlarmType";
    let display_name = "OffNormalAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 10637);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11158), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 10523), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_37(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "SystemOffNormalAlarmType";
    let display_name = "SystemOffNormalAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 11753);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 10637), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_38(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "CertificateExpirationAlarmType";
    let display_name = "CertificateExpirationAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 13225);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13325), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 14900), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13326), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13327), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11753), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_39(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "TripAlarmType";
    let display_name = "TripAlarmType";
    let description = "";
    let node_id = NodeId::new(0, 10751);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 10637), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_40(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "BaseConditionClassType";
    let display_name = "BaseConditionClassType";
    let description = "";
    let node_id = NodeId::new(0, 11163);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_41(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ProcessConditionClassType";
    let display_name = "ProcessConditionClassType";
    let description = "";
    let node_id = NodeId::new(0, 11164);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11163), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_42(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "MaintenanceConditionClassType";
    let display_name = "MaintenanceConditionClassType";
    let description = "";
    let node_id = NodeId::new(0, 11165);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11163), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_43(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "SystemConditionClassType";
    let display_name = "SystemConditionClassType";
    let description = "";
    let node_id = NodeId::new(0, 11166);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11163), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_44(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditConditionEventType";
    let display_name = "AuditConditionEventType";
    let description = "";
    let node_id = NodeId::new(0, 2790);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2127), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_45(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditConditionEnableEventType";
    let display_name = "AuditConditionEnableEventType";
    let description = "";
    let node_id = NodeId::new(0, 2803);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2790), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_46(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditConditionCommentEventType";
    let display_name = "AuditConditionCommentEventType";
    let description = "";
    let node_id = NodeId::new(0, 2829);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 4170), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11851), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2790), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_47(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditConditionRespondEventType";
    let display_name = "AuditConditionRespondEventType";
    let description = "";
    let node_id = NodeId::new(0, 8927);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11852), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2790), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_48(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditConditionAcknowledgeEventType";
    let display_name = "AuditConditionAcknowledgeEventType";
    let description = "";
    let node_id = NodeId::new(0, 8944);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8945), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11853), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2790), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_49(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditConditionConfirmEventType";
    let display_name = "AuditConditionConfirmEventType";
    let description = "";
    let node_id = NodeId::new(0, 8961);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8962), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 11854), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2790), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_50(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "AuditConditionShelvingEventType";
    let display_name = "AuditConditionShelvingEventType";
    let description = "";
    let node_id = NodeId::new(0, 11093);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11855), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2790), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_51(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "RefreshStartEventType";
    let display_name = "RefreshStartEventType";
    let description = "";
    let node_id = NodeId::new(0, 2787);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2130), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_52(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "RefreshEndEventType";
    let display_name = "RefreshEndEventType";
    let description = "";
    let node_id = NodeId::new(0, 2788);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2130), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_53(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "RefreshRequiredEventType";
    let display_name = "RefreshRequiredEventType";
    let description = "";
    let node_id = NodeId::new(0, 2789);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2130), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_54(address_space: &mut AddressSpace) {
    // ReferenceType
    let browse_name = "HasTrueSubState";
    let display_name = "HasTrueSubState";
    let description = "";
    let node_id = NodeId::new(0, 9004);
    let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "IsTrueSubStateOf")), false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_55(address_space: &mut AddressSpace) {
    // ReferenceType
    let browse_name = "HasFalseSubState";
    let display_name = "HasFalseSubState";
    let description = "";
    let node_id = NodeId::new(0, 9005);
    let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "IsFalseSubStateOf")), false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_56(address_space: &mut AddressSpace) {
    // ReferenceType
    let browse_name = "HasCondition";
    let display_name = "HasCondition";
    let description = "";
    let node_id = NodeId::new(0, 9006);
    let node = ReferenceType::new(&node_id, browse_name, display_name, description, Some(LocalizedText::new("", "IsConditionOf")), false, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_57(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 8996);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8995), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_58(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransitionTime";
    let display_name = "TransitionTime";
    let description = "";
    let node_id = NodeId::new(0, 9000);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8995), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_59(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EffectiveTransitionTime";
    let display_name = "EffectiveTransitionTime";
    let description = "";
    let node_id = NodeId::new(0, 9001);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8995), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_60(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TrueState";
    let display_name = "TrueState";
    let description = "";
    let node_id = NodeId::new(0, 11110);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8995), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_61(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "FalseState";
    let display_name = "FalseState";
    let description = "";
    let node_id = NodeId::new(0, 11111);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 8995), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_62(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SourceTimestamp";
    let display_name = "SourceTimestamp";
    let description = "";
    let node_id = NodeId::new(0, 9003);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9002), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9002), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_63(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ConditionClassId";
    let display_name = "ConditionClassId";
    let description = "";
    let node_id = NodeId::new(0, 11112);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_64(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ConditionClassName";
    let display_name = "ConditionClassName";
    let description = "";
    let node_id = NodeId::new(0, 11113);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_65(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ConditionName";
    let display_name = "ConditionName";
    let description = "";
    let node_id = NodeId::new(0, 9009);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_66(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "BranchId";
    let display_name = "BranchId";
    let description = "";
    let node_id = NodeId::new(0, 9010);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_67(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Retain";
    let display_name = "Retain";
    let description = "";
    let node_id = NodeId::new(0, 3874);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_68(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnabledState";
    let display_name = "EnabledState";
    let description = "";
    let node_id = NodeId::new(0, 9011);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9012), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9015), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9016), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9017), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_69(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 9012);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9011), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9011), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_70(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EffectiveDisplayName";
    let display_name = "EffectiveDisplayName";
    let description = "";
    let node_id = NodeId::new(0, 9015);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9011), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9011), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_71(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransitionTime";
    let display_name = "TransitionTime";
    let description = "";
    let node_id = NodeId::new(0, 9016);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9011), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9011), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_72(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EffectiveTransitionTime";
    let display_name = "EffectiveTransitionTime";
    let description = "";
    let node_id = NodeId::new(0, 9017);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9011), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9011), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_73(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Quality";
    let display_name = "Quality";
    let description = "";
    let node_id = NodeId::new(0, 9020);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::StatusCode, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9021), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9002), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_74(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SourceTimestamp";
    let display_name = "SourceTimestamp";
    let description = "";
    let node_id = NodeId::new(0, 9021);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9020), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9020), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_75(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastSeverity";
    let display_name = "LastSeverity";
    let description = "";
    let node_id = NodeId::new(0, 9022);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9023), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9002), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_76(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SourceTimestamp";
    let display_name = "SourceTimestamp";
    let description = "";
    let node_id = NodeId::new(0, 9023);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9022), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9022), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_77(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Comment";
    let display_name = "Comment";
    let description = "";
    let node_id = NodeId::new(0, 9024);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9025), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9002), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_78(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "SourceTimestamp";
    let display_name = "SourceTimestamp";
    let description = "";
    let node_id = NodeId::new(0, 9025);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9024), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9024), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_79(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ClientUserId";
    let display_name = "ClientUserId";
    let description = "";
    let node_id = NodeId::new(0, 9026);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2782), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2782), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_80(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("EventId"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Comment"),
                data_type: NodeId::new(0, 21),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 9030);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9029), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9029), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_81(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 288),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 3876);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3875), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3875), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_82(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SubscriptionId"),
                data_type: NodeId::new(0, 288),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("MonitoredItemId"),
                data_type: NodeId::new(0, 288),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12913);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12912), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12912), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_83(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnabledState";
    let display_name = "EnabledState";
    let description = "";
    let node_id = NodeId::new(0, 9035);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2830), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9036), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2830), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_84(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 9036);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9035), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9035), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_85(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DialogState";
    let display_name = "DialogState";
    let description = "";
    let node_id = NodeId::new(0, 9055);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2830), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9056), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9060), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2830), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_86(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 9056);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9055), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9055), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_87(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransitionTime";
    let display_name = "TransitionTime";
    let description = "";
    let node_id = NodeId::new(0, 9060);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9055), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9055), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_88(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Prompt";
    let display_name = "Prompt";
    let description = "";
    let node_id = NodeId::new(0, 2831);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2830), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2830), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_89(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ResponseOptionSet";
    let display_name = "ResponseOptionSet";
    let description = "";
    let node_id = NodeId::new(0, 9064);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2830), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2830), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_90(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "DefaultResponse";
    let display_name = "DefaultResponse";
    let description = "";
    let node_id = NodeId::new(0, 9065);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Int32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2830), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2830), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_91(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OkResponse";
    let display_name = "OkResponse";
    let description = "";
    let node_id = NodeId::new(0, 9066);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Int32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2830), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2830), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_92(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CancelResponse";
    let display_name = "CancelResponse";
    let description = "";
    let node_id = NodeId::new(0, 9067);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Int32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2830), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2830), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_93(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastResponse";
    let display_name = "LastResponse";
    let description = "";
    let node_id = NodeId::new(0, 9068);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Int32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2830), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2830), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_94(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("SelectedResponse"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 9070);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9069), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9069), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_95(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnabledState";
    let display_name = "EnabledState";
    let description = "";
    let node_id = NodeId::new(0, 9073);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2881), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9074), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2881), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_96(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 9074);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9073), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9073), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_97(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "AckedState";
    let display_name = "AckedState";
    let description = "";
    let node_id = NodeId::new(0, 9093);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2881), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9094), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9098), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2881), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_98(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Id";
    let display_name = "Id";
    let description = "";
    let node_id = NodeId::new(0, 9094);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9093), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9093), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_99(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "TransitionTime";
    let display_name = "TransitionTime";
    let description = "";
    let node_id = NodeId::new(0, 9098);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 9093), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 9093), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_100(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "ConfirmedState";
    let display_name = "ConfirmedState";
    let description = "";
    let node_id = NodeId::new(0, 9102);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2881), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 9103), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 9107), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 8995), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2881), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

