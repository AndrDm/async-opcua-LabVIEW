// This file was autogenerated from Opc.Ua.NodeSet2.Part12.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

#[allow(unused_imports)]
use opcua_types::{
    node_id::NodeId,
    data_value::DataValue,
    variant::Variant, 
    extension_object::ExtensionObject, 
    string::UAString,
    basic_types::LocalizedText,
    service_types::{
        Argument
    },
    node_ids::*
};
#[allow(unused_imports)]
use crate::address_space::types::*;

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_object_1(address_space);
    add_object_2(address_space);
    add_object_3(address_space);
    add_object_4(address_space);
    add_object_5(address_space);
    add_object_6(address_space);
    add_object_7(address_space);
    add_object_8(address_space);
    add_object_9(address_space);
    add_object_10(address_space);
    add_object_11(address_space);
    add_object_12(address_space);
    add_object_13(address_space);
    add_object_14(address_space);
    add_objecttype_15(address_space);
    add_objecttype_16(address_space);
    add_objecttype_17(address_space);
    add_objecttype_18(address_space);
    add_objecttype_19(address_space);
    add_objecttype_20(address_space);
    add_objecttype_21(address_space);
    add_objecttype_22(address_space);
    add_objecttype_23(address_space);
    add_objecttype_24(address_space);
    add_objecttype_25(address_space);
    add_datatype_26(address_space);
    add_datatype_27(address_space);
    add_variable_28(address_space);
    add_variable_29(address_space);
    add_variable_30(address_space);
    add_variable_31(address_space);
    add_variable_32(address_space);
    add_variable_33(address_space);
    add_variable_34(address_space);
    add_variable_35(address_space);
    add_variable_36(address_space);
    add_variable_37(address_space);
    add_variable_38(address_space);
    add_variable_39(address_space);
    add_variable_40(address_space);
    add_variable_41(address_space);
    add_variable_42(address_space);
    add_variable_43(address_space);
    add_variable_44(address_space);
    add_variable_45(address_space);
    add_variable_46(address_space);
    add_variable_47(address_space);
    add_variable_48(address_space);
    add_variable_49(address_space);
    add_variable_50(address_space);
    add_variable_51(address_space);
    add_variable_52(address_space);
    add_variable_53(address_space);
    add_variable_54(address_space);
    add_variable_55(address_space);
    add_variable_56(address_space);
    add_variable_57(address_space);
    add_variable_58(address_space);
    add_variable_59(address_space);
    add_variable_60(address_space);
    add_variable_61(address_space);
    add_variable_62(address_space);
    add_variable_63(address_space);
    add_variable_64(address_space);
    add_variable_65(address_space);
    add_variable_66(address_space);
    add_variable_67(address_space);
    add_variable_68(address_space);
    add_variable_69(address_space);
    add_variable_70(address_space);
    add_variable_71(address_space);
    add_variable_72(address_space);
    add_variable_73(address_space);
    add_variable_74(address_space);
    add_variable_75(address_space);
    add_variable_76(address_space);
    add_variable_77(address_space);
    add_variable_78(address_space);
    add_variable_79(address_space);
    add_variable_80(address_space);
    add_variable_81(address_space);
    add_variable_82(address_space);
    add_variable_83(address_space);
    add_variable_84(address_space);
    add_variable_85(address_space);
    add_variable_86(address_space);
    add_variable_87(address_space);
    add_variable_88(address_space);
    add_variable_89(address_space);
    add_variable_90(address_space);
    add_variable_91(address_space);
    add_variable_92(address_space);
    add_variable_93(address_space);
    add_variable_94(address_space);
    add_variable_95(address_space);
    add_variable_96(address_space);
    add_variable_97(address_space);
    add_variable_98(address_space);
    add_variable_99(address_space);
    add_variable_100(address_space);
}

fn add_object_1(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TrustList";
    let display_name = "TrustList";
    let description = "";
    let node_id = NodeId::new(0, 13599);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12555), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13600), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13601), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13602), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13603), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13605), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13608), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13610), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13613), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13615), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13618), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13620), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13621), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12522), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12555), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_2(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "DefaultApplicationGroup";
    let display_name = "DefaultApplicationGroup";
    let description = "";
    let node_id = NodeId::new(0, 13814);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13813), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13815), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13847), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12555), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13813), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_3(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TrustList";
    let display_name = "TrustList";
    let description = "";
    let node_id = NodeId::new(0, 13815);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13814), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13816), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13817), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13818), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13819), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13821), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13824), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13826), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13829), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13831), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13834), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13836), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13837), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12522), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13814), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_4(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "DefaultHttpsGroup";
    let display_name = "DefaultHttpsGroup";
    let description = "";
    let node_id = NodeId::new(0, 13848);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13813), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13849), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13881), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12555), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13813), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_5(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TrustList";
    let display_name = "TrustList";
    let description = "";
    let node_id = NodeId::new(0, 13849);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13848), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13850), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13851), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13852), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13853), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13855), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13858), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13860), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13863), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13865), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13868), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13870), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13871), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12522), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13848), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_6(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "DefaultUserTokenGroup";
    let display_name = "DefaultUserTokenGroup";
    let description = "";
    let node_id = NodeId::new(0, 13882);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13813), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13883), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13915), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12555), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 80), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13813), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_7(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TrustList";
    let display_name = "TrustList";
    let description = "";
    let node_id = NodeId::new(0, 13883);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13882), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13884), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13885), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13886), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13887), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13889), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13892), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13894), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13897), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13899), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13902), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13904), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13905), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12522), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13882), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_8(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "<AdditionalGroup>";
    let display_name = "<AdditionalGroup>";
    let description = "";
    let node_id = NodeId::new(0, 13916);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13813), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13917), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13949), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12555), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 11508), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13813), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
    ]));
}

fn add_object_9(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TrustList";
    let display_name = "TrustList";
    let description = "";
    let node_id = NodeId::new(0, 13917);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13916), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13918), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13919), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13920), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13921), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13923), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13926), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13928), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13931), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13933), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13936), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13938), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13939), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12522), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13916), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_10(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "CertificateGroups";
    let display_name = "CertificateGroups";
    let description = "";
    let node_id = NodeId::new(0, 13950);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12581), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13951), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13813), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12581), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_11(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "DefaultApplicationGroup";
    let display_name = "DefaultApplicationGroup";
    let description = "";
    let node_id = NodeId::new(0, 13951);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13950), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13952), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13984), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12555), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13950), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_12(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "TrustList";
    let display_name = "TrustList";
    let description = "";
    let node_id = NodeId::new(0, 13952);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13951), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 13953), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13954), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13955), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13956), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13958), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13961), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13963), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13966), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13968), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13971), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13973), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13974), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12522), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13951), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_13(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default XML";
    let display_name = "Default XML";
    let description = "";
    let node_id = NodeId::new(0, 12676);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12554), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12677), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_14(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "Default Binary";
    let display_name = "Default Binary";
    let description = "";
    let node_id = NodeId::new(0, 12680);
    let node = Object::new(&node_id, browse_name, display_name, description);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12554), ReferenceTypeId::HasEncoding, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12681), ReferenceTypeId::HasDescription, ReferenceDirection::Forward),
        (&NodeId::new(0, 76), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_objecttype_15(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "TrustListType";
    let display_name = "TrustListType";
    let description = "";
    let node_id = NodeId::new(0, 12522);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12542), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12543), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12546), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12548), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12550), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 11575), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_16(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "CertificateGroupType";
    let display_name = "CertificateGroupType";
    let description = "";
    let node_id = NodeId::new(0, 12555);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13599), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13631), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_17(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "CertificateGroupFolderType";
    let display_name = "CertificateGroupFolderType";
    let description = "";
    let node_id = NodeId::new(0, 13813);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13814), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13848), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13882), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 13916), ReferenceTypeId::Organizes, ReferenceDirection::Forward),
        (&NodeId::new(0, 61), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_18(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "CertificateType";
    let display_name = "CertificateType";
    let description = "";
    let node_id = NodeId::new(0, 12556);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_19(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ApplicationCertificateType";
    let display_name = "ApplicationCertificateType";
    let description = "";
    let node_id = NodeId::new(0, 12557);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12556), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_20(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "HttpsCertificateType";
    let display_name = "HttpsCertificateType";
    let description = "";
    let node_id = NodeId::new(0, 12558);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12556), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_21(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "RsaMinApplicationCertificateType";
    let display_name = "RsaMinApplicationCertificateType";
    let description = "";
    let node_id = NodeId::new(0, 12559);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12557), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_22(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "RsaSha256ApplicationCertificateType";
    let display_name = "RsaSha256ApplicationCertificateType";
    let description = "";
    let node_id = NodeId::new(0, 12560);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12557), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_23(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "TrustListUpdatedAuditEventType";
    let display_name = "TrustListUpdatedAuditEventType";
    let description = "";
    let node_id = NodeId::new(0, 12561);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2127), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_24(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "ServerConfigurationType";
    let display_name = "ServerConfigurationType";
    let description = "";
    let node_id = NodeId::new(0, 12581);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13950), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12708), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12583), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12584), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12585), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 12616), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12734), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12731), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12775), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_25(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "CertificateUpdatedAuditEventType";
    let display_name = "CertificateUpdatedAuditEventType";
    let description = "";
    let node_id = NodeId::new(0, 12620);
    let node = ObjectType::new(&node_id, browse_name, display_name, description, true);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13735), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 13736), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 2127), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_26(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "TrustListMasks";
    let display_name = "TrustListMasks";
    let description = "";
    let node_id = NodeId::new(0, 12552);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12553), ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_27(address_space: &mut AddressSpace) {
    // DataType
    let browse_name = "TrustListDataType";
    let display_name = "TrustListDataType";
    let description = "";
    let node_id = NodeId::new(0, 12554);
    let node = DataType::new(&node_id, browse_name, display_name, description, false);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_28(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastUpdateTime";
    let display_name = "LastUpdateTime";
    let description = "";
    let node_id = NodeId::new(0, 12542);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12522), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12522), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_29(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Masks"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12544);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12543), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12543), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_30(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12545);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12543), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12543), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_31(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12705);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12546), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12546), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_32(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("ApplyChangesRequired"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12547);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12546), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12546), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_33(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Certificate"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("IsTrustedCertificate"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12549);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12548), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12548), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_34(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Thumbprint"),
                data_type: NodeId::new(0, 12),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("IsTrustedCertificate"),
                data_type: NodeId::new(0, 1),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 12551);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12550), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12550), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_35(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "EnumValues";
    let display_name = "EnumValues";
    let description = "";
    let node_id = NodeId::new(0, 12553);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(7594u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12552), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12552), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_36(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Size";
    let display_name = "Size";
    let description = "The size of the file in bytes.";
    let node_id = NodeId::new(0, 13600);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13599), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13599), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_37(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Writable";
    let display_name = "Writable";
    let description = "Whether the file is writable.";
    let node_id = NodeId::new(0, 13601);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13599), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13599), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_38(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserWritable";
    let display_name = "UserWritable";
    let description = "Whether the file is writable by the current user.";
    let node_id = NodeId::new(0, 13602);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13599), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13599), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_39(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OpenCount";
    let display_name = "OpenCount";
    let description = "The current number of open file handles.";
    let node_id = NodeId::new(0, 13603);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13599), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13599), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_40(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Mode"),
                data_type: NodeId::new(0, 3),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13606);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13605), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13605), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_41(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13607);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13605), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13605), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_42(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13609);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13608), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13608), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_43(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Length"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13611);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13610), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13610), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_44(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13612);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13610), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13610), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_45(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13614);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13613), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13613), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_46(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13616);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13615), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13615), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_47(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13617);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13615), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13615), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_48(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13619);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13618), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13618), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_49(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastUpdateTime";
    let display_name = "LastUpdateTime";
    let description = "";
    let node_id = NodeId::new(0, 13620);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13599), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13599), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_50(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Masks"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13622);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13621), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13621), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_51(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13623);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13621), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13621), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_52(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CertificateTypes";
    let display_name = "CertificateTypes";
    let description = "";
    let node_id = NodeId::new(0, 13631);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12555), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12555), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_53(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Size";
    let display_name = "Size";
    let description = "The size of the file in bytes.";
    let node_id = NodeId::new(0, 13816);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13815), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13815), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_54(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Writable";
    let display_name = "Writable";
    let description = "Whether the file is writable.";
    let node_id = NodeId::new(0, 13817);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13815), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13815), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_55(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserWritable";
    let display_name = "UserWritable";
    let description = "Whether the file is writable by the current user.";
    let node_id = NodeId::new(0, 13818);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13815), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13815), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_56(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OpenCount";
    let display_name = "OpenCount";
    let description = "The current number of open file handles.";
    let node_id = NodeId::new(0, 13819);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13815), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13815), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_57(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Mode"),
                data_type: NodeId::new(0, 3),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13822);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13821), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13821), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_58(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13823);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13821), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13821), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_59(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13825);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13824), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13824), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_60(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Length"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13827);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13826), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13826), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_61(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13828);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13826), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13826), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_62(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13830);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13829), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13829), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_63(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13832);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13831), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13831), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_64(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13833);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13831), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13831), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_65(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13835);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13834), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13834), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_66(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastUpdateTime";
    let display_name = "LastUpdateTime";
    let description = "";
    let node_id = NodeId::new(0, 13836);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13815), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13815), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_67(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Masks"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13838);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13837), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13837), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_68(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13839);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13837), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13837), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_69(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CertificateTypes";
    let display_name = "CertificateTypes";
    let description = "";
    let node_id = NodeId::new(0, 13847);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13814), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13814), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_70(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Size";
    let display_name = "Size";
    let description = "The size of the file in bytes.";
    let node_id = NodeId::new(0, 13850);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13849), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13849), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_71(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Writable";
    let display_name = "Writable";
    let description = "Whether the file is writable.";
    let node_id = NodeId::new(0, 13851);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13849), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13849), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_72(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserWritable";
    let display_name = "UserWritable";
    let description = "Whether the file is writable by the current user.";
    let node_id = NodeId::new(0, 13852);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13849), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13849), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_73(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OpenCount";
    let display_name = "OpenCount";
    let description = "The current number of open file handles.";
    let node_id = NodeId::new(0, 13853);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13849), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13849), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_74(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Mode"),
                data_type: NodeId::new(0, 3),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13856);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13855), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13855), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_75(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13857);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13855), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13855), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_76(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13859);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13858), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13858), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_77(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Length"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13861);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13860), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_78(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13862);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13860), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13860), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_79(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13864);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13863), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13863), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_80(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13866);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13865), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13865), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_81(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13867);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13865), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13865), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_82(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13869);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13868), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13868), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_83(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastUpdateTime";
    let display_name = "LastUpdateTime";
    let description = "";
    let node_id = NodeId::new(0, 13870);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13849), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13849), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_84(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Masks"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13872);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13871), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13871), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_85(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13873);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13871), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13871), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_86(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "CertificateTypes";
    let display_name = "CertificateTypes";
    let description = "";
    let node_id = NodeId::new(0, 13881);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13848), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13848), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_87(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Size";
    let display_name = "Size";
    let description = "The size of the file in bytes.";
    let node_id = NodeId::new(0, 13884);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt64, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13883), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13883), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_88(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "Writable";
    let display_name = "Writable";
    let description = "Whether the file is writable.";
    let node_id = NodeId::new(0, 13885);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13883), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13883), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_89(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "UserWritable";
    let display_name = "UserWritable";
    let description = "Whether the file is writable by the current user.";
    let node_id = NodeId::new(0, 13886);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13883), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13883), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_90(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "OpenCount";
    let display_name = "OpenCount";
    let description = "The current number of open file handles.";
    let node_id = NodeId::new(0, 13887);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13883), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13883), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_91(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Mode"),
                data_type: NodeId::new(0, 3),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13890);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13889), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13889), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_92(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13891);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13889), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13889), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_93(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13893);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13892), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13892), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_94(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Length"),
                data_type: NodeId::new(0, 6),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13895);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13894), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13894), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_95(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13896);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13894), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13894), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_96(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Data"),
                data_type: NodeId::new(0, 15),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13898);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13897), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13897), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_97(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13900);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13899), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13899), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_98(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "OutputArguments";
    let display_name = "OutputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13901);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13899), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13899), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_99(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::new(vec![
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("FileHandle"),
                data_type: NodeId::new(0, 7),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
        Variant::from(ExtensionObject::from_encodable(
            NodeId::new(0, 297), &Argument {
                name: UAString::from("Position"),
                data_type: NodeId::new(0, 9),
                value_rank: -1,
                array_dimensions: None,
                description: LocalizedText::new("", ""),
            })),
    ]);
    let browse_name = "InputArguments";
    let display_name = "InputArguments";
    let description = "";
    let node_id = NodeId::new(0, 13903);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(296u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13902), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13902), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_100(address_space: &mut AddressSpace) {
    // Variable
    let data_value = DataValue::null();
    let browse_name = "LastUpdateTime";
    let display_name = "LastUpdateTime";
    let description = "";
    let node_id = NodeId::new(0, 13904);
    let node = Variable::new_data_value(&node_id, browse_name, display_name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 13883), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 13883), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

