// This file was autogenerated from Opc.Ua.NodeSet2.Part5.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

#[allow(unused_imports)]
use opcua_types::{
    node_id::NodeId,
    data_value::DataValue,
    variant::Variant, 
    extension_object::ExtensionObject, 
    string::UAString,
    basic_types::LocalizedText,
    service_types::{
        Argument
    },
    node_ids::*
};
#[allow(unused_imports)]
use crate::address_space::types::*;

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_variable_1(address_space);
    add_variable_2(address_space);
    add_variable_3(address_space);
    add_variable_4(address_space);
    add_variable_5(address_space);
    add_variable_6(address_space);
    add_variable_7(address_space);
    add_variable_8(address_space);
    add_variable_9(address_space);
    add_variable_10(address_space);
    add_variable_11(address_space);
    add_variable_12(address_space);
    add_variable_13(address_space);
    add_variable_14(address_space);
    add_variable_15(address_space);
    add_variable_16(address_space);
    add_variable_17(address_space);
    add_variable_18(address_space);
    add_variable_19(address_space);
    add_variable_20(address_space);
    add_variable_21(address_space);
    add_variable_22(address_space);
    add_variable_23(address_space);
    add_variable_24(address_space);
    add_variable_25(address_space);
    add_variable_26(address_space);
    add_variable_27(address_space);
    add_variable_28(address_space);
    add_variable_29(address_space);
    add_variable_30(address_space);
    add_variable_31(address_space);
    add_variable_32(address_space);
    add_variable_33(address_space);
    add_variable_34(address_space);
    add_variable_35(address_space);
    add_variable_36(address_space);
    add_variable_37(address_space);
    add_variable_38(address_space);
    add_variable_39(address_space);
    add_variable_40(address_space);
    add_variable_41(address_space);
    add_variable_42(address_space);
    add_variable_43(address_space);
    add_variable_44(address_space);
    add_variable_45(address_space);
    add_variable_46(address_space);
    add_variable_47(address_space);
    add_variable_48(address_space);
    add_variable_49(address_space);
    add_variable_50(address_space);
    add_variable_51(address_space);
    add_variable_52(address_space);
    add_variable_53(address_space);
    add_variable_54(address_space);
    add_variable_55(address_space);
    add_variable_56(address_space);
    add_variable_57(address_space);
    add_variable_58(address_space);
    add_variable_59(address_space);
    add_variable_60(address_space);
    add_variable_61(address_space);
    add_variable_62(address_space);
    add_variable_63(address_space);
    add_variable_64(address_space);
    add_variable_65(address_space);
    add_variable_66(address_space);
    add_variable_67(address_space);
    add_variable_68(address_space);
    add_variable_69(address_space);
    add_variable_70(address_space);
    add_variable_71(address_space);
    add_variable_72(address_space);
    add_variable_73(address_space);
    add_variable_74(address_space);
    add_variable_75(address_space);
    add_variable_76(address_space);
    add_variable_77(address_space);
    add_variable_78(address_space);
    add_variable_79(address_space);
    add_variable_80(address_space);
    add_variable_81(address_space);
    add_variable_82(address_space);
    add_variable_83(address_space);
    add_variable_84(address_space);
    add_variable_85(address_space);
    add_variable_86(address_space);
    add_variable_87(address_space);
    add_variable_88(address_space);
    add_variable_89(address_space);
    add_variable_90(address_space);
    add_variable_91(address_space);
    add_variable_92(address_space);
    add_variable_93(address_space);
    add_variable_94(address_space);
    add_variable_95(address_space);
    add_variable_96(address_space);
    add_variable_97(address_space);
    add_variable_98(address_space);
    add_variable_99(address_space);
    add_variable_100(address_space);
}

fn add_variable_1(address_space: &mut AddressSpace) {
    // Variable
    let name = "ParameterDataTypeId";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2751);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2104), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2104), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_2(address_space: &mut AddressSpace) {
    // Variable
    let name = "MethodId";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2128);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2127), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2127), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_3(address_space: &mut AddressSpace) {
    // Variable
    let name = "InputArguments";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2129);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2127), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2127), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_4(address_space: &mut AddressSpace) {
    // Variable
    let name = "SystemState";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11696);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(852u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11446), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11446), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_5(address_space: &mut AddressSpace) {
    // Variable
    let name = "Changes";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2134);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(877u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2133), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2133), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_6(address_space: &mut AddressSpace) {
    // Variable
    let name = "Changes";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2739);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(897u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2738), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2738), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_7(address_space: &mut AddressSpace) {
    // Variable
    let name = "Context";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12502);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11436), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11436), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_8(address_space: &mut AddressSpace) {
    // Variable
    let name = "Progress";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12503);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt16, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 11436), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 68), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 11436), ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_9(address_space: &mut AddressSpace) {
    // Variable
    let name = "StartTime";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2139);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_10(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentTime";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2140);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_11(address_space: &mut AddressSpace) {
    // Variable
    let name = "State";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2141);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(852u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_12(address_space: &mut AddressSpace) {
    // Variable
    let name = "BuildInfo";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2142);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(338u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 3698), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3699), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3700), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3701), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3702), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3703), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_13(address_space: &mut AddressSpace) {
    // Variable
    let name = "ProductUri";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3698);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_14(address_space: &mut AddressSpace) {
    // Variable
    let name = "ManufacturerName";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3699);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_15(address_space: &mut AddressSpace) {
    // Variable
    let name = "ProductName";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3700);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_16(address_space: &mut AddressSpace) {
    // Variable
    let name = "SoftwareVersion";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3701);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_17(address_space: &mut AddressSpace) {
    // Variable
    let name = "BuildNumber";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3702);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_18(address_space: &mut AddressSpace) {
    // Variable
    let name = "BuildDate";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3703);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2142), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2142), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_19(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecondsTillShutdown";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2752);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_20(address_space: &mut AddressSpace) {
    // Variable
    let name = "ShutdownReason";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2753);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::LocalizedText, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2138), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2138), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_21(address_space: &mut AddressSpace) {
    // Variable
    let name = "ProductUri";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3052);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_22(address_space: &mut AddressSpace) {
    // Variable
    let name = "ManufacturerName";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3053);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_23(address_space: &mut AddressSpace) {
    // Variable
    let name = "ProductName";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3054);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_24(address_space: &mut AddressSpace) {
    // Variable
    let name = "SoftwareVersion";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3055);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_25(address_space: &mut AddressSpace) {
    // Variable
    let name = "BuildNumber";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3056);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::String, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_26(address_space: &mut AddressSpace) {
    // Variable
    let name = "BuildDate";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 3057);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(294u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 3051), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 3051), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_27(address_space: &mut AddressSpace) {
    // Variable
    let name = "ServerViewCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2151);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_28(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentSessionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2152);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_29(address_space: &mut AddressSpace) {
    // Variable
    let name = "CumulatedSessionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2153);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_30(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecurityRejectedSessionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2154);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_31(address_space: &mut AddressSpace) {
    // Variable
    let name = "RejectedSessionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2155);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_32(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionTimeoutCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2156);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_33(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionAbortCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2157);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_34(address_space: &mut AddressSpace) {
    // Variable
    let name = "PublishingIntervalCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2159);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_35(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentSubscriptionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2160);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_36(address_space: &mut AddressSpace) {
    // Variable
    let name = "CumulatedSubscriptionCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2161);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_37(address_space: &mut AddressSpace) {
    // Variable
    let name = "SecurityRejectedRequestsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2162);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_38(address_space: &mut AddressSpace) {
    // Variable
    let name = "RejectedRequestsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2163);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2150), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2150), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_39(address_space: &mut AddressSpace) {
    // Variable
    let name = "SamplingIntervalDiagnostics";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12779);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(856u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2164), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12780), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12781), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12782), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12783), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 83), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2164), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_40(address_space: &mut AddressSpace) {
    // Variable
    let name = "SamplingInterval";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12780);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_41(address_space: &mut AddressSpace) {
    // Variable
    let name = "SampledMonitoredItemsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12781);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_42(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxSampledMonitoredItemsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12782);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_43(address_space: &mut AddressSpace) {
    // Variable
    let name = "DisabledMonitoredItemsSamplingCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12783);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12779), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12779), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_44(address_space: &mut AddressSpace) {
    // Variable
    let name = "SamplingInterval";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2166);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(290u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2165), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_45(address_space: &mut AddressSpace) {
    // Variable
    let name = "SampledMonitoredItemsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11697);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2165), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_46(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxSampledMonitoredItemsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11698);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2165), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_47(address_space: &mut AddressSpace) {
    // Variable
    let name = "DisabledMonitoredItemsSamplingCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 11699);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2165), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2165), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_48(address_space: &mut AddressSpace) {
    // Variable
    let name = "SubscriptionDiagnostics";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12784);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::from_u32(874u32).unwrap(), data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2171), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 12785), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12786), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12787), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12788), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12789), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12790), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12791), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12792), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12793), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12794), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12795), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12796), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12797), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12798), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12799), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12800), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12801), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12802), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12803), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12804), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12805), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12806), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12807), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12808), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12809), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12810), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12811), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12812), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12813), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12814), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 12815), ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 83), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2171), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_49(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionId";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12785);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_50(address_space: &mut AddressSpace) {
    // Variable
    let name = "SubscriptionId";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12786);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_51(address_space: &mut AddressSpace) {
    // Variable
    let name = "Priority";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12787);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_52(address_space: &mut AddressSpace) {
    // Variable
    let name = "PublishingInterval";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12788);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Double, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_53(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxKeepAliveCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12789);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_54(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxLifetimeCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12790);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_55(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNotificationsPerPublish";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12791);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_56(address_space: &mut AddressSpace) {
    // Variable
    let name = "PublishingEnabled";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12792);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_57(address_space: &mut AddressSpace) {
    // Variable
    let name = "ModifyCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12793);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_58(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnableCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12794);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_59(address_space: &mut AddressSpace) {
    // Variable
    let name = "DisableCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12795);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_60(address_space: &mut AddressSpace) {
    // Variable
    let name = "RepublishRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12796);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_61(address_space: &mut AddressSpace) {
    // Variable
    let name = "RepublishMessageRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12797);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_62(address_space: &mut AddressSpace) {
    // Variable
    let name = "RepublishMessageCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12798);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_63(address_space: &mut AddressSpace) {
    // Variable
    let name = "TransferRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12799);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_64(address_space: &mut AddressSpace) {
    // Variable
    let name = "TransferredToAltClientCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12800);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_65(address_space: &mut AddressSpace) {
    // Variable
    let name = "TransferredToSameClientCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12801);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_66(address_space: &mut AddressSpace) {
    // Variable
    let name = "PublishRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12802);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_67(address_space: &mut AddressSpace) {
    // Variable
    let name = "DataChangeNotificationsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12803);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_68(address_space: &mut AddressSpace) {
    // Variable
    let name = "EventNotificationsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12804);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_69(address_space: &mut AddressSpace) {
    // Variable
    let name = "NotificationsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12805);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_70(address_space: &mut AddressSpace) {
    // Variable
    let name = "LatePublishRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12806);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_71(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentKeepAliveCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12807);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_72(address_space: &mut AddressSpace) {
    // Variable
    let name = "CurrentLifetimeCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12808);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_73(address_space: &mut AddressSpace) {
    // Variable
    let name = "UnacknowledgedMessageCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12809);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_74(address_space: &mut AddressSpace) {
    // Variable
    let name = "DiscardedMessageCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12810);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_75(address_space: &mut AddressSpace) {
    // Variable
    let name = "MonitoredItemCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12811);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_76(address_space: &mut AddressSpace) {
    // Variable
    let name = "DisabledMonitoredItemCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12812);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_77(address_space: &mut AddressSpace) {
    // Variable
    let name = "MonitoringQueueOverflowCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12813);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_78(address_space: &mut AddressSpace) {
    // Variable
    let name = "NextSequenceNumber";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12814);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_79(address_space: &mut AddressSpace) {
    // Variable
    let name = "EventQueueOverFlowCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 12815);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 12784), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 12784), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_80(address_space: &mut AddressSpace) {
    // Variable
    let name = "SessionId";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2173);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::NodeId, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_81(address_space: &mut AddressSpace) {
    // Variable
    let name = "SubscriptionId";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2174);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_82(address_space: &mut AddressSpace) {
    // Variable
    let name = "Priority";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2175);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Byte, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_83(address_space: &mut AddressSpace) {
    // Variable
    let name = "PublishingInterval";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2176);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Double, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_84(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxKeepAliveCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2177);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_85(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxLifetimeCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 8888);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_86(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxNotificationsPerPublish";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2179);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_87(address_space: &mut AddressSpace) {
    // Variable
    let name = "PublishingEnabled";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2180);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::Boolean, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_88(address_space: &mut AddressSpace) {
    // Variable
    let name = "ModifyCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2181);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_89(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnableCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2182);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_90(address_space: &mut AddressSpace) {
    // Variable
    let name = "DisableCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2183);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_91(address_space: &mut AddressSpace) {
    // Variable
    let name = "RepublishRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2184);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_92(address_space: &mut AddressSpace) {
    // Variable
    let name = "RepublishMessageRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2185);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_93(address_space: &mut AddressSpace) {
    // Variable
    let name = "RepublishMessageCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2186);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_94(address_space: &mut AddressSpace) {
    // Variable
    let name = "TransferRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2187);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_95(address_space: &mut AddressSpace) {
    // Variable
    let name = "TransferredToAltClientCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2188);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_96(address_space: &mut AddressSpace) {
    // Variable
    let name = "TransferredToSameClientCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2189);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_97(address_space: &mut AddressSpace) {
    // Variable
    let name = "PublishRequestCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2190);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_98(address_space: &mut AddressSpace) {
    // Variable
    let name = "DataChangeNotificationsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2191);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_99(address_space: &mut AddressSpace) {
    // Variable
    let name = "EventNotificationsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2998);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_100(address_space: &mut AddressSpace) {
    // Variable
    let name = "NotificationsCount";
    let description = "";
    let data_value = DataValue::null();
    let node_id = NodeId::new(0, 2193);
    let node = Variable::new_data_value(&node_id, name, name, description, DataTypeId::UInt32, data_value);
    address_space.insert(node, Some(&[
        (&NodeId::new(0, 2172), ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(0, 63), ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 2172), ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

