// This file was autogenerated from Opc.Ua.NodeSet2.Part3.xml
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::str::FromStr;

use prelude::*;

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    {
        // Object
        // The default binary encoding for a data type.
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let node_id = NodeId::new_numeric(0, 3062);
        let node = Object::new_node(&node_id, browse_name, display_name);
        // node.set_description(LocalizedText::new("", "The default binary encoding for a data type."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 58), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        // The default XML encoding for a data type.
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let node_id = NodeId::new_numeric(0, 3063);
        let node = Object::new_node(&node_id, browse_name, display_name);
        // node.set_description(LocalizedText::new("", "The default XML encoding for a data type."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 58), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let node_id = NodeId::new_numeric(0, 297);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 296), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 8285), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let node_id = NodeId::new_numeric(0, 7616);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 7594), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 8291), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let node_id = NodeId::new_numeric(0, 12757);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12755), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 12759), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let node_id = NodeId::new_numeric(0, 12758);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12756), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 12762), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default XML";
        let display_name = "Default XML";
        let node_id = NodeId::new_numeric(0, 8913);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 8912), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 8918), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let node_id = NodeId::new_numeric(0, 298);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 296), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 7650), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let node_id = NodeId::new_numeric(0, 8251);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 7594), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 7656), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let node_id = NodeId::new_numeric(0, 12765);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12755), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 12767), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let node_id = NodeId::new_numeric(0, 12766);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12756), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 12770), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Object
        let browse_name = "Default Binary";
        let display_name = "Default Binary";
        let node_id = NodeId::new_numeric(0, 8917);
        let node = Object::new_node(&node_id, browse_name, display_name);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 8912), &node_id, ReferenceTypeId::HasEncoding);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 8914), ReferenceTypeId::HasDescription);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 76), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // DataType
        // Describes a value that can have any valid DataType.
        let browse_name = "BaseDataType";
        let display_name = "BaseDataType";
        let node_id = NodeId::new_numeric(0, 24);
        let node = DataType::new_node(&node_id, browse_name, display_name, true);
        // node.set_description(LocalizedText::new("", "Describes a value that can have any valid DataType."));
        address_space.insert(node);
    }
    {
        // DataType
        // Describes a value that can have any numeric DataType.
        let browse_name = "Number";
        let display_name = "Number";
        let node_id = NodeId::new_numeric(0, 26);
        let node = DataType::new_node(&node_id, browse_name, display_name, true);
        // node.set_description(LocalizedText::new("", "Describes a value that can have any numeric DataType."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that can have any integer DataType.
        let browse_name = "Integer";
        let display_name = "Integer";
        let node_id = NodeId::new_numeric(0, 27);
        let node = DataType::new_node(&node_id, browse_name, display_name, true);
        // node.set_description(LocalizedText::new("", "Describes a value that can have any integer DataType."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 26), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that can have any unsigned integer DataType.
        let browse_name = "UInteger";
        let display_name = "UInteger";
        let node_id = NodeId::new_numeric(0, 28);
        let node = DataType::new_node(&node_id, browse_name, display_name, true);
        // node.set_description(LocalizedText::new("", "Describes a value that can have any unsigned integer DataType."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 26), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an enumerated DataType.
        let browse_name = "Enumeration";
        let display_name = "Enumeration";
        let node_id = NodeId::new_numeric(0, 29);
        let node = DataType::new_node(&node_id, browse_name, display_name, true);
        // node.set_description(LocalizedText::new("", "Describes a value that is an enumerated DataType."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is either TRUE or FALSE.
        let browse_name = "Boolean";
        let display_name = "Boolean";
        let node_id = NodeId::new_numeric(0, 1);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is either TRUE or FALSE."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an integer between -128 and 127.
        let browse_name = "SByte";
        let display_name = "SByte";
        let node_id = NodeId::new_numeric(0, 2);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an integer between -128 and 127."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 27), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an integer between 0 and 255.
        let browse_name = "Byte";
        let display_name = "Byte";
        let node_id = NodeId::new_numeric(0, 3);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an integer between 0 and 255."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 28), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an integer between −32,768 and 32,767.
        let browse_name = "Int16";
        let display_name = "Int16";
        let node_id = NodeId::new_numeric(0, 4);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an integer between −32,768 and 32,767."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 27), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an integer between 0 and 65535.
        let browse_name = "UInt16";
        let display_name = "UInt16";
        let node_id = NodeId::new_numeric(0, 5);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an integer between 0 and 65535."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 28), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an integer between −2,147,483,648  and 2,147,483,647.
        let browse_name = "Int32";
        let display_name = "Int32";
        let node_id = NodeId::new_numeric(0, 6);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an integer between −2,147,483,648  and 2,147,483,647."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 27), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an integer between 0 and 4,294,967,295.
        let browse_name = "UInt32";
        let display_name = "UInt32";
        let node_id = NodeId::new_numeric(0, 7);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an integer between 0 and 4,294,967,295."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 28), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an integer between −9,223,372,036,854,775,808 and 9,223,372,036,854,775,807.
        let browse_name = "Int64";
        let display_name = "Int64";
        let node_id = NodeId::new_numeric(0, 8);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an integer between −9,223,372,036,854,775,808 and 9,223,372,036,854,775,807."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 27), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an integer between 0 and 18,446,744,073,709,551,615.
        let browse_name = "UInt64";
        let display_name = "UInt64";
        let node_id = NodeId::new_numeric(0, 9);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an integer between 0 and 18,446,744,073,709,551,615."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 28), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an IEEE 754-1985 single precision floating point number.
        let browse_name = "Float";
        let display_name = "Float";
        let node_id = NodeId::new_numeric(0, 10);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an IEEE 754-1985 single precision floating point number."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 26), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an IEEE 754-1985 double precision floating point number.
        let browse_name = "Double";
        let display_name = "Double";
        let node_id = NodeId::new_numeric(0, 11);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an IEEE 754-1985 double precision floating point number."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 26), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is a sequence of printable Unicode characters.
        let browse_name = "String";
        let display_name = "String";
        let node_id = NodeId::new_numeric(0, 12);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is a sequence of printable Unicode characters."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is a Gregorian calender date and time.
        let browse_name = "DateTime";
        let display_name = "DateTime";
        let node_id = NodeId::new_numeric(0, 13);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is a Gregorian calender date and time."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is a 128-bit globally unique identifier.
        let browse_name = "Guid";
        let display_name = "Guid";
        let node_id = NodeId::new_numeric(0, 14);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is a 128-bit globally unique identifier."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is a sequence of bytes.
        let browse_name = "ByteString";
        let display_name = "ByteString";
        let node_id = NodeId::new_numeric(0, 15);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is a sequence of bytes."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an XML element.
        let browse_name = "XmlElement";
        let display_name = "XmlElement";
        let node_id = NodeId::new_numeric(0, 16);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an XML element."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an identifier for a node within a Server address space.
        let browse_name = "NodeId";
        let display_name = "NodeId";
        let node_id = NodeId::new_numeric(0, 17);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an identifier for a node within a Server address space."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is a name qualified by a namespace.
        let browse_name = "QualifiedName";
        let display_name = "QualifiedName";
        let node_id = NodeId::new_numeric(0, 20);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is a name qualified by a namespace."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is human readable Unicode text with a locale identifier.
        let browse_name = "LocalizedText";
        let display_name = "LocalizedText";
        let node_id = NodeId::new_numeric(0, 21);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is human readable Unicode text with a locale identifier."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is any type of structure that can be described with a data encoding.
        let browse_name = "Structure";
        let display_name = "Structure";
        let node_id = NodeId::new_numeric(0, 22);
        let node = DataType::new_node(&node_id, browse_name, display_name, true);
        // node.set_description(LocalizedText::new("", "Describes a value that is any type of structure that can be described with a data encoding."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 24), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that is an image encoded as a string of bytes.
        let browse_name = "Image";
        let display_name = "Image";
        let node_id = NodeId::new_numeric(0, 30);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that is an image encoded as a string of bytes."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 15), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a 128-bit decimal value.
        let browse_name = "Decimal128";
        let display_name = "Decimal128";
        let node_id = NodeId::new_numeric(0, 121);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a 128-bit decimal value."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 26), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // Describes a value that specifies the significance of the BrowseName for an instance declaration.
        let browse_name = "NamingRuleType";
        let display_name = "NamingRuleType";
        let node_id = NodeId::new_numeric(0, 120);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "Describes a value that specifies the significance of the BrowseName for an instance declaration."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 12169), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new_numeric(0, 29), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // An image encoded in BMP format.
        let browse_name = "ImageBMP";
        let display_name = "ImageBMP";
        let node_id = NodeId::new_numeric(0, 2000);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "An image encoded in BMP format."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 30), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // An image encoded in GIF format.
        let browse_name = "ImageGIF";
        let display_name = "ImageGIF";
        let node_id = NodeId::new_numeric(0, 2001);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "An image encoded in GIF format."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 30), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // An image encoded in JPEG format.
        let browse_name = "ImageJPG";
        let display_name = "ImageJPG";
        let node_id = NodeId::new_numeric(0, 2002);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "An image encoded in JPEG format."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 30), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // An image encoded in PNG format.
        let browse_name = "ImagePNG";
        let display_name = "ImagePNG";
        let node_id = NodeId::new_numeric(0, 2003);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "An image encoded in PNG format."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 30), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type of identifier used in a node id.
        let browse_name = "IdType";
        let display_name = "IdType";
        let node_id = NodeId::new_numeric(0, 256);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "The type of identifier used in a node id."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 7591), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new_numeric(0, 29), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // A mask specifying the class of the node.
        let browse_name = "NodeClass";
        let display_name = "NodeClass";
        let node_id = NodeId::new_numeric(0, 257);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "A mask specifying the class of the node."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 11878), ReferenceTypeId::HasProperty);
        address_space.insert_reference(&NodeId::new_numeric(0, 29), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // An argument for a method.
        let browse_name = "Argument";
        let display_name = "Argument";
        let node_id = NodeId::new_numeric(0, 296);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "An argument for a method."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // A mapping between a value of an enumerated type and a name and description.
        let browse_name = "EnumValueType";
        let display_name = "EnumValueType";
        let node_id = NodeId::new_numeric(0, 7594);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "A mapping between a value of an enumerated type and a name and description."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // This abstract Structured DataType is the base DataType for all DataTypes representing a bit mask.
        let browse_name = "OptionSet";
        let display_name = "OptionSet";
        let node_id = NodeId::new_numeric(0, 12755);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "This abstract Structured DataType is the base DataType for all DataTypes representing a bit mask."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // This abstract DataType is the base DataType for all union DataTypes.
        let browse_name = "Union";
        let display_name = "Union";
        let node_id = NodeId::new_numeric(0, 12756);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "This abstract DataType is the base DataType for all union DataTypes."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // A string normalized based on the rules in the unicode specification.
        let browse_name = "NormalizedString";
        let display_name = "NormalizedString";
        let node_id = NodeId::new_numeric(0, 12877);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "A string normalized based on the rules in the unicode specification."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // An arbitraty numeric value.
        let browse_name = "DecimalString";
        let display_name = "DecimalString";
        let node_id = NodeId::new_numeric(0, 12878);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "An arbitraty numeric value."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // A period of time formatted as defined in ISO 8601-2000.
        let browse_name = "DurationString";
        let display_name = "DurationString";
        let node_id = NodeId::new_numeric(0, 12879);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "A period of time formatted as defined in ISO 8601-2000."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // A time formatted as defined in ISO 8601-2000.
        let browse_name = "TimeString";
        let display_name = "TimeString";
        let node_id = NodeId::new_numeric(0, 12880);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "A time formatted as defined in ISO 8601-2000."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // A date formatted as defined in ISO 8601-2000.
        let browse_name = "DateString";
        let display_name = "DateString";
        let node_id = NodeId::new_numeric(0, 12881);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "A date formatted as defined in ISO 8601-2000."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // A period of time measured in milliseconds.
        let browse_name = "Duration";
        let display_name = "Duration";
        let node_id = NodeId::new_numeric(0, 290);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "A period of time measured in milliseconds."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 11), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // A date/time value specified in Universal Coordinated Time (UTC).
        let browse_name = "UtcTime";
        let display_name = "UtcTime";
        let node_id = NodeId::new_numeric(0, 294);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "A date/time value specified in Universal Coordinated Time (UTC)."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 13), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // An identifier for a user locale.
        let browse_name = "LocaleId";
        let display_name = "LocaleId";
        let node_id = NodeId::new_numeric(0, 295);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        // node.set_description(LocalizedText::new("", "An identifier for a user locale."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 12), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        let browse_name = "TimeZoneDataType";
        let display_name = "TimeZoneDataType";
        let node_id = NodeId::new_numeric(0, 8912);
        let node = DataType::new_node(&node_id, browse_name, display_name, false);
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 22), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The abstract base type for all references.
        let browse_name = "References";
        let display_name = "References";
        let node_id = NodeId::new_numeric(0, 31);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, None, true, true);
        // node.set_description(LocalizedText::new("", "The abstract base type for all references."));
        address_space.insert(node);
    }
    {
        // DataType
        // The abstract base type for all non-hierarchical references.
        let browse_name = "NonHierarchicalReferences";
        let display_name = "NonHierarchicalReferences";
        let node_id = NodeId::new_numeric(0, 32);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "NonHierarchicalReferences")), false, true);
        // node.set_description(LocalizedText::new("", "The abstract base type for all non-hierarchical references."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 31), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The abstract base type for all hierarchical references.
        let browse_name = "HierarchicalReferences";
        let display_name = "HierarchicalReferences";
        let node_id = NodeId::new_numeric(0, 33);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "HierarchicalReferences")), false, true);
        // node.set_description(LocalizedText::new("", "The abstract base type for all hierarchical references."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 31), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The abstract base type for all non-looping hierarchical references.
        let browse_name = "HasChild";
        let display_name = "HasChild";
        let node_id = NodeId::new_numeric(0, 34);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "ChildOf")), false, false);
        // node.set_description(LocalizedText::new("", "The abstract base type for all non-looping hierarchical references."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 33), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for hierarchical references that are used to organize nodes.
        let browse_name = "Organizes";
        let display_name = "Organizes";
        let node_id = NodeId::new_numeric(0, 35);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "OrganizedBy")), false, false);
        // node.set_description(LocalizedText::new("", "The type for hierarchical references that are used to organize nodes."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 33), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for non-looping hierarchical references that are used to organize event sources.
        let browse_name = "HasEventSource";
        let display_name = "HasEventSource";
        let node_id = NodeId::new_numeric(0, 36);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "EventSourceOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for non-looping hierarchical references that are used to organize event sources."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 33), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for references from instance declarations to modelling rule nodes.
        let browse_name = "HasModellingRule";
        let display_name = "HasModellingRule";
        let node_id = NodeId::new_numeric(0, 37);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "ModellingRuleOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for references from instance declarations to modelling rule nodes."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for references from data type nodes to to data type encoding nodes.
        let browse_name = "HasEncoding";
        let display_name = "HasEncoding";
        let node_id = NodeId::new_numeric(0, 38);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "EncodingOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for references from data type nodes to to data type encoding nodes."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for references from data type encoding nodes to data type description nodes.
        let browse_name = "HasDescription";
        let display_name = "HasDescription";
        let node_id = NodeId::new_numeric(0, 39);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "DescriptionOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for references from data type encoding nodes to data type description nodes."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for references from a instance node its type defintion node.
        let browse_name = "HasTypeDefinition";
        let display_name = "HasTypeDefinition";
        let node_id = NodeId::new_numeric(0, 40);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "TypeDefinitionOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for references from a instance node its type defintion node."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for references from a node to an event type that is raised by node.
        let browse_name = "GeneratesEvent";
        let display_name = "GeneratesEvent";
        let node_id = NodeId::new_numeric(0, 41);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "GeneratesEvent")), false, false);
        // node.set_description(LocalizedText::new("", "The type for references from a node to an event type that is raised by node."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 32), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for references from a node to an event type that is always raised by node.
        let browse_name = "AlwaysGeneratesEvent";
        let display_name = "AlwaysGeneratesEvent";
        let node_id = NodeId::new_numeric(0, 3065);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "AlwaysGeneratesEvent")), false, false);
        // node.set_description(LocalizedText::new("", "The type for references from a node to an event type that is always raised by node."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 41), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for non-looping hierarchical references that are used to aggregate nodes into complex types.
        let browse_name = "Aggregates";
        let display_name = "Aggregates";
        let node_id = NodeId::new_numeric(0, 44);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "AggregatedBy")), false, false);
        // node.set_description(LocalizedText::new("", "The type for non-looping hierarchical references that are used to aggregate nodes into complex types."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 34), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for non-looping hierarchical references that are used to define sub types.
        let browse_name = "HasSubtype";
        let display_name = "HasSubtype";
        let node_id = NodeId::new_numeric(0, 45);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "SubtypeOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for non-looping hierarchical references that are used to define sub types."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 34), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for non-looping hierarchical reference from a node to its property.
        let browse_name = "HasProperty";
        let display_name = "HasProperty";
        let node_id = NodeId::new_numeric(0, 46);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "PropertyOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for non-looping hierarchical reference from a node to its property."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 44), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for non-looping hierarchical reference from a node to its component.
        let browse_name = "HasComponent";
        let display_name = "HasComponent";
        let node_id = NodeId::new_numeric(0, 47);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "ComponentOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for non-looping hierarchical reference from a node to its component."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 44), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for non-looping hierarchical references that are used to indicate how events propagate from node to node.
        let browse_name = "HasNotifier";
        let display_name = "HasNotifier";
        let node_id = NodeId::new_numeric(0, 48);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "NotifierOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for non-looping hierarchical references that are used to indicate how events propagate from node to node."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 36), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // DataType
        // The type for non-looping hierarchical reference from a node to its component when the order of references matters.
        let browse_name = "HasOrderedComponent";
        let display_name = "HasOrderedComponent";
        let node_id = NodeId::new_numeric(0, 49);
        let node = ReferenceType::new_node(&node_id, browse_name, display_name, Some(LocalizedText::new("", "OrderedComponentOf")), false, false);
        // node.set_description(LocalizedText::new("", "The type for non-looping hierarchical reference from a node to its component when the order of references matters."));
        address_space.insert(node);
        address_space.insert_reference(&NodeId::new_numeric(0, 47), &node_id, ReferenceTypeId::HasSubtype);
    }
    {
        // Variable
        let browse_name = "EnumValues";
        let display_name = "EnumValues";
        let node_id = NodeId::new_numeric(0, 12169);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::from_u64(7594u64).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new_numeric(0, 120), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new_numeric(0, 120), &node_id);
    }
    {
        // Variable
        // The version number of the node (used to indicate changes to references of the owning node).
        let browse_name = "NodeVersion";
        let display_name = "NodeVersion";
        let node_id = NodeId::new_numeric(0, 3068);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::String, DataValue::null());
        // node.set_description(LocalizedText::new("", "The version number of the node (used to indicate changes to references of the owning node)."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The version number of the view.
        let browse_name = "ViewVersion";
        let display_name = "ViewVersion";
        let node_id = NodeId::new_numeric(0, 12170);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::UInt32, DataValue::null());
        // node.set_description(LocalizedText::new("", "The version number of the view."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // A small image representing the object.
        let browse_name = "Icon";
        let display_name = "Icon";
        let node_id = NodeId::new_numeric(0, 3067);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::from_u64(30u64).unwrap(), DataValue::null());
        // node.set_description(LocalizedText::new("", "A small image representing the object."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The local time where the owning variable value was collected.
        let browse_name = "LocalTime";
        let display_name = "LocalTime";
        let node_id = NodeId::new_numeric(0, 3069);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::from_u64(8912u64).unwrap(), DataValue::null());
        // node.set_description(LocalizedText::new("", "The local time where the owning variable value was collected."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // Whether the value of the owning variable is allowed to be null.
        let browse_name = "AllowNulls";
        let display_name = "AllowNulls";
        let node_id = NodeId::new_numeric(0, 3070);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::Boolean, DataValue::null());
        // node.set_description(LocalizedText::new("", "Whether the value of the owning variable is allowed to be null."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The string representation of the current value for a variable with an enumerated data type.
        let browse_name = "ValueAsText";
        let display_name = "ValueAsText";
        let node_id = NodeId::new_numeric(0, 11433);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::LocalizedText, DataValue::null());
        // node.set_description(LocalizedText::new("", "The string representation of the current value for a variable with an enumerated data type."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The maximum length for a string that can be stored in the owning variable.
        let browse_name = "MaxStringLength";
        let display_name = "MaxStringLength";
        let node_id = NodeId::new_numeric(0, 11498);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::UInt32, DataValue::null());
        // node.set_description(LocalizedText::new("", "The maximum length for a string that can be stored in the owning variable."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The maximum length for a byte string that can be stored in the owning variable.
        let browse_name = "MaxByteStringLength";
        let display_name = "MaxByteStringLength";
        let node_id = NodeId::new_numeric(0, 12908);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::UInt32, DataValue::null());
        // node.set_description(LocalizedText::new("", "The maximum length for a byte string that can be stored in the owning variable."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The maximum length for an array that can be stored in the owning variable.
        let browse_name = "MaxArrayLength";
        let display_name = "MaxArrayLength";
        let node_id = NodeId::new_numeric(0, 11512);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::UInt32, DataValue::null());
        // node.set_description(LocalizedText::new("", "The maximum length for an array that can be stored in the owning variable."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The engineering units for the value of the owning variable.
        let browse_name = "EngineeringUnits";
        let display_name = "EngineeringUnits";
        let node_id = NodeId::new_numeric(0, 11513);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::from_u64(887u64).unwrap(), DataValue::null());
        // node.set_description(LocalizedText::new("", "The engineering units for the value of the owning variable."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The human readable strings associated with the values of an enumerated value (when values are sequential).
        let browse_name = "EnumStrings";
        let display_name = "EnumStrings";
        let node_id = NodeId::new_numeric(0, 11432);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::LocalizedText, DataValue::null());
        // node.set_description(LocalizedText::new("", "The human readable strings associated with the values of an enumerated value (when values are sequential)."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The human readable strings associated with the values of an enumerated value (when values have no sequence).
        let browse_name = "EnumValues";
        let display_name = "EnumValues";
        let node_id = NodeId::new_numeric(0, 3071);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::from_u64(7594u64).unwrap(), DataValue::null());
        // node.set_description(LocalizedText::new("", "The human readable strings associated with the values of an enumerated value (when values have no sequence)."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // Contains the human-readable representation for each bit of the bit mask.
        let browse_name = "OptionSetValues";
        let display_name = "OptionSetValues";
        let node_id = NodeId::new_numeric(0, 12745);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::LocalizedText, DataValue::null());
        // node.set_description(LocalizedText::new("", "Contains the human-readable representation for each bit of the bit mask."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The input arguments for a method.
        let browse_name = "InputArguments";
        let display_name = "InputArguments";
        let node_id = NodeId::new_numeric(0, 3072);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::from_u64(296u64).unwrap(), DataValue::null());
        // node.set_description(LocalizedText::new("", "The input arguments for a method."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        // The output arguments for a method.
        let browse_name = "OutputArguments";
        let display_name = "OutputArguments";
        let node_id = NodeId::new_numeric(0, 3073);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::from_u64(296u64).unwrap(), DataValue::null());
        // node.set_description(LocalizedText::new("", "The output arguments for a method."));
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
    }
    {
        // Variable
        let browse_name = "EnumStrings";
        let display_name = "EnumStrings";
        let node_id = NodeId::new_numeric(0, 7591);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::LocalizedText, DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new_numeric(0, 256), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new_numeric(0, 256), &node_id);
    }
    {
        // Variable
        let browse_name = "EnumValues";
        let display_name = "EnumValues";
        let node_id = NodeId::new_numeric(0, 11878);
        let node = Variable::new_node(&node_id, browse_name, display_name, DataTypeId::from_u64(7594u64).unwrap(), DataValue::null());
        address_space.insert(node);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 68), ReferenceTypeId::HasTypeDefinition);
        address_space.insert_reference(&node_id, &NodeId::new_numeric(0, 78), ReferenceTypeId::HasModellingRule);
        address_space.insert_reference(&NodeId::new_numeric(0, 257), &node_id, ReferenceTypeId::HasProperty);
        address_space.add_organizes(&NodeId::new_numeric(0, 257), &node_id);
    }
}
