// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use types::*;
#[allow(unused_imports)]
use services::*;

#[derive(Debug, Clone, PartialEq)]
pub struct SimpleAttributeOperand {
    pub type_definition_id: NodeId,
    pub browse_path: Option<Vec<QualifiedName>>,
    pub attribute_id: UInt32,
    pub index_range: UAString,
}

impl BinaryEncoder<SimpleAttributeOperand> for SimpleAttributeOperand {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.type_definition_id.byte_len();
        size += byte_len_array(&self.browse_path);
        size += self.attribute_id.byte_len();
        size += self.index_range.byte_len();
        size
    }
    
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.type_definition_id.encode(stream)?;
        size += write_array(stream, &self.browse_path)?;
        size += self.attribute_id.encode(stream)?;
        size += self.index_range.encode(stream)?;
        Ok(size)
    }

    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let type_definition_id = NodeId::decode(stream)?;
        let browse_path: Option<Vec<QualifiedName>> = read_array(stream)?;
        let attribute_id = UInt32::decode(stream)?;
        let index_range = UAString::decode(stream)?;
        Ok(SimpleAttributeOperand {
            type_definition_id: type_definition_id,
            browse_path: browse_path,
            attribute_id: attribute_id,
            index_range: index_range,
        })
    }
}
