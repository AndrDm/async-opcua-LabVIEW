// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use types::*;

#[derive(Debug, Clone, PartialEq)]
pub struct DoubleComplexNumberType {
    pub real: Double,
    pub imaginary: Double,
}

impl MessageInfo for DoubleComplexNumberType {
    fn object_id(&self) -> ObjectId {
        ObjectId::DoubleComplexNumberType_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<DoubleComplexNumberType> for DoubleComplexNumberType {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.real.byte_len();
        size += self.imaginary.byte_len();
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.real.encode(stream)?;
        size += self.imaginary.encode(stream)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let real = Double::decode(stream)?;
        let imaginary = Double::decode(stream)?;
        Ok(DoubleComplexNumberType {
            real,
            imaginary,
        })
    }
}
