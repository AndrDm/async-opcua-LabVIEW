// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use types::*;
#[allow(unused_imports)]
use services::*;

#[derive(Debug, Clone, PartialEq)]
pub struct ServiceCounterDataType {
    pub total_count: UInt32,
    pub error_count: UInt32,
}

impl MessageInfo for ServiceCounterDataType {
    fn object_id(&self) -> ObjectId {
        ObjectId::ServiceCounterDataType_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<ServiceCounterDataType> for ServiceCounterDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.total_count.byte_len();
        size += self.error_count.byte_len();
        size
    }

    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.total_count.encode(stream)?;
        size += self.error_count.encode(stream)?;
        Ok(size)
    }

    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let total_count = UInt32::decode(stream)?;
        let error_count = UInt32::decode(stream)?;
        Ok(ServiceCounterDataType {
            total_count: total_count,
            error_count: error_count,
        })
    }
}
