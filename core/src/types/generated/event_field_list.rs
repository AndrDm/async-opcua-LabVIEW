// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use types::*;
#[allow(unused_imports)]
use services::*;

#[derive(Debug, Clone, PartialEq)]
pub struct EventFieldList {
    pub client_handle: UInt32,
    pub event_fields: Option<Vec<Variant>>,
}

impl MessageInfo for EventFieldList {
    fn object_id(&self) -> ObjectId {
        ObjectId::EventFieldList_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<EventFieldList> for EventFieldList {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.client_handle.byte_len();
        size += byte_len_array(&self.event_fields);
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.client_handle.encode(stream)?;
        size += write_array(stream, &self.event_fields)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let client_handle = UInt32::decode(stream)?;
        let event_fields: Option<Vec<Variant>> = read_array(stream)?;
        Ok(EventFieldList {
            client_handle: client_handle,
            event_fields: event_fields,
        })
    }
}
