// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use types::*;

/// Finds the servers known to the discovery server.
#[derive(Debug, Clone, PartialEq)]
pub struct FindServersResponse {
    pub response_header: ResponseHeader,
    pub servers: Option<Vec<ApplicationDescription>>,
}

impl MessageInfo for FindServersResponse {
    fn object_id(&self) -> ObjectId {
        ObjectId::FindServersResponse_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<FindServersResponse> for FindServersResponse {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.response_header.byte_len();
        size += byte_len_array(&self.servers);
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.response_header.encode(stream)?;
        size += write_array(stream, &self.servers)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let response_header = ResponseHeader::decode(stream)?;
        let servers: Option<Vec<ApplicationDescription>> = read_array(stream)?;
        Ok(FindServersResponse {
            response_header,
            servers,
        })
    }
}
