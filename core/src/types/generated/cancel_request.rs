// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use types::*;
#[allow(unused_imports)]
use services::*;

/// Cancels an outstanding request.
#[derive(Debug, Clone, PartialEq)]
pub struct CancelRequest {
    pub request_header: RequestHeader,
    pub request_handle: UInt32,
}

impl MessageInfo for CancelRequest {
    fn object_id(&self) -> ObjectId {
        ObjectId::CancelRequest_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<CancelRequest> for CancelRequest {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.request_header.byte_len();
        size += self.request_handle.byte_len();
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.request_header.encode(stream)?;
        size += self.request_handle.encode(stream)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let request_header = RequestHeader::decode(stream)?;
        let request_handle = UInt32::decode(stream)?;
        Ok(CancelRequest {
            request_header: request_header,
            request_handle: request_handle,
        })
    }
}
