// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use types::*;
#[allow(unused_imports)]
use services::*;

#[derive(Debug, Clone, PartialEq)]
pub struct RegisterServer2Request {
    pub request_header: RequestHeader,
    pub server: RegisteredServer,
    pub discovery_configuration: Option<Vec<ExtensionObject>>,
}

impl MessageInfo for RegisterServer2Request {
    fn object_id(&self) -> ObjectId {
        ObjectId::RegisterServer2Request_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<RegisterServer2Request> for RegisterServer2Request {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.request_header.byte_len();
        size += self.server.byte_len();
        size += byte_len_array(&self.discovery_configuration);
        size
    }
    
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.request_header.encode(stream)?;
        size += self.server.encode(stream)?;
        size += write_array(stream, &self.discovery_configuration)?;
        Ok(size)
    }

    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let request_header = RequestHeader::decode(stream)?;
        let server = RegisteredServer::decode(stream)?;
        let discovery_configuration: Option<Vec<ExtensionObject>> = read_array(stream)?;
        Ok(RegisterServer2Request {
            request_header: request_header,
            server: server,
            discovery_configuration: discovery_configuration,
        })
    }
}
