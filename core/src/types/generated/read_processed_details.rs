// This file was autogenerated from Opc.Ua.Types.bsd.xml
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use types::*;
#[allow(unused_imports)]
use services::*;

#[derive(Debug, Clone, PartialEq)]
pub struct ReadProcessedDetails {
    pub start_time: DateTime,
    pub end_time: DateTime,
    pub processing_interval: Double,
    pub aggregate_type: Option<Vec<NodeId>>,
    pub aggregate_configuration: AggregateConfiguration,
}

impl BinaryEncoder<ReadProcessedDetails> for ReadProcessedDetails {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.start_time.byte_len();
        size += self.end_time.byte_len();
        size += self.processing_interval.byte_len();
        size += byte_len_array(&self.aggregate_type);
        size += self.aggregate_configuration.byte_len();
        size
    }

    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.start_time.encode(stream)?;
        size += self.end_time.encode(stream)?;
        size += self.processing_interval.encode(stream)?;
        size += write_array(stream, &self.aggregate_type)?;
        size += self.aggregate_configuration.encode(stream)?;
        Ok(size)
    }

    fn decode<S: Read>(stream: &mut S) -> EncodingResult<Self> {
        let start_time = DateTime::decode(stream)?;
        let end_time = DateTime::decode(stream)?;
        let processing_interval = Double::decode(stream)?;
        let aggregate_type: Option<Vec<NodeId>> = read_array(stream)?;
        let aggregate_configuration = AggregateConfiguration::decode(stream)?;
        Ok(ReadProcessedDetails {
            start_time: start_time,
            end_time: end_time,
            processing_interval: processing_interval,
            aggregate_type: aggregate_type,
            aggregate_configuration: aggregate_configuration,
        })
    }
}
